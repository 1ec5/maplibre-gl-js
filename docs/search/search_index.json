{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>MapLibre GL JS is a TypeScript library that uses WebGL to render interactive maps from vector tiles in a browser. The customization of the map comply with the MapLibre Style Spec. It is part of the MapLibre ecosystem, with a pendant for Mobile, Desktop, Servers called MapLibre Native.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    var map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json', // style URL\n        center: [0, 0], // starting position [lng, lat]\n        zoom: 1 // starting zoom\n    });\n&lt;/script&gt;\n</code></pre>"},{"location":"#reading-this-documentation","title":"Reading this documentation","text":"<p>This documentation is divided into several sections:</p> <ul> <li>Main - The Main section holds the following classes<ul> <li><code>Map</code> object is the map on your page. It lets you access methods and properties for interacting with the map's style and layers, respond to events, and manipulate the user's perspective with the camera.</li> <li><code>MaplibreGL</code> object is MapLibre GL JS's global properties and options that you might want to access while initializing your map or accessing information about its status.</li> </ul> </li> <li>Markers and Controls - This section describes the user interface elements that you can add to your map. The items in this section exist outside of the map's <code>canvas</code> element. This consists of <code>Marker</code>, <code>Popup</code> and all the controls.</li> <li>Geography and geometry - This section includes general utilities and types that relate to working with and manipulating geographic information or geometries.</li> <li>User interaction handlers - The items in this section relate to the ways in which the map responds to user input.</li> <li>Sources - This section describes the source types MapLibre GL JS can handle besides the ones described in the MapLibre Style Specification.</li> <li>Event Related - This section describes the different types of events that MapLibre GL JS can raise.</li> </ul> <p>Each section describes classes or objects as well as their properties, parameters, instance members, and associated events. Many sections also include inline code examples and related resources.</p> <p>In the examples, we use vector tiles our Demo tiles repository and from MapTiler. Get your own API key if you want to use MapTiler data in your project.</p>"},{"location":"#csp-directives","title":"CSP Directives","text":"<p>As a mitigation for Cross-Site Scripting and other types of web security vulnerabilities, you may use a Content Security Policy (CSP) to specify security policies for your website. If you do, MapLibre GL JS requires the following CSP directives:</p> <pre><code>worker-src blob: ;\nchild-src blob: ;\nimg-src data: blob: ;\n</code></pre> <p>For strict CSP environments without <code>worker-src blob: ; child-src blob:</code> enabled, there's a separate MapLibre GL JS bundle (<code>maplibre-gl-csp.js</code> and <code>maplibre-gl-csp-worker.js</code>) which requires setting the path to the worker manually:</p> <pre><code>&lt;script&gt;\nmaplibregl.workerUrl = \"${urls.js().replace('.js', '-csp-worker.js')}\";\n...\n&lt;/script&gt;\n</code></pre>"},{"location":"#maplibre-css","title":"MapLibre CSS","text":"<p>The CSS referenced in the Quickstart is used to style DOM elements created by MapLibre code. Without the CSS, elements like Popups and Markers won't work.</p> <p>Including it with a <code>&lt;link&gt;</code> in the head of the document via the UNPKG CDN is the simplest and easiest way to provide the CSS, but it is also bundled in the MapLibre module, meaning that if you have a bundler that can handle CSS, you can import the CSS from <code>maplibre-gl/dist/maplibre-gl.css</code>.</p> <p>Note too that if the CSS isn't available by the first render, as soon as the CSS is provided, the DOM elements that depend on this CSS should recover.</p>"},{"location":"#cdn","title":"CDN","text":"<p>The MapLibre GL JS (<code>.js</code> &amp; <code>.css</code>) are distributed via UNPKG.com. You can view a listing of all the files in the MapLibre GL JS package by appending a <code>/</code> at the end of the MapLibre slug. This is useful to review other revisions or to review the files at UNPKG or the LICENSE. See examples in the following table:</p> <p>Examples</p> Use Case <code>.js</code> <code>.css</code> <code>latest</code> https://unpkg.com/maplibre-gl/dist/maplibre-gl.js https://unpkg.com/maplibre-gl/dist/maplibre-gl.css Use at least <code>2.4.x</code> https://unpkg.com/maplibre-gl@^2.4/dist/maplibre-gl.js https://unpkg.com/maplibre-gl@^2.4/dist/maplibre-gl.css"},{"location":"plugins/","title":"Plugins","text":""},{"location":"plugins/#user-interface-plugins","title":"User Interface Plugins","text":""},{"location":"plugins/#mapbox-gl-accessibility","title":"mapbox-gl-accessibility","text":"<p>Integrates with ARIA-compatible screen readers for users with visual impairments. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-boundaries","title":"mapbox-gl-boundaries","text":"<p>Enables users to show/hide disputed borders. View on GitHub</p>"},{"location":"plugins/#maplibre-gl-compare","title":"maplibre-gl-compare","text":"<p>Enables users to compare two maps by swiping left and right. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-controls","title":"mapbox-gl-controls","text":"<p>Adds controls for a ruler, style inspector, localization, and style switcher. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-directions","title":"mapbox-gl-directions","text":"<p>Adds a control to allow users to plot driving, walking, and cycling directions on the map. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-draw","title":"mapbox-gl-draw","text":"<p>Adds support for drawing and editing features on maps. View on GitHub</p>"},{"location":"plugins/#terra-draw","title":"terra-draw","text":"<p>Provides a MapLibre GL JS adapter to allow creation, selection and editing of geometries. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-elevation","title":"mapbox-gl-elevation","text":"<p>Adds a control to retrieve altitude from terrain RGB tilesets. View on GitHub</p>"},{"location":"plugins/#maplibre-gl-export","title":"maplibre-gl-export","text":"<p>Adds a control that exports the map as a PDF or images such as PNG, JPEG and SVG. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-geocoder","title":"mapbox-gl-geocoder","text":"<p>Adds a geocoder control. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-infobox","title":"mapbox-gl-infobox","text":"<p>Adds a control to display an infobox or a gradient. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-legend","title":"mapbox-gl-legend","text":"<p>Adds a control that shows a legend generated from the map style. View on GitHub</p>"},{"location":"plugins/#maplibre-gl-opacity","title":"maplibre-gl-opacity","text":"<p>Make multiple tile layers transparent. View on GitHub</p>"},{"location":"plugins/#mapboxgl-minimap","title":"mapboxgl-minimap","text":"<p>Adds a control to show a miniature overview of the current map. View on GitHub</p>"},{"location":"plugins/#maplibre-gl-temporal-control","title":"maplibre-gl-temporal-control","text":"<p>Temporal Controller plugin for MapLibre GL JS. demo. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-valhalla","title":"mapbox-gl-valhalla","text":"<p>Adds a control to provide isochrone features from valhalla server. View on GitHub</p>"},{"location":"plugins/#mapboxphoton","title":"mapbox.photon","text":"<p>Adds a control to provide a geocoding feature from Photon API. View on GitHub</p>"},{"location":"plugins/#maplibre-gl-basemaps","title":"maplibre-gl-basemaps","text":"<p>A plugin for switching between raster basemaps. View on GitHub</p>"},{"location":"plugins/#maplibre-gl-measures","title":"maplibre-gl-measures","text":"<p>A plugin for taking measures on the map. View on GitHub</p>"},{"location":"plugins/#any-routing","title":"any-routing","text":"<p>A modular plugin for calculating routes. View on GitHub</p>"},{"location":"plugins/#maplibre-search-box","title":"maplibre-search-box","text":"<p>Adds a control for searching for places using Stadia Maps. View on GitHub</p>"},{"location":"plugins/#route-snapper","title":"route-snapper","text":"<p>Draw routes and areas snapped to roads. View on GitHub</p>"},{"location":"plugins/#svelte-maplibre-components","title":"svelte-maplibre-components","text":"<p>A set of maplibre plugins to integrate with svelte/sveltekit. The respository consists of various useful plugins such as export plugin, legend plugin, measure plugin, attribute table plugin, tour plugin, etc. View on GitHub</p>"},{"location":"plugins/#map-rendering-plugins","title":"Map Rendering Plugins","text":""},{"location":"plugins/#mapbox-gl-language","title":"mapbox-gl-language","text":"<p>Automatically localizes the map into the user\u2019s language. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-rtl-text","title":"mapbox-gl-rtl-text","text":"<p>Adds right-to-left text support. View on GitHub       example: mapbox-gl-rtl-text</p>"},{"location":"plugins/#mapbox-gl-traffic","title":"mapbox-gl-traffic","text":"<p>Hide and show traffic layers on your map with an optional toggle button. View on GitHub</p>"},{"location":"plugins/#deckgl","title":"deck.gl","text":"<p>Adds advanced WebGL visualization layers. View on GitHub</p>"},{"location":"plugins/#l7","title":"L7","text":"<p>Adds large-scale WebGL-powered geospatial data visualization framework. View on GitHub</p>"},{"location":"plugins/#flowmapblue","title":"flowmap.blue","text":"<p>Render a geographic flow map visualization from a spreadsheet published on Google Sheets. View on GitHub</p>"},{"location":"plugins/#maplibre-contour","title":"maplibre-contour","text":"<p>Adds elevation contour lines to a map from raster-dem tiles. View on GitHub</p>"},{"location":"plugins/#layer-types","title":"Layer Types","text":""},{"location":"plugins/#mapbox-gl-flatgeobuf","title":"mapbox-gl-flatgeobuf","text":"<p>A library for retrieving features from FlatGeobuf file using a tiled approach. Compatible with MapLibre GL JS and Mapbox GL JS. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-arcgis-featureserver","title":"mapbox-gl-arcgis-featureserver","text":"<p>A library for retrieving features from an ArcGIS FeatureServer or MapServer. This library makes tiled requests rather than simply requesting every feature. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-ogc-feature-collection","title":"mapbox-gl-ogc-feature-collection","text":"<p>A small package for requesting geojson from an OGC Feature API endpoint to serve tiles in MapBox/MapLibre. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-esri-sources","title":"mapbox-gl-esri-sources","text":"<p>A library for making it easier to use Esri services in MapLibre GL JS. Supports Esri Map Services (dynamic &amp; tiled), Esri Vector Tile Services &amp; Esri Vector Basemap Styles. View on GitHub</p>"},{"location":"plugins/#pmtiles","title":"pmtiles","text":"<p>A library for retrieving tiles from single-file, cloud-storage-optimized PMTiles archives, which don't require running a server or API. View on GitHub</p>"},{"location":"plugins/#framework-integrations","title":"Framework Integrations","text":""},{"location":"plugins/#echartslayer","title":"echartslayer","text":"<p>Provides an echarts integration. View on GitHub</p>"},{"location":"plugins/#wtmapbox","title":"wtMapbox","text":"<p>Provides a Webtoolkit integration. View on GitHub</p>"},{"location":"plugins/#react-mapbox-gl","title":"react-mapbox-gl","text":"<p>Provides a React integration. View on GitHub</p>"},{"location":"plugins/#angular-mapboxgl-directive","title":"angular-mapboxgl-directive","text":"<p>Provides an AngularJS directive. View on GitHub</p>"},{"location":"plugins/#ngx-maplibre-gl","title":"ngx-maplibre-gl","text":"<p>Provides an Angular integration. View on GitHub</p>"},{"location":"plugins/#vue-maplibre-gl","title":"vue-maplibre-gl","text":"<p>Provide a VueJS integration. View on GitHub</p>"},{"location":"plugins/#elm-mapbox","title":"elm-mapbox","text":"<p>Provides an Elm integration. View on GitHub</p>"},{"location":"plugins/#ember-mapbox-gl","title":"ember-mapbox-gl","text":"<p>Provides an Ember integration. View on GitHub</p>"},{"location":"plugins/#svelte-maplibre","title":"svelte-maplibre","text":"<p>Provides a Svelte integration. View on GitHub</p>"},{"location":"plugins/#sveltekit-maplibre-boilerplate","title":"sveltekit-maplibre-boilerplate","text":"<p>A preconfigured template repository to easily start developing a maplibre application in svelte/sveltekit. View on GitHub</p>"},{"location":"plugins/#utility-libraries","title":"Utility Libraries","text":""},{"location":"plugins/#turf","title":"turf","text":"<p>turf provides advanced geospatial analysis tools.</p>"},{"location":"plugins/#mapbox-gl-layer-groups","title":"mapbox-gl-layer-groups","text":"<p>Manages layer groups. View on GitHub</p>"},{"location":"plugins/#expression-jamsession","title":"expression-jamsession","text":"<p>Converts Mapbox Studio formulas into expressions. View on GitHub</p>"},{"location":"plugins/#simplespec-to-gl-style","title":"simplespec-to-gl-style","text":"<p>Converts GeoJSON styles with simplestyle-spec to a MapLibre GL Style. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-sync-move","title":"mapbox-gl-sync-move","text":"<p>Syncs movement between two maps. View on GitHub</p>"},{"location":"plugins/#mapbox-choropleth","title":"mapbox-choropleth","text":"<p>Create a choropleth layer from a CSV source and a geometry source. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-utils","title":"mapbox-gl-utils","text":"<p>Manage layers, sources, and properties with syntactic sugar and convenience functions. View on GitHub</p>"},{"location":"plugins/#maplibregl-mapbox-request-transformer","title":"maplibregl-mapbox-request-transformer","text":"<p>This library provides a request transforming function enabling the consumption of MapboxGL Styles in MapLibreGL. View on GitHub</p>"},{"location":"plugins/#development-tools","title":"Development Tools","text":""},{"location":"plugins/#font-maker","title":"font-maker","text":"<p>A web app to convert fonts into fontstacks for use in MapLibre GL. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-js-mock","title":"mapbox-gl-js-mock","text":"<p>A mock of Mapbox GL JS. View on GitHub</p>"},{"location":"plugins/#maplibre-gl-inspect","title":"maplibre-gl-inspect","text":"<p>Adds an inspect control to view vector source features and properties. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-fps","title":"mapbox-gl-fps","text":"<p>A frames-per-seconds GUI control and measurer with statistic report output. View on GitHub</p>"},{"location":"plugins/#mapbox-gl-framerate","title":"mapbox-gl-framerate","text":"<p>A frame rate control to evaluate map rendering performance. View on GitHub</p>"},{"location":"style-spec/","title":"Style Specifications","text":"<p>The style spec is the defition language for the visualization of the map. It can be fine tuned to show the most amazing maps! In order to learn it better the following documenation site was created for it:</p> <p>Style Specifications</p> <p>Enjoy!</p>"},{"location":"API/","title":"Intro","text":"<p>This file is intended as a reference for the important and public classes of this API. We recommend looking at the examples as they will help you the most to start with MapLibre.</p> <p>Most of the classes wirtten here have an \"Options\" object for initialization, it is recommended to check which options exist. </p>"},{"location":"API/#main","title":"Main","text":"<ul> <li>Map</li> </ul>"},{"location":"API/#markers-and-controls","title":"Markers and Controls","text":"<ul> <li>AttributionControl</li> <li>FullscreenControl</li> <li>GeolocateControl</li> <li>Hash</li> <li>LogoControl</li> <li>Marker</li> <li>NavigationControl</li> <li>Popup</li> <li>ScaleControl</li> <li>TerrainControl</li> </ul>"},{"location":"API/#geography-and-geometry","title":"Geography and Geometry","text":"<ul> <li>EdgeInsets</li> <li>LngLat</li> <li>LngLatBounds</li> <li>MercatorCoordinate</li> <li>LngLatBoundsLike</li> <li>LngLatLike</li> <li>PaddingOptions</li> <li>PointLike</li> </ul>"},{"location":"API/#handlers","title":"Handlers","text":"<ul> <li>BoxZoomHandler</li> <li>DoubleClickZoomHandler</li> <li>DragPanHandler</li> <li>DragRotateHandler</li> <li>KeyboardHandler</li> <li>ScrollZoomHandler</li> <li>TwoFingersTouchHandler</li> <li>TwoFingersTouchPitchHandler</li> <li>TwoFingersTouchRotateHandler</li> <li>TwoFingersTouchZoomHandler</li> <li>TwoFingersTouchZoomRotateHandler</li> </ul>"},{"location":"API/#sources","title":"Sources","text":"<ul> <li>CanvasSource</li> <li>GeoJSONSource</li> <li>ImageSource</li> <li>RasterDEMTileSource</li> <li>RasterTileSource</li> <li>VectorTileSource</li> <li>VideoSource</li> <li>Source</li> </ul>"},{"location":"API/#event-related","title":"Event Related","text":"<ul> <li>Evented</li> <li>MapTouchEvent</li> <li>MapWheelEvent</li> <li>MapContextEvent</li> <li>MapDataEvent</li> <li>MapEventType</li> <li>MapLayerEventType</li> <li>MapLayerMouseEvent</li> <li>MapLayerTouchEvent</li> <li>MapLibreEvent</li> <li>MapLibreZoomEvent</li> <li>MapSourceDataEvent</li> <li>MapStyleDataEvent</li> <li>MapStyleImageMissingEvent</li> <li>MapTerrainEvent</li> </ul>"},{"location":"API/classes/default/","title":"Class: default","text":"<p><code>maplibregl</code> is the global object that allows configurations that are not specific to a map instance</p>"},{"location":"API/classes/default/#accessors","title":"Accessors","text":""},{"location":"API/classes/default/#maxparallelimagerequests","title":"maxParallelImageRequests","text":"<p>\u2022 <code>get</code> maxParallelImageRequests(): <code>number</code></p> <p>Gets and sets the maximum number of images (raster tiles, sprites, icons) to load in parallel, which affects performance in raster-heavy maps. 16 by default.</p>"},{"location":"API/classes/default/#returns","title":"Returns","text":"<p><code>number</code></p> <p>Number of parallel requests currently configured.</p> <p><code>Example</code></p> <pre><code>maplibregl.maxParallelImageRequests = 10;\n</code></pre>"},{"location":"API/classes/default/#defined-in","title":"Defined in","text":"<p>src/index.ts:168</p>"},{"location":"API/classes/default/#version","title":"version","text":"<p>\u2022 <code>get</code> version(): <code>string</code></p> <p>Returns the package version of the library</p>"},{"location":"API/classes/default/#returns_1","title":"Returns","text":"<p><code>string</code></p> <p>Package version of the library</p>"},{"location":"API/classes/default/#defined-in_1","title":"Defined in","text":"<p>src/index.ts:136</p>"},{"location":"API/classes/default/#workercount","title":"workerCount","text":"<p>\u2022 <code>get</code> workerCount(): <code>number</code></p> <p>Gets and sets the number of web workers instantiated on a page with GL JS maps. By default, workerCount is 1 except for Safari browser where it is set to half the number of CPU cores (capped at 3). Make sure to set this property before creating any map instances for it to have effect.</p>"},{"location":"API/classes/default/#returns_2","title":"Returns","text":"<p><code>number</code></p> <p>Number of workers currently configured.</p> <p><code>Example</code></p> <pre><code>maplibregl.workerCount = 2;\n</code></pre>"},{"location":"API/classes/default/#defined-in_2","title":"Defined in","text":"<p>src/index.ts:151</p>"},{"location":"API/classes/default/#methods","title":"Methods","text":""},{"location":"API/classes/default/#addprotocol","title":"addProtocol","text":"<p>\u25b8 addProtocol(<code>customProtocol</code>, <code>loadFn</code>): <code>void</code></p> <p>Sets a custom load tile function that will be called when using a source that starts with a custom url schema. The example below will be triggered for custom:// urls defined in the sources list in the style definitions. The function passed will receive the request parameters and should call the callback with the resulting request, for example a pbf vector tile, non-compressed, represented as ArrayBuffer.</p>"},{"location":"API/classes/default/#parameters","title":"Parameters","text":"Name Type Description <code>customProtocol</code> <code>string</code> the protocol to hook, for example 'custom' <code>loadFn</code> (<code>requestParameters</code>: <code>RequestParameters</code>, <code>callback</code>: <code>ResponseCallback</code>\\&lt;<code>any</code>&gt;) =&gt; <code>Cancelable</code> the function to use when trying to fetch a tile specified by the customProtocol"},{"location":"API/classes/default/#returns_3","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <p>This will fetch a file using the fetch API (this is obviously a non interesting example...) <pre><code>maplibregl.addProtocol('custom', (params, callback) =&gt; {\n       fetch(`https://${params.url.split(\"://\")[1]}`)\n           .then(t =&gt; {\n               if (t.status == 200) {\n                   t.arrayBuffer().then(arr =&gt; {\n                       callback(null, arr, null, null);\n                   });\n               } else {\n                   callback(new Error(`Tile fetch error: ${t.statusText}`));\n               }\n           })\n           .catch(e =&gt; {\n               callback(new Error(e));\n           });\n       return { cancel: () =&gt; { } };\n   });\n// the following is an example of a way to return an error when trying to load a tile\nmaplibregl.addProtocol('custom2', (params, callback) =&gt; {\n     callback(new Error('someErrorMessage'));\n     return { cancel: () =&gt; { } };\n});\n</code></pre></p>"},{"location":"API/classes/default/#defined-in_3","title":"Defined in","text":"<p>src/index.ts:218</p>"},{"location":"API/classes/default/#removeprotocol","title":"removeProtocol","text":"<p>\u25b8 removeProtocol(<code>customProtocol</code>): <code>void</code></p> <p>Removes a previously added protocol</p>"},{"location":"API/classes/default/#parameters_1","title":"Parameters","text":"Name Type Description <code>customProtocol</code> <code>string</code> the custom protocol to remove registration for"},{"location":"API/classes/default/#returns_4","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>maplibregl.removeProtocol('custom');\n</code></pre>"},{"location":"API/classes/default/#defined-in_4","title":"Defined in","text":"<p>src/index.ts:231</p>"},{"location":"API/classes/default/#properties","title":"Properties","text":""},{"location":"API/classes/default/#clearprewarmedresources","title":"clearPrewarmedResources","text":"<p>\u25aa <code>Static</code> clearPrewarmedResources: () =&gt; <code>void</code> = <code>clearPrewarmedResources</code></p>"},{"location":"API/classes/default/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (): <code>void</code></p> <p>Clears up resources that have previously been created by <code>maplibregl.prewarm()</code>. Note that this is typically not necessary. You should only call this function if you expect the user of your app to not return to a Map view at any point in your application.</p>"},{"location":"API/classes/default/#returns_5","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>maplibregl.clearPrewarmedResources()\n</code></pre>"},{"location":"API/classes/default/#defined-in_5","title":"Defined in","text":"<p>src/index.ts:131</p>"},{"location":"API/classes/default/#getrtltextpluginstatus","title":"getRTLTextPluginStatus","text":"<p>\u25aa <code>Static</code> getRTLTextPluginStatus: () =&gt; <code>string</code> = <code>getRTLTextPluginStatus</code></p>"},{"location":"API/classes/default/#type-declaration_1","title":"Type declaration","text":"<p>\u25b8 (): <code>string</code></p> <p>Gets the map's RTL text plugin status. The status can be <code>unavailable</code> (i.e. not requested or removed), <code>loading</code>, <code>loaded</code> or <code>error</code>. If the status is <code>loaded</code> and the plugin is requested again, an error will be thrown.</p>"},{"location":"API/classes/default/#returns_6","title":"Returns","text":"<p><code>string</code></p> <p><code>Example</code></p> <pre><code>const pluginStatus = maplibregl.getRTLTextPluginStatus();\n</code></pre>"},{"location":"API/classes/default/#defined-in_6","title":"Defined in","text":"<p>src/index.ts:96</p>"},{"location":"API/classes/default/#prewarm","title":"prewarm","text":"<p>\u25aa <code>Static</code> prewarm: () =&gt; <code>void</code> = <code>prewarm</code></p>"},{"location":"API/classes/default/#type-declaration_2","title":"Type declaration","text":"<p>\u25b8 (): <code>void</code></p> <p>Initializes resources like WebWorkers that can be shared across maps to lower load times in some situations. <code>maplibregl.workerUrl</code> and <code>maplibregl.workerCount</code>, if being used, must be set before <code>prewarm()</code> is called to have an effect.</p> <p>By default, the lifecycle of these resources is managed automatically, and they are lazily initialized when a Map is first created. By invoking <code>prewarm()</code>, these resources will be created ahead of time, and will not be cleared when the last Map is removed from the page. This allows them to be re-used by new Map instances that are created later. They can be manually cleared by calling <code>maplibregl.clearPrewarmedResources()</code>. This is only necessary if your web page remains active but stops using maps altogether.</p> <p>This is primarily useful when using GL-JS maps in a single page app, wherein a user would navigate between various views that can cause Map instances to constantly be created and destroyed.</p>"},{"location":"API/classes/default/#returns_7","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>maplibregl.prewarm()\n</code></pre>"},{"location":"API/classes/default/#defined-in_7","title":"Defined in","text":"<p>src/index.ts:119</p>"},{"location":"API/classes/default/#setrtltextplugin","title":"setRTLTextPlugin","text":"<p>\u25aa <code>Static</code> setRTLTextPlugin: (<code>url</code>: <code>string</code>, <code>callback</code>: <code>ErrorCallback</code>, <code>deferred</code>: <code>boolean</code>) =&gt; <code>void</code> = <code>setRTLTextPlugin</code></p>"},{"location":"API/classes/default/#type-declaration_3","title":"Type declaration","text":"<p>\u25b8 (<code>url</code>, <code>callback</code>, <code>deferred?</code>): <code>void</code></p> <p>Sets the map's RTL text plugin. Necessary for supporting the Arabic and Hebrew languages, which are written right-to-left.</p>"},{"location":"API/classes/default/#parameters_2","title":"Parameters","text":"Name Type Default value Description <code>url</code> <code>string</code> <code>undefined</code> - <code>callback</code> <code>ErrorCallback</code> <code>undefined</code> Called with an error argument if there is an error. <code>deferred</code> <code>boolean</code> <code>false</code> -"},{"location":"API/classes/default/#returns_8","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.js');\n</code></pre> <p><code>See</code></p> <p>Add support for right-to-left scripts</p>"},{"location":"API/classes/default/#defined-in_8","title":"Defined in","text":"<p>src/index.ts:85</p>"},{"location":"API/classes/maplibregl.AJAXError/","title":"Class: AJAXError","text":"<p>maplibregl.AJAXError</p> <p>An error thrown when a HTTP request results in an error response.</p>"},{"location":"API/classes/maplibregl.AJAXError/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Error</code></li> </ul> <p>\u21b3 <code>AJAXError</code></p>"},{"location":"API/classes/maplibregl.AJAXError/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.AJAXError/#constructor","title":"constructor","text":"<p>\u2022 new AJAXError(<code>status</code>, <code>statusText</code>, <code>url</code>, <code>body</code>): <code>AJAXError</code></p>"},{"location":"API/classes/maplibregl.AJAXError/#parameters","title":"Parameters","text":"Name Type Description <code>status</code> <code>number</code> The response's HTTP status code. <code>statusText</code> <code>string</code> The response's HTTP status text. <code>url</code> <code>string</code> The request's URL. <code>body</code> <code>Blob</code> The response's body."},{"location":"API/classes/maplibregl.AJAXError/#returns","title":"Returns","text":"<p><code>AJAXError</code></p>"},{"location":"API/classes/maplibregl.AJAXError/#overrides","title":"Overrides","text":"<p>Error.constructor</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in","title":"Defined in","text":"<p>src/util/ajax.ts:98</p>"},{"location":"API/classes/maplibregl.AJAXError/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.AJAXError/#body","title":"body","text":"<p>\u2022 body: <code>Blob</code></p> <p>The response's body.</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in_1","title":"Defined in","text":"<p>src/util/ajax.ts:90</p>"},{"location":"API/classes/maplibregl.AJAXError/#status","title":"status","text":"<p>\u2022 status: <code>number</code></p> <p>The response's HTTP status code.</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in_2","title":"Defined in","text":"<p>src/util/ajax.ts:75</p>"},{"location":"API/classes/maplibregl.AJAXError/#statustext","title":"statusText","text":"<p>\u2022 statusText: <code>string</code></p> <p>The response's HTTP status text.</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in_3","title":"Defined in","text":"<p>src/util/ajax.ts:80</p>"},{"location":"API/classes/maplibregl.AJAXError/#url","title":"url","text":"<p>\u2022 url: <code>string</code></p> <p>The request's URL.</p>"},{"location":"API/classes/maplibregl.AJAXError/#defined-in_4","title":"Defined in","text":"<p>src/util/ajax.ts:85</p>"},{"location":"API/classes/maplibregl.Actor/","title":"Class: Actor","text":"<p>maplibregl.Actor</p> <p>An implementation of the Actor design pattern that maintains the relationship between asynchronous tasks and the objects that spin them off - in this case, tasks like parsing parts of styles, owned by the styles</p>"},{"location":"API/classes/maplibregl.Actor/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.Actor/#constructor","title":"constructor","text":"<p>\u2022 new Actor(<code>target</code>, <code>parent</code>, <code>mapId?</code>): <code>Actor</code></p>"},{"location":"API/classes/maplibregl.Actor/#parameters","title":"Parameters","text":"Name Type Description <code>target</code> <code>ActorTarget</code> The target <code>parent</code> <code>WorkerSourceProvider</code> | <code>GlyphsProvider</code> The parent <code>mapId?</code> <code>string</code> | <code>number</code> A unique identifier for the Map instance using this Actor."},{"location":"API/classes/maplibregl.Actor/#returns","title":"Returns","text":"<p><code>Actor</code></p>"},{"location":"API/classes/maplibregl.Actor/#defined-in","title":"Defined in","text":"<p>src/util/actor.ts:79</p>"},{"location":"API/classes/maplibregl.Actor/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Actor/#send","title":"send","text":"<p>\u25b8 send(<code>type</code>, <code>data</code>, <code>callback?</code>, <code>targetMapId?</code>, <code>mustQueue?</code>): <code>Cancelable</code></p> <p>Sends a message from a main-thread map to a Worker or from a Worker back to a main-thread map instance.</p>"},{"location":"API/classes/maplibregl.Actor/#parameters_1","title":"Parameters","text":"Name Type Default value Description <code>type</code> <code>MessageType</code> <code>undefined</code> The name of the target method to invoke or '[source-type].[source-name].name' for a method on a WorkerSource. <code>data</code> <code>unknown</code> <code>undefined</code> - <code>callback?</code> <code>Function</code> <code>undefined</code> - <code>targetMapId?</code> <code>string</code> <code>undefined</code> A particular mapId to which to send this message. <code>mustQueue</code> <code>boolean</code> <code>false</code> -"},{"location":"API/classes/maplibregl.Actor/#returns_1","title":"Returns","text":"<p><code>Cancelable</code></p>"},{"location":"API/classes/maplibregl.Actor/#defined-in_1","title":"Defined in","text":"<p>src/util/actor.ts:99</p>"},{"location":"API/classes/maplibregl.AttributionControl/","title":"Class: AttributionControl","text":"<p>maplibregl.AttributionControl</p> <p>An <code>AttributionControl</code> control presents the map's attribution information. By default, the attribution control is expanded (regardless of map width).</p> <p><code>Example</code></p> <pre><code>let map = new maplibregl.Map({attributionControl: false})\n    .addControl(new maplibregl.AttributionControl({\n        compact: true\n    }));\n</code></pre>"},{"location":"API/classes/maplibregl.AttributionControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.AttributionControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.AttributionControl/#constructor","title":"constructor","text":"<p>\u2022 new AttributionControl(<code>options?</code>): <code>AttributionControl</code></p>"},{"location":"API/classes/maplibregl.AttributionControl/#parameters","title":"Parameters","text":"Name Type Description <code>options</code> <code>AttributionOptions</code> the attribution options"},{"location":"API/classes/maplibregl.AttributionControl/#returns","title":"Returns","text":"<p><code>AttributionControl</code></p>"},{"location":"API/classes/maplibregl.AttributionControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/attribution_control.ts:49</p>"},{"location":"API/classes/maplibregl.AttributionControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.AttributionControl/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>): <code>HTMLElement</code></p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map#addControl internally.</p>"},{"location":"API/classes/maplibregl.AttributionControl/#parameters_1","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/maplibregl.AttributionControl/#returns_1","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/maplibregl.AttributionControl/#implementation-of","title":"Implementation of","text":"<p>IControl.onAdd</p>"},{"location":"API/classes/maplibregl.AttributionControl/#defined-in_1","title":"Defined in","text":"<p>src/ui/control/attribution_control.ts:58</p>"},{"location":"API/classes/maplibregl.AttributionControl/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(): <code>void</code></p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map#removeControl internally.</p>"},{"location":"API/classes/maplibregl.AttributionControl/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.AttributionControl/#implementation-of_1","title":"Implementation of","text":"<p>IControl.onRemove</p>"},{"location":"API/classes/maplibregl.AttributionControl/#defined-in_2","title":"Defined in","text":"<p>src/ui/control/attribution_control.ts:80</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/","title":"Class: BoxZoomHandler","text":"<p>maplibregl.BoxZoomHandler</p> <p>The <code>BoxZoomHandler</code> allows the user to zoom the map to fit within a bounding box. The bounding box is defined by clicking and holding <code>shift</code> while dragging the cursor.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.BoxZoomHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"box zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.boxZoom.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implementation-of","title":"Implementation of","text":"<p>Handler.disable</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:78</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#enable","title":"enable","text":"<p>\u25b8 enable(): <code>void</code></p> <p>Enables the \"box zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.boxZoom.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implementation-of_1","title":"Implementation of","text":"<p>Handler.enable</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:65</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"box zoom\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"box zoom\" interaction is active.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implementation-of_2","title":"Implementation of","text":"<p>Handler.isActive</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:53</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"box zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"box zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#implementation-of_3","title":"Implementation of","text":"<p>Handler.isEnabled</p>"},{"location":"API/classes/maplibregl.BoxZoomHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/box_zoom.ts:44</p>"},{"location":"API/classes/maplibregl.CanonicalTileID/","title":"Class: CanonicalTileID","text":"<p>maplibregl.CanonicalTileID</p> <p>A canonical way to define a tile ID</p>"},{"location":"API/classes/maplibregl.CanonicalTileID/#implements","title":"Implements","text":"<ul> <li><code>ICanonicalTileID</code></li> </ul>"},{"location":"API/classes/maplibregl.CanvasSource/","title":"Class: CanvasSource","text":"<p>maplibregl.CanvasSource</p> <p>A data source containing the contents of an HTML canvas. See CanvasSourceSpecification for detailed documentation of options.</p> <p><code>Example</code></p> <pre><code>// add to map\nmap.addSource('some id', {\n   type: 'canvas',\n   canvas: 'idOfMyHTMLCanvas',\n   animate: true,\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update\nlet mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\nmap.removeSource('some id');  // remove\n</code></pre>"},{"location":"API/classes/maplibregl.CanvasSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ImageSource</code></li> </ul> <p>\u21b3 <code>CanvasSource</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.CanvasSource/#getcanvas","title":"getCanvas","text":"<p>\u25b8 getCanvas(): <code>HTMLCanvasElement</code></p> <p>Returns the HTML <code>canvas</code> element.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#returns","title":"Returns","text":"<p><code>HTMLCanvasElement</code></p> <p>The HTML <code>canvas</code> element.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in","title":"Defined in","text":"<p>src/source/canvas_source.ts:147</p>"},{"location":"API/classes/maplibregl.CanvasSource/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.CanvasSource/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from","title":"Inherited from","text":"<p>ImageSource.listens</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.CanvasSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>CanvasSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.CanvasSource/#returns_2","title":"Returns","text":"<p><code>CanvasSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_1","title":"Inherited from","text":"<p>ImageSource.off</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.CanvasSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>CanvasSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.CanvasSource/#returns_3","title":"Returns","text":"<p><code>CanvasSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_2","title":"Inherited from","text":"<p>ImageSource.on</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.CanvasSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>CanvasSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.CanvasSource/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>CanvasSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_3","title":"Inherited from","text":"<p>ImageSource.once</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.CanvasSource/#setcoordinates","title":"setCoordinates","text":"<p>\u25b8 setCoordinates(<code>coordinates</code>): <code>CanvasSource</code></p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_4","title":"Parameters","text":"Name Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/maplibregl.CanvasSource/#returns_5","title":"Returns","text":"<p><code>CanvasSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_4","title":"Inherited from","text":"<p>ImageSource.setCoordinates</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_5","title":"Defined in","text":"<p>src/source/image_source.ts:210</p>"},{"location":"API/classes/maplibregl.CanvasSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>CanvasSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_5","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.CanvasSource/#returns_6","title":"Returns","text":"<p><code>CanvasSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_5","title":"Inherited from","text":"<p>ImageSource.setEventedParent</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.CanvasSource/#updateimage","title":"updateImage","text":"<p>\u25b8 updateImage(<code>options</code>): <code>CanvasSource</code></p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#parameters_6","title":"Parameters","text":"Name Type Description <code>options</code> <code>UpdateImageOptions</code> The options object."},{"location":"API/classes/maplibregl.CanvasSource/#returns_7","title":"Returns","text":"<p><code>CanvasSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#inherited-from_6","title":"Inherited from","text":"<p>ImageSource.updateImage</p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_7","title":"Defined in","text":"<p>src/source/image_source.ts:167</p>"},{"location":"API/classes/maplibregl.CanvasSource/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.CanvasSource/#pause","title":"pause","text":"<p>\u2022 pause: () =&gt; <code>void</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (): <code>void</code></p> <p>Disables animation. The map will display a static copy of the canvas image.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_8","title":"Defined in","text":"<p>src/source/canvas_source.ts:81</p>"},{"location":"API/classes/maplibregl.CanvasSource/#play","title":"play","text":"<p>\u2022 play: () =&gt; <code>void</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#type-declaration_1","title":"Type declaration","text":"<p>\u25b8 (): <code>void</code></p> <p>Enables animation. The image will be copied from the canvas to the map on each frame.</p>"},{"location":"API/classes/maplibregl.CanvasSource/#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.CanvasSource/#defined-in_9","title":"Defined in","text":"<p>src/source/canvas_source.ts:77</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/","title":"Class: CircleStyleLayer","text":"<p>maplibregl.CircleStyleLayer</p> <p>A style layer that defines a circle</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StyleLayer</code></li> </ul> <p>\u21b3 <code>CircleStyleLayer</code></p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.CircleStyleLayer/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.CircleStyleLayer/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#inherited-from","title":"Inherited from","text":"<p>StyleLayer.listens</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>CircleStyleLayer</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.CircleStyleLayer/#returns_1","title":"Returns","text":"<p><code>CircleStyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#inherited-from_1","title":"Inherited from","text":"<p>StyleLayer.off</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>CircleStyleLayer</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.CircleStyleLayer/#returns_2","title":"Returns","text":"<p><code>CircleStyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#inherited-from_2","title":"Inherited from","text":"<p>StyleLayer.on</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>CircleStyleLayer</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.CircleStyleLayer/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>CircleStyleLayer</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#inherited-from_3","title":"Inherited from","text":"<p>StyleLayer.once</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>CircleStyleLayer</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#returns_4","title":"Returns","text":"<p><code>CircleStyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#inherited-from_4","title":"Inherited from","text":"<p>StyleLayer.setEventedParent</p>"},{"location":"API/classes/maplibregl.CircleStyleLayer/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.ClickZoomHandler/","title":"Class: ClickZoomHandler","text":"<p>maplibregl.ClickZoomHandler</p> <p>The <code>ClickZoomHandler</code> allows the user to zoom the map at a point by double clicking It is used by other handlers</p>"},{"location":"API/classes/maplibregl.ClickZoomHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/maplibregl.Dispatcher/","title":"Class: Dispatcher","text":"<p>maplibregl.Dispatcher</p> <p>Responsible for sending messages from a Source to an associated WorkerSource.</p>"},{"location":"API/classes/maplibregl.Dispatcher/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Dispatcher/#broadcast","title":"broadcast","text":"<p>\u25b8 broadcast(<code>type</code>, <code>data</code>, <code>cb?</code>): <code>void</code></p> <p>Broadcast a message to all Workers.</p>"},{"location":"API/classes/maplibregl.Dispatcher/#parameters","title":"Parameters","text":"Name Type <code>type</code> <code>MessageType</code> <code>data</code> <code>unknown</code> <code>cb?</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>any</code>"},{"location":"API/classes/maplibregl.Dispatcher/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Dispatcher/#defined-in","title":"Defined in","text":"<p>src/util/dispatcher.ts:34</p>"},{"location":"API/classes/maplibregl.Dispatcher/#getactor","title":"getActor","text":"<p>\u25b8 getActor(): <code>Actor</code></p> <p>Acquires an actor to dispatch messages to. The actors are distributed in round-robin fashion.</p>"},{"location":"API/classes/maplibregl.Dispatcher/#returns_1","title":"Returns","text":"<p><code>Actor</code></p> <p>An actor object backed by a web worker for processing messages.</p>"},{"location":"API/classes/maplibregl.Dispatcher/#defined-in_1","title":"Defined in","text":"<p>src/util/dispatcher.ts:45</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/","title":"Class: DoubleClickZoomHandler","text":"<p>maplibregl.DoubleClickZoomHandler</p> <p>The <code>DoubleClickZoomHandler</code> allows the user to zoom the map at a point by double clicking or double tapping.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"double click to zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.doubleClickZoom.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:42</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#enable","title":"enable","text":"<p>\u25b8 enable(): <code>void</code></p> <p>Enables the \"double click to zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.doubleClickZoom.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:29</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"double click to zoom\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"double click to zoom\" interaction is active.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:61</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"double click to zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"double click to zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DoubleClickZoomHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/shim/dblclick_zoom.ts:52</p>"},{"location":"API/classes/maplibregl.DragPanHandler/","title":"Class: DragPanHandler","text":"<p>maplibregl.DragPanHandler</p> <p>The <code>DragPanHandler</code> allows the user to pan the map by clicking and dragging the cursor.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.DragPanHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"drag to pan\" interaction.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.dragPan.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:81</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"drag to pan\" interaction.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#parameters","title":"Parameters","text":"Name Type Description <code>options?</code> <code>boolean</code> | <code>DragPanOptions</code> Options object"},{"location":"API/classes/maplibregl.DragPanHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>  map.dragPan.enable();\n  map.dragPan.enable({\n     linearity: 0.3,\n     easing: bezier(0, 0, 0.3, 1),\n     maxSpeed: 1400,\n     deceleration: 2500,\n  });\n</code></pre>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:66</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pan\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pan\" interaction is active.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:101</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pan\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pan\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DragPanHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:92</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/","title":"Class: DragRotateHandler","text":"<p>maplibregl.DragRotateHandler</p> <p>The <code>DragRotateHandler</code> allows the user to rotate the map by clicking and dragging the cursor while holding the right mouse button or <code>ctrl</code> key.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.DragRotateHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"drag to rotate\" interaction.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.dragRotate.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:51</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#enable","title":"enable","text":"<p>\u25b8 enable(): <code>void</code></p> <p>Enables the \"drag to rotate\" interaction.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.dragRotate.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:38</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to rotate\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to rotate\" interaction is active.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:70</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to rotate\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to rotate\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.DragRotateHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/shim/drag_rotate.ts:61</p>"},{"location":"API/classes/maplibregl.EdgeInsets/","title":"Class: EdgeInsets","text":"<p>maplibregl.EdgeInsets</p> <p>An <code>EdgeInset</code> object represents screen space padding applied to the edges of the viewport. This shifts the apprent center or the vanishing point of the map. This is useful for adding floating UI elements on top of the map and having the vanishing point shift as UI elements resize.</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.EdgeInsets/#getcenter","title":"getCenter","text":"<p>\u25b8 getCenter(<code>width</code>, <code>height</code>): <code>Point</code></p> <p>Utility method that computes the new apprent center or vanishing point after applying insets. This is in pixels and with the top left being (0.0) and +y being downwards.</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#parameters","title":"Parameters","text":"Name Type Description <code>width</code> <code>number</code> the width <code>height</code> <code>number</code> the height"},{"location":"API/classes/maplibregl.EdgeInsets/#returns","title":"Returns","text":"<p><code>Point</code></p> <p>the point</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in","title":"Defined in","text":"<p>src/geo/edge_insets.ts:70</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#interpolate","title":"interpolate","text":"<p>\u25b8 interpolate(<code>start</code>, <code>target</code>, <code>t</code>): <code>EdgeInsets</code></p> <p>Interpolates the inset in-place. This maintains the current inset value for any inset not present in <code>target</code>.</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#parameters_1","title":"Parameters","text":"Name Type Description <code>start</code> <code>EdgeInsets</code> | <code>PaddingOptions</code> interpolation start <code>target</code> <code>PaddingOptions</code> interpolation target <code>t</code> <code>number</code> interpolation step/weight"},{"location":"API/classes/maplibregl.EdgeInsets/#returns_1","title":"Returns","text":"<p><code>EdgeInsets</code></p> <p>the insets</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in_1","title":"Defined in","text":"<p>src/geo/edge_insets.ts:53</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#tojson","title":"toJSON","text":"<p>\u25b8 toJSON(): <code>PaddingOptions</code></p> <p>Returns the current state as json, useful when you want to have a read-only representation of the inset.</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#returns_2","title":"Returns","text":"<p><code>PaddingOptions</code></p> <p>state as json</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in_2","title":"Defined in","text":"<p>src/geo/edge_insets.ts:95</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.EdgeInsets/#bottom","title":"bottom","text":"<p>\u2022 bottom: <code>number</code></p> <p><code>Default Value</code></p> <pre><code>0\n</code></pre>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in_3","title":"Defined in","text":"<p>src/geo/edge_insets.ts:20</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#left","title":"left","text":"<p>\u2022 left: <code>number</code></p> <p><code>Default Value</code></p> <pre><code>0\n</code></pre>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in_4","title":"Defined in","text":"<p>src/geo/edge_insets.ts:24</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#right","title":"right","text":"<p>\u2022 right: <code>number</code></p> <p><code>Default Value</code></p> <pre><code>0\n</code></pre>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in_5","title":"Defined in","text":"<p>src/geo/edge_insets.ts:28</p>"},{"location":"API/classes/maplibregl.EdgeInsets/#top","title":"top","text":"<p>\u2022 top: <code>number</code></p> <p><code>Default Value</code></p> <pre><code>0\n</code></pre>"},{"location":"API/classes/maplibregl.EdgeInsets/#defined-in_6","title":"Defined in","text":"<p>src/geo/edge_insets.ts:16</p>"},{"location":"API/classes/maplibregl.Event/","title":"Class: Event","text":"<p>maplibregl.Event</p> <p>The event class</p>"},{"location":"API/classes/maplibregl.Event/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Event</code></li> </ul> <p>\u21b3 <code>MapMouseEvent</code></p> <p>\u21b3 <code>MapTouchEvent</code></p> <p>\u21b3 <code>MapWheelEvent</code></p>"},{"location":"API/classes/maplibregl.Evented/","title":"Class: Evented","text":"<p>maplibregl.Evented</p> <p>Methods mixed in to other classes for event capabilities.</p>"},{"location":"API/classes/maplibregl.Evented/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>GeolocateControl</code></p> <p>\u21b3 <code>FullscreenControl</code></p> <p>\u21b3 <code>Popup</code></p> <p>\u21b3 <code>Marker</code></p> <p>\u21b3 <code>Style</code></p> <p>\u21b3 <code>GeoJSONSource</code></p> <p>\u21b3 <code>ImageSource</code></p> <p>\u21b3 <code>RasterTileSource</code></p> <p>\u21b3 <code>VectorTileSource</code></p> <p>\u21b3 <code>StyleLayer</code></p>"},{"location":"API/classes/maplibregl.Evented/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Evented/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Evented/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Evented/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.Evented/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Evented</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.Evented/#returns_1","title":"Returns","text":"<p><code>Evented</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Evented/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.Evented/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Evented</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.Evented/#returns_2","title":"Returns","text":"<p><code>Evented</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Evented/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.Evented/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Evented</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.Evented/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Evented</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.Evented/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.Evented/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Evented</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Evented/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Evented/#returns_4","title":"Returns","text":"<p><code>Evented</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Evented/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.FullscreenControl/","title":"Class: FullscreenControl","text":"<p>maplibregl.FullscreenControl</p> <p>A <code>FullscreenControl</code> control contains a button for toggling the map in and out of fullscreen mode. When requestFullscreen is not supported, fullscreen is handled via CSS properties. The map's <code>cooperativeGestures</code> option is temporarily disabled while the map is in fullscreen mode, and is restored when the map exist fullscreen mode.</p> <p><code>Param</code></p> <p>the full screen control options</p> <p><code>Example</code></p> <pre><code>map.addControl(new maplibregl.FullscreenControl({container: document.querySelector('body')}));\n</code></pre> <p><code>See</code></p> <p>View a fullscreen map</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#events","title":"Events","text":"<p><code>fullscreenstart</code> - Fired when fullscreen mode has started</p> <p><code>fullscreenend</code> - Fired when fullscreen mode has ended</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>FullscreenControl</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.FullscreenControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.FullscreenControl/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.FullscreenControl/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>FullscreenControl</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.FullscreenControl/#returns_1","title":"Returns","text":"<p><code>FullscreenControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>FullscreenControl</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.FullscreenControl/#returns_2","title":"Returns","text":"<p><code>FullscreenControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>): <code>HTMLElement</code></p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map#addControl internally.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_3","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/maplibregl.FullscreenControl/#returns_3","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#implementation-of","title":"Implementation of","text":"<p>IControl.onAdd</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_3","title":"Defined in","text":"<p>src/ui/control/fullscreen_control.ts:73</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(): <code>void</code></p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map#removeControl internally.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#implementation-of_1","title":"Implementation of","text":"<p>IControl.onRemove</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_4","title":"Defined in","text":"<p>src/ui/control/fullscreen_control.ts:82</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>FullscreenControl</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.FullscreenControl/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>FullscreenControl</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>FullscreenControl</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#parameters_5","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.FullscreenControl/#returns_6","title":"Returns","text":"<p><code>FullscreenControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.FullscreenControl/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.FullscreenControl/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.GeoJSONFeature/","title":"Class: GeoJSONFeature","text":"<p>maplibregl.GeoJSONFeature</p> <p>A geojson feature</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/","title":"Class: GeoJSONSource","text":"<p>maplibregl.GeoJSONSource</p> <p>A source containing GeoJSON. (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>map.addSource('some id', {\n    type: 'geojson',\n    data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.addSource('some id', {\n   type: 'geojson',\n   data: {\n       \"type\": \"FeatureCollection\",\n       \"features\": [{\n           \"type\": \"Feature\",\n           \"properties\": {},\n           \"geometry\": {\n               \"type\": \"Point\",\n               \"coordinates\": [\n                   -76.53063297271729,\n                   39.18174077994108\n               ]\n           }\n       }]\n   }\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.getSource('some id').setData({\n  \"type\": \"FeatureCollection\",\n  \"features\": [{\n      \"type\": \"Feature\",\n      \"properties\": { \"name\": \"Null Island\" },\n      \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [ 0, 0 ]\n      }\n  }]\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Draw GeoJSON points</li> <li>Add a GeoJSON line</li> <li>Create a heatmap from points</li> <li>Create and style clusters</li> </ul>"},{"location":"API/classes/maplibregl.GeoJSONSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>GeoJSONSource</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/maplibregl.GeoJSONSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.GeoJSONSource/#_updateworkerdata","title":"_updateWorkerData","text":"<p>\u25b8 _updateWorkerData(<code>diff?</code>): <code>void</code></p> <p>Responsible for invoking WorkerSource's geojson.loadData target, which handles loading the geojson data and preparing to serve it up as tiles, using geojson-vt or supercluster as appropriate.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters","title":"Parameters","text":"Name Type Description <code>diff?</code> <code>GeoJSONSourceDiff</code> the diff object"},{"location":"API/classes/maplibregl.GeoJSONSource/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in","title":"Defined in","text":"<p>src/source/geojson_source.ts:337</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#getclusterchildren","title":"getClusterChildren","text":"<p>\u25b8 getClusterChildren(<code>clusterId</code>, <code>callback</code>): <code>GeoJSONSource</code></p> <p>For clustered sources, fetches the children of the given cluster on the next zoom level (as an array of GeoJSON features).</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property. <code>callback</code> <code>Callback</code>\\&lt;<code>Feature</code>\\&lt;<code>Geometry</code>, { <code>[name: string]</code>: <code>any</code>;  }&gt;[]&gt; A callback to be called when the features are retrieved (<code>(error, features) =&gt; { ... }</code>)."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_1","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_1","title":"Defined in","text":"<p>src/source/geojson_source.ts:289</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#getclusterexpansionzoom","title":"getClusterExpansionZoom","text":"<p>\u25b8 getClusterExpansionZoom(<code>clusterId</code>, <code>callback</code>): <code>GeoJSONSource</code></p> <p>For clustered sources, fetches the zoom at which the given cluster expands.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property. <code>callback</code> <code>Callback</code>\\&lt;<code>number</code>&gt; A callback to be called when the zoom value is retrieved (<code>(error, zoom) =&gt; { ... }</code>)."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_2","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_2","title":"Defined in","text":"<p>src/source/geojson_source.ts:277</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#getclusterleaves","title":"getClusterLeaves","text":"<p>\u25b8 getClusterLeaves(<code>clusterId</code>, <code>limit</code>, <code>offset</code>, <code>callback</code>): <code>GeoJSONSource</code></p> <p>For clustered sources, fetches the original points that belong to the cluster (as an array of GeoJSON features).</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property. <code>limit</code> <code>number</code> The maximum number of features to return. <code>offset</code> <code>number</code> The number of features to skip (e.g. for pagination). <code>callback</code> <code>Callback</code>\\&lt;<code>Feature</code>\\&lt;<code>Geometry</code>, { <code>[name: string]</code>: <code>any</code>;  }&gt;[]&gt; A callback to be called when the features are retrieved (<code>(error, features) =&gt; { ... }</code>)."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_3","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Retrieve cluster leaves on click <pre><code>map.on('click', 'clusters', function(e) {\n  let features = map.queryRenderedFeatures(e.point, {\n    layers: ['clusters']\n  });\n\n  let clusterId = features[0].properties.cluster_id;\n  let pointCount = features[0].properties.point_count;\n  let clusterSource = map.getSource('clusters');\n\n  clusterSource.getClusterLeaves(clusterId, pointCount, 0, function(error, features) {\n    // Print cluster leaves in the console\n    console.log('Cluster leaves:', error, features);\n  })\n});\n</code></pre></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_3","title":"Defined in","text":"<p>src/source/geojson_source.ts:321</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>GeoJSONSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_5","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>GeoJSONSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_6","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_6","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>GeoJSONSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_7","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_7","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>GeoJSONSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_7","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#setclusteroptions","title":"setClusterOptions","text":"<p>\u25b8 setClusterOptions(<code>options</code>): <code>GeoJSONSource</code></p> <p>To disable/enable clustering on the source options</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_8","title":"Parameters","text":"Name Type Description <code>options</code> <code>SetClusterOptions</code> The options to set"},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_8","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.getSource('some id').setClusterOptions({cluster: false});\nmap.getSource('some id').setClusterOptions({cluster: false, clusterRadius: 50, clusterMaxZoom: 14});\n</code></pre>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_8","title":"Defined in","text":"<p>src/source/geojson_source.ts:260</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#setdata","title":"setData","text":"<p>\u25b8 setData(<code>data</code>): <code>GeoJSONSource</code></p> <p>Sets the GeoJSON data and re-renders the map.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_9","title":"Parameters","text":"Name Type Description <code>data</code> <code>string</code> | <code>GeoJSON</code> A GeoJSON data object or a URL to one. The latter is preferable in the case of large GeoJSON files."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_9","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_9","title":"Defined in","text":"<p>src/source/geojson_source.ts:222</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>GeoJSONSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_10","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_10","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_10","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#updatedata","title":"updateData","text":"<p>\u25b8 updateData(<code>diff</code>): <code>GeoJSONSource</code></p> <p>Updates the source's GeoJSON, and re-renders the map.</p> <p>For sources with lots of features, this method can be used to make updates more quickly.</p> <p>This approach requires unique IDs for every feature in the source. The IDs can either be specified on the feature, or by using the promoteId option to specify which property should be used as the ID.</p> <p>It is an error to call updateData on a source that did not have unique IDs for each of its features already.</p> <p>Updates are applied on a best-effort basis, updating an ID that does not exist will not result in an error.</p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#parameters_11","title":"Parameters","text":"Name Type Description <code>diff</code> <code>GeoJSONSourceDiff</code> The changes that need to be applied."},{"location":"API/classes/maplibregl.GeoJSONSource/#returns_11","title":"Returns","text":"<p><code>GeoJSONSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeoJSONSource/#defined-in_11","title":"Defined in","text":"<p>src/source/geojson_source.ts:244</p>"},{"location":"API/classes/maplibregl.GeolocateControl/","title":"Class: GeolocateControl","text":"<p>maplibregl.GeolocateControl</p> <p>A <code>GeolocateControl</code> control provides a button that uses the browser's geolocation API to locate the user on the map.</p> <p>Not all browsers support geolocation, and some users may disable the feature. Geolocation support for modern browsers including Chrome requires sites to be served over HTTPS. If geolocation support is not available, the GeolocateControl will show as disabled.</p> <p>The zoom level applied will depend on the accuracy of the geolocation provided by the device.</p> <p>The GeolocateControl has two modes. If <code>trackUserLocation</code> is <code>false</code> (default) the control acts as a button, which when pressed will set the map's camera to target the user location. If the user moves, the map won't update. This is most suited for the desktop. If <code>trackUserLocation</code> is <code>true</code> the control acts as a toggle button that when active the user's location is actively monitored for changes. In this mode the GeolocateControl has three interaction states: * active - the map's camera automatically updates as the user's location changes, keeping the location dot in the center. Initial state and upon clicking the <code>GeolocateControl</code> button. * passive - the user's location dot automatically updates, but the map's camera does not. Occurs upon the user initiating a map movement. * disabled - occurs if Geolocation is not available, disabled or denied.</p> <p>These interaction states can't be controlled programmatically, rather they are set based on user interactions.</p> <p><code>Example</code></p> <pre><code>map.addControl(new maplibregl.GeolocateControl({\n    positionOptions: {\n        enableHighAccuracy: true\n    },\n    trackUserLocation: true\n}));\n</code></pre> <p><code>See</code></p> <p>Locate the user</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#events","title":"Events","text":"<p><code>trackuserlocationend</code> - Fired when the Geolocate Control changes to the background state, which happens when a user changes the camera during an active position lock. This only applies when trackUserLocation is true. In the background state, the dot on the map will update with location updates but the camera will not.</p> <p><code>trackuserlocationstart</code> - Fired when the Geolocate Control changes to the active lock state, which happens either upon first obtaining a successful Geolocation API position for the user (a geolocate event will follow), or the user clicks the geolocate button when in the background state which uses the last known position to recenter the map and enter active lock state (no geolocate event will follow unless the users's location changes).</p> <p><code>geolocate</code> - Fired on each Geolocation API position update which returned as success. <code>data</code> - The returned Position object from the callback in Geolocation.getCurrentPosition() or Geolocation.watchPosition().</p> <p><code>error</code> - Fired on each Geolocation API position update which returned as an error. <code>data</code> - The returned PositionError object from the callback in Geolocation.getCurrentPosition() or Geolocation.watchPosition().</p> <p><code>outofmaxbounds</code> Fired on each Geolocation API position update which returned as success but user position is out of map maxBounds. <code>data</code> - The returned Position object from the callback in Geolocation.getCurrentPosition() or Geolocation.watchPosition().</p> <p><code>Example</code></p> <pre><code>// Initialize the geolocate control.\nlet geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a trackuserlocationend event occurs.\ngeolocate.on('trackuserlocationend', function() {\n  console.log('A trackuserlocationend event has occurred.')\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// Initialize the geolocate control.\nlet geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a trackuserlocationstart event occurs.\ngeolocate.on('trackuserlocationstart', function() {\n  console.log('A trackuserlocationstart event has occurred.')\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// Initialize the geolocate control.\nlet geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a geolocate event occurs.\ngeolocate.on('geolocate', function() {\n  console.log('A geolocate event has occurred.')\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// Initialize the geolocate control.\nlet geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an error event occurs.\ngeolocate.on('error', function() {\n  console.log('An error event has occurred.')\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// Initialize the geolocate control.\nlet geolocate = new maplibregl.GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an outofmaxbounds event occurs.\ngeolocate.on('outofmaxbounds', function() {\n  console.log('An outofmaxbounds event has occurred.')\n});\n</code></pre>"},{"location":"API/classes/maplibregl.GeolocateControl/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>GeolocateControl</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.GeolocateControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.GeolocateControl/#_isoutofmapmaxbounds","title":"_isOutOfMapMaxBounds","text":"<p>\u25b8 _isOutOfMapMaxBounds(<code>position</code>): <code>boolean</code></p> <p>Check if the Geolocation API Position is outside the map's maxbounds.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters","title":"Parameters","text":"Name Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/maplibregl.GeolocateControl/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if position is outside the map's maxbounds, otherwise returns <code>false</code>.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:270</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#_onsuccess","title":"_onSuccess","text":"<p>\u25b8 _onSuccess(<code>position</code>): <code>void</code></p> <p>When the Geolocation API returns a new location, update the GeolocateControl.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_1","title":"Parameters","text":"Name Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_1","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:315</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#_updatecamera","title":"_updateCamera","text":"<p>\u25b8 _updateCamera(<code>position</code>): <code>void</code></p> <p>Update the camera location to center on the current position</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_2","title":"Parameters","text":"Name Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_2","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:382</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#_updatemarker","title":"_updateMarker","text":"<p>\u25b8 _updateMarker(<code>position?</code>): <code>void</code></p> <p>Update the user location dot Marker to the current position</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_3","title":"Parameters","text":"Name Type Description <code>position?</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_3","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:399</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>GeolocateControl</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.GeolocateControl/#returns_5","title":"Returns","text":"<p><code>GeolocateControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>GeolocateControl</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_6","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.GeolocateControl/#returns_6","title":"Returns","text":"<p><code>GeolocateControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>): <code>HTMLElement</code></p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map#addControl internally.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_7","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_7","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#implementation-of","title":"Implementation of","text":"<p>IControl.onAdd</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_7","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:234</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(): <code>void</code></p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map#removeControl internally.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#implementation-of_1","title":"Implementation of","text":"<p>IControl.onRemove</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_8","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:242</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>GeolocateControl</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_8","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.GeolocateControl/#returns_9","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>GeolocateControl</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_9","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>GeolocateControl</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#parameters_9","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_10","title":"Returns","text":"<p><code>GeolocateControl</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.GeolocateControl/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_10","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#trigger","title":"trigger","text":"<p>\u25b8 trigger(): <code>boolean</code></p> <p>Programmatically request and move the map to the user's location.</p>"},{"location":"API/classes/maplibregl.GeolocateControl/#returns_11","title":"Returns","text":"<p><code>boolean</code></p> <p><code>false</code> if called before control was added to a map, otherwise returns <code>true</code>.</p> <p><code>Example</code></p> <pre><code>// Initialize the geolocate control.\nlet geolocate = new maplibregl.GeolocateControl({\n positionOptions: {\n   enableHighAccuracy: true\n },\n trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\nmap.on('load', function() {\n  geolocate.trigger();\n});\n</code></pre>"},{"location":"API/classes/maplibregl.GeolocateControl/#defined-in_11","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:563</p>"},{"location":"API/classes/maplibregl.Hash/","title":"Class: Hash","text":"<p>maplibregl.Hash</p> <p>Adds the map's position to its page's location hash. Passed as an option to the map object.</p>"},{"location":"API/classes/maplibregl.Hash/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Hash/#addto","title":"addTo","text":"<p>\u25b8 addTo(<code>map</code>): <code>Hash</code></p> <p>Map element to listen for coordinate changes</p>"},{"location":"API/classes/maplibregl.Hash/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The map object"},{"location":"API/classes/maplibregl.Hash/#returns","title":"Returns","text":"<p><code>Hash</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Hash/#defined-in","title":"Defined in","text":"<p>src/ui/hash.ts:25</p>"},{"location":"API/classes/maplibregl.Hash/#remove","title":"remove","text":"<p>\u25b8 remove(): <code>Hash</code></p> <p>Removes hash</p>"},{"location":"API/classes/maplibregl.Hash/#returns_1","title":"Returns","text":"<p><code>Hash</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Hash/#defined-in_1","title":"Defined in","text":"<p>src/ui/hash.ts:37</p>"},{"location":"API/classes/maplibregl.Hash/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.Hash/#_updatehash","title":"_updateHash","text":"<p>\u2022 _updateHash: () =&gt; <code>Timeout</code></p>"},{"location":"API/classes/maplibregl.Hash/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (): <code>Timeout</code></p> <p>Mobile Safari doesn't allow updating the hash more than 100 times per 30 seconds.</p>"},{"location":"API/classes/maplibregl.Hash/#returns_2","title":"Returns","text":"<p><code>Timeout</code></p>"},{"location":"API/classes/maplibregl.Hash/#defined-in_2","title":"Defined in","text":"<p>src/ui/hash.ts:136</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/","title":"Class: HeatmapStyleLayer","text":"<p>maplibregl.HeatmapStyleLayer</p> <p>A style layer that defines a heatmap</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>StyleLayer</code></li> </ul> <p>\u21b3 <code>HeatmapStyleLayer</code></p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#inherited-from","title":"Inherited from","text":"<p>StyleLayer.listens</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>HeatmapStyleLayer</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#returns_1","title":"Returns","text":"<p><code>HeatmapStyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#inherited-from_1","title":"Inherited from","text":"<p>StyleLayer.off</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>HeatmapStyleLayer</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#returns_2","title":"Returns","text":"<p><code>HeatmapStyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#inherited-from_2","title":"Inherited from","text":"<p>StyleLayer.on</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>HeatmapStyleLayer</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>HeatmapStyleLayer</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#inherited-from_3","title":"Inherited from","text":"<p>StyleLayer.once</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>HeatmapStyleLayer</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#returns_4","title":"Returns","text":"<p><code>HeatmapStyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#inherited-from_4","title":"Inherited from","text":"<p>StyleLayer.setEventedParent</p>"},{"location":"API/classes/maplibregl.HeatmapStyleLayer/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.ImageSource/","title":"Class: ImageSource","text":"<p>maplibregl.ImageSource</p> <p>A data source containing an image. (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>// add to map\nmap.addSource('some id', {\n   type: 'image',\n   url: 'https://www.maplibre.org/images/foo.png',\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update coordinates\nlet mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\n// update url and coordinates simultaneously\nmySource.updateImage({\n   url: 'https://www.maplibre.org/images/bar.png',\n   coordinates: [\n       [-76.54335737228394, 39.18579907229748],\n       [-76.52803659439087, 39.1838364847587],\n       [-76.5295386314392, 39.17683392507606],\n       [-76.54520273208618, 39.17876344106642]\n   ]\n})\n\nmap.removeSource('some id');  // remove\n</code></pre>"},{"location":"API/classes/maplibregl.ImageSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>ImageSource</code></p> <p>\u21b3\u21b3 <code>CanvasSource</code></p> <p>\u21b3\u21b3 <code>VideoSource</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/maplibregl.ImageSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.ImageSource/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.ImageSource/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.ImageSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>ImageSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.ImageSource/#returns_1","title":"Returns","text":"<p><code>ImageSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.ImageSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>ImageSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.ImageSource/#returns_2","title":"Returns","text":"<p><code>ImageSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.ImageSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>ImageSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.ImageSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>ImageSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.ImageSource/#setcoordinates","title":"setCoordinates","text":"<p>\u25b8 setCoordinates(<code>coordinates</code>): <code>ImageSource</code></p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_4","title":"Parameters","text":"Name Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/maplibregl.ImageSource/#returns_4","title":"Returns","text":"<p><code>ImageSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_4","title":"Defined in","text":"<p>src/source/image_source.ts:210</p>"},{"location":"API/classes/maplibregl.ImageSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>ImageSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_5","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.ImageSource/#returns_5","title":"Returns","text":"<p><code>ImageSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_5","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.ImageSource/#updateimage","title":"updateImage","text":"<p>\u25b8 updateImage(<code>options</code>): <code>ImageSource</code></p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/maplibregl.ImageSource/#parameters_6","title":"Parameters","text":"Name Type Description <code>options</code> <code>UpdateImageOptions</code> The options object."},{"location":"API/classes/maplibregl.ImageSource/#returns_6","title":"Returns","text":"<p><code>ImageSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.ImageSource/#defined-in_6","title":"Defined in","text":"<p>src/source/image_source.ts:167</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/","title":"Class: KeyboardHandler","text":"<p>maplibregl.KeyboardHandler</p> <p>The <code>KeyboardHandler</code> allows the user to zoom, rotate, and pan the map using the following keyboard shortcuts:</p> <ul> <li><code>=</code> / <code>+</code>: Increase the zoom level by 1.</li> <li><code>Shift-=</code> / <code>Shift-+</code>: Increase the zoom level by 2.</li> <li><code>-</code>: Decrease the zoom level by 1.</li> <li><code>Shift--</code>: Decrease the zoom level by 2.</li> <li>Arrow keys: Pan by 100 pixels.</li> <li><code>Shift+\u21e2</code>: Increase the rotation by 15 degrees.</li> <li><code>Shift+\u21e0</code>: Decrease the rotation by 15 degrees.</li> <li><code>Shift+\u21e1</code>: Increase the pitch by 10 degrees.</li> <li><code>Shift+\u21e3</code>: Decrease the pitch by 10 degrees.</li> </ul>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/maplibregl.KeyboardHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.KeyboardHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"keyboard rotate and zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.keyboard.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implementation-of","title":"Implementation of","text":"<p>Handler.disable</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:156</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#disablerotation","title":"disableRotation","text":"<p>\u25b8 disableRotation(): <code>void</code></p> <p>Disables the \"keyboard pan/rotate\" interaction, leaving the \"keyboard zoom\" interaction enabled.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.keyboard.disableRotation();\n</code></pre>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:192</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#enable","title":"enable","text":"<p>\u25b8 enable(): <code>void</code></p> <p>Enables the \"keyboard rotate and zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_2","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.keyboard.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implementation-of_1","title":"Implementation of","text":"<p>Handler.enable</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:144</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#enablerotation","title":"enableRotation","text":"<p>\u25b8 enableRotation(): <code>void</code></p> <p>Enables the \"keyboard pan/rotate\" interaction.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_3","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.keyboard.enable();\nmap.keyboard.enableRotation();\n</code></pre>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:205</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implementation-of_2","title":"Implementation of","text":"<p>Handler.isActive</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:179</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"keyboard rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"keyboard rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#implementation-of_3","title":"Implementation of","text":"<p>Handler.isEnabled</p>"},{"location":"API/classes/maplibregl.KeyboardHandler/#defined-in_5","title":"Defined in","text":"<p>src/ui/handler/keyboard.ts:168</p>"},{"location":"API/classes/maplibregl.Layout/","title":"Class: Layout\\&lt;Props&gt;","text":"<p>maplibregl.Layout</p> <p>Because layout properties are not transitionable, they have a simpler representation and evaluation chain than paint properties: <code>PropertyValue</code>s are possibly evaluated, producing possibly evaluated values, which are then fully evaluated.</p> <p><code>Layout</code> stores a map of all (property name, <code>PropertyValue</code>) pairs for layout properties of a given layer type. It can calculate the possibly-evaluated values for all of them at once, producing a <code>PossiblyEvaluated</code> instance for the same set of properties.</p>"},{"location":"API/classes/maplibregl.Layout/#type-parameters","title":"Type parameters","text":"Name <code>Props</code>"},{"location":"API/classes/maplibregl.LngLat/","title":"Class: LngLat","text":"<p>maplibregl.LngLat</p> <p>A <code>LngLat</code> object represents a given longitude and latitude coordinate, measured in degrees. These coordinates are based on the WGS84 (EPSG:4326) standard.</p> <p>MapLibre GL JS uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match the GeoJSON specification.</p> <p>Note that any MapLibre GL JS method that accepts a <code>LngLat</code> object as an argument or option can also accept an <code>Array</code> of two numbers and will perform an implicit conversion. This flexible type is documented as LngLatLike.</p> <p><code>Example</code></p> <pre><code>let ll = new maplibregl.LngLat(-123.9749, 40.7736);\nll.lng; // = -123.9749\n</code></pre> <p><code>See</code></p> <ul> <li>Get coordinates of the mouse pointer</li> <li>Display a popup</li> <li>Create a timeline animation</li> </ul>"},{"location":"API/classes/maplibregl.LngLat/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.LngLat/#constructor","title":"constructor","text":"<p>\u2022 new LngLat(<code>lng</code>, <code>lat</code>): <code>LngLat</code></p>"},{"location":"API/classes/maplibregl.LngLat/#parameters","title":"Parameters","text":"Name Type Description <code>lng</code> <code>number</code> Longitude, measured in degrees. <code>lat</code> <code>number</code> Latitude, measured in degrees."},{"location":"API/classes/maplibregl.LngLat/#returns","title":"Returns","text":"<p><code>LngLat</code></p>"},{"location":"API/classes/maplibregl.LngLat/#defined-in","title":"Defined in","text":"<p>src/geo/lng_lat.ts:61</p>"},{"location":"API/classes/maplibregl.LngLat/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.LngLat/#distanceto","title":"distanceTo","text":"<p>\u25b8 distanceTo(<code>lngLat</code>): <code>number</code></p> <p>Returns the approximate distance between a pair of coordinates in meters Uses the Haversine Formula (from R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159)</p>"},{"location":"API/classes/maplibregl.LngLat/#parameters_1","title":"Parameters","text":"Name Type Description <code>lngLat</code> <code>LngLat</code> coordinates to compute the distance to"},{"location":"API/classes/maplibregl.LngLat/#returns_1","title":"Returns","text":"<p><code>number</code></p> <p>Distance in meters between the two coordinates.</p> <p><code>Example</code></p> <pre><code>let new_york = new maplibregl.LngLat(-74.0060, 40.7128);\nlet los_angeles = new maplibregl.LngLat(-118.2437, 34.0522);\nnew_york.distanceTo(los_angeles); // = 3935751.690893987, \"true distance\" using a non-spherical approximation is ~3966km\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_1","title":"Defined in","text":"<p>src/geo/lng_lat.ts:128</p>"},{"location":"API/classes/maplibregl.LngLat/#toarray","title":"toArray","text":"<p>\u25b8 toArray(): [<code>number</code>, <code>number</code>]</p> <p>Returns the coordinates represented as an array of two numbers.</p>"},{"location":"API/classes/maplibregl.LngLat/#returns_2","title":"Returns","text":"<p>[<code>number</code>, <code>number</code>]</p> <p>The coordinates represented as an array of longitude and latitude.</p> <p><code>Example</code></p> <pre><code>let ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toArray(); // = [-73.9749, 40.7736]\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_2","title":"Defined in","text":"<p>src/geo/lng_lat.ts:97</p>"},{"location":"API/classes/maplibregl.LngLat/#tostring","title":"toString","text":"<p>\u25b8 toString(): <code>string</code></p> <p>Returns the coordinates represent as a string.</p>"},{"location":"API/classes/maplibregl.LngLat/#returns_3","title":"Returns","text":"<p><code>string</code></p> <p>The coordinates represented as a string of the format <code>'LngLat(lng, lat)'</code>.</p> <p><code>Example</code></p> <pre><code>let ll = new maplibregl.LngLat(-73.9749, 40.7736);\nll.toString(); // = \"LngLat(-73.9749, 40.7736)\"\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_3","title":"Defined in","text":"<p>src/geo/lng_lat.ts:111</p>"},{"location":"API/classes/maplibregl.LngLat/#wrap","title":"wrap","text":"<p>\u25b8 wrap(): <code>LngLat</code></p> <p>Returns a new <code>LngLat</code> object whose longitude is wrapped to the range (-180, 180).</p>"},{"location":"API/classes/maplibregl.LngLat/#returns_4","title":"Returns","text":"<p><code>LngLat</code></p> <p>The wrapped <code>LngLat</code> object.</p> <p><code>Example</code></p> <pre><code>let ll = new maplibregl.LngLat(286.0251, 40.7736);\nlet wrapped = ll.wrap();\nwrapped.lng; // = -73.9749\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_4","title":"Defined in","text":"<p>src/geo/lng_lat.ts:83</p>"},{"location":"API/classes/maplibregl.LngLat/#convert","title":"convert","text":"<p>\u25b8 convert(<code>input</code>): <code>LngLat</code></p> <p>Converts an array of two numbers or an object with <code>lng</code> and <code>lat</code> or <code>lon</code> and <code>lat</code> properties to a <code>LngLat</code> object.</p> <p>If a <code>LngLat</code> object is passed in, the function returns it unchanged.</p>"},{"location":"API/classes/maplibregl.LngLat/#parameters_2","title":"Parameters","text":"Name Type Description <code>input</code> <code>LngLatLike</code> An array of two numbers or object to convert, or a <code>LngLat</code> object to return."},{"location":"API/classes/maplibregl.LngLat/#returns_5","title":"Returns","text":"<p><code>LngLat</code></p> <p>A new <code>LngLat</code> object, if a conversion occurred, or the original <code>LngLat</code> object.</p> <p><code>Example</code></p> <pre><code>let arr = [-73.9749, 40.7736];\nlet ll = maplibregl.LngLat.convert(arr);\nll;   // = LngLat {lng: -73.9749, lat: 40.7736}\n</code></pre>"},{"location":"API/classes/maplibregl.LngLat/#defined-in_5","title":"Defined in","text":"<p>src/geo/lng_lat.ts:153</p>"},{"location":"API/classes/maplibregl.LngLatBounds/","title":"Class: LngLatBounds","text":"<p>maplibregl.LngLatBounds</p> <p>A <code>LngLatBounds</code> object represents a geographical bounding box, defined by its southwest and northeast points in longitude and latitude.</p> <p>If no arguments are provided to the constructor, a <code>null</code> bounding box is created.</p> <p>Note that any Mapbox GL method that accepts a <code>LngLatBounds</code> object as an argument or option can also accept an <code>Array</code> of two LngLatLike constructs and will perform an implicit conversion. This flexible type is documented as LngLatBoundsLike.</p> <p><code>Example</code></p> <pre><code>let sw = new maplibregl.LngLat(-73.9876, 40.7661);\nlet ne = new maplibregl.LngLat(-73.9397, 40.8002);\nlet llb = new maplibregl.LngLatBounds(sw, ne);\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.LngLatBounds/#constructor","title":"constructor","text":"<p>\u2022 new LngLatBounds(<code>sw?</code>, <code>ne?</code>): <code>LngLatBounds</code></p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters","title":"Parameters","text":"Name Type Description <code>sw?</code> [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>] | <code>LngLatLike</code> | [<code>LngLatLike</code>, <code>LngLatLike</code>] The southwest corner of the bounding box. OR array of 4 numbers in the order of west, south, east, north OR array of 2 LngLatLike: [sw,ne] <code>ne?</code> <code>LngLatLike</code> The northeast corner of the bounding box."},{"location":"API/classes/maplibregl.LngLatBounds/#returns","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p><code>Example</code></p> <p><pre><code>let sw = new maplibregl.LngLat(-73.9876, 40.7661);\nlet ne = new maplibregl.LngLat(-73.9397, 40.8002);\nlet llb = new maplibregl.LngLatBounds(sw, ne);\n</code></pre> OR <pre><code>let llb = new maplibregl.LngLatBounds([-73.9876, 40.7661, -73.9397, 40.8002]);\n</code></pre> OR <pre><code>let llb = new maplibregl.LngLatBounds([sw, ne]);\n</code></pre></p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:65</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.LngLatBounds/#contains","title":"contains","text":"<p>\u25b8 contains(<code>lnglat</code>): <code>boolean</code></p> <p>Check if the point is within the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_1","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> geographic point to check against."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the point is within the bounding box.</p> <p><code>Example</code></p> <pre><code>let llb = new maplibregl.LngLatBounds(\n  new maplibregl.LngLat(-73.9876, 40.7661),\n  new maplibregl.LngLat(-73.9397, 40.8002)\n);\n\nlet ll = new maplibregl.LngLat(-73.9567, 40.7789);\n\nconsole.log(llb.contains(ll)); // = true\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_1","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:280</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#extend","title":"extend","text":"<p>\u25b8 extend(<code>obj</code>): <code>LngLatBounds</code></p> <p>Extend the bounds to include a given LngLatLike or LngLatBoundsLike.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_2","title":"Parameters","text":"Name Type Description <code>obj</code> <code>LngLatLike</code> | <code>LngLatBoundsLike</code> object to extend to"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_2","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_2","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:108</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getcenter","title":"getCenter","text":"<p>\u25b8 getCenter(): <code>LngLat</code></p> <p>Returns the geographical coordinate equidistant from the bounding box's corners.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_3","title":"Returns","text":"<p><code>LngLat</code></p> <p>The bounding box's center.</p> <p><code>Example</code></p> <pre><code>let llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_3","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:164</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#geteast","title":"getEast","text":"<p>\u25b8 getEast(): <code>number</code></p> <p>Returns the east edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_4","title":"Returns","text":"<p><code>number</code></p> <p>The east edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_4","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:215</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getnorth","title":"getNorth","text":"<p>\u25b8 getNorth(): <code>number</code></p> <p>Returns the north edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_5","title":"Returns","text":"<p><code>number</code></p> <p>The north edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_5","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:222</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getnortheast","title":"getNorthEast","text":"<p>\u25b8 getNorthEast(): <code>LngLat</code></p> <p>Returns the northeast corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_6","title":"Returns","text":"<p><code>LngLat</code></p> <p>The northeast corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_6","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:180</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getnorthwest","title":"getNorthWest","text":"<p>\u25b8 getNorthWest(): <code>LngLat</code></p> <p>Returns the northwest corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_7","title":"Returns","text":"<p><code>LngLat</code></p> <p>The northwest corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_7","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:187</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getsouth","title":"getSouth","text":"<p>\u25b8 getSouth(): <code>number</code></p> <p>Returns the south edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_8","title":"Returns","text":"<p><code>number</code></p> <p>The south edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_8","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:208</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getsoutheast","title":"getSouthEast","text":"<p>\u25b8 getSouthEast(): <code>LngLat</code></p> <p>Returns the southeast corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_9","title":"Returns","text":"<p><code>LngLat</code></p> <p>The southeast corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_9","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:194</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getsouthwest","title":"getSouthWest","text":"<p>\u25b8 getSouthWest(): <code>LngLat</code></p> <p>Returns the southwest corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_10","title":"Returns","text":"<p><code>LngLat</code></p> <p>The southwest corner of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_10","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:173</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#getwest","title":"getWest","text":"<p>\u25b8 getWest(): <code>number</code></p> <p>Returns the west edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_11","title":"Returns","text":"<p><code>number</code></p> <p>The west edge of the bounding box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_11","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:201</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#isempty","title":"isEmpty","text":"<p>\u25b8 isEmpty(): <code>boolean</code></p> <p>Check if the bounding box is an empty/<code>null</code>-type box.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_12","title":"Returns","text":"<p><code>boolean</code></p> <p>True if bounds have been defined, otherwise false.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_12","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:259</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#setnortheast","title":"setNorthEast","text":"<p>\u25b8 setNorthEast(<code>ne</code>): <code>LngLatBounds</code></p> <p>Set the northeast corner of the bounding box</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_3","title":"Parameters","text":"Name Type Description <code>ne</code> <code>LngLatLike</code> a LngLatLike object describing the northeast corner of the bounding box."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_13","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_13","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:86</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#setsouthwest","title":"setSouthWest","text":"<p>\u25b8 setSouthWest(<code>sw</code>): <code>LngLatBounds</code></p> <p>Set the southwest corner of the bounding box</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_4","title":"Parameters","text":"Name Type Description <code>sw</code> <code>LngLatLike</code> a LngLatLike object describing the southwest corner of the bounding box."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_14","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_14","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:97</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#toarray","title":"toArray","text":"<p>\u25b8 toArray(): [<code>number</code>, <code>number</code>][]</p> <p>Returns the bounding box represented as an array.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_15","title":"Returns","text":"<p>[<code>number</code>, <code>number</code>][]</p> <p>The bounding box represented as an array, consisting of the southwest and northeast coordinates of the bounding represented as arrays of numbers.</p> <p><code>Example</code></p> <pre><code>let llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_15","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:235</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#tostring","title":"toString","text":"<p>\u25b8 toString(): <code>string</code></p> <p>Return the bounding box represented as a string.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#returns_16","title":"Returns","text":"<p><code>string</code></p> <p>The bounding box represents as a string of the format <code>'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'</code>.</p> <p><code>Example</code></p> <pre><code>let llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\"\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_16","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:250</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#convert","title":"convert","text":"<p>\u25b8 convert(<code>input</code>): <code>LngLatBounds</code></p> <p>Converts an array to a <code>LngLatBounds</code> object.</p> <p>If a <code>LngLatBounds</code> object is passed in, the function returns it unchanged.</p> <p>Internally, the function calls <code>LngLat#convert</code> to convert arrays to <code>LngLat</code> values.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_5","title":"Parameters","text":"Name Type Description <code>input</code> <code>LngLatBoundsLike</code> An array of two coordinates to convert, or a <code>LngLatBounds</code> object to return."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_17","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>A new <code>LngLatBounds</code> object, if a conversion occurred, or the original <code>LngLatBounds</code> object.</p> <p><code>Example</code></p> <pre><code>let arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\nlet llb = maplibregl.LngLatBounds.convert(arr); // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_17","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:307</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#fromlnglat","title":"fromLngLat","text":"<p>\u25b8 fromLngLat(<code>center</code>, <code>radius?</code>): <code>LngLatBounds</code></p> <p>Returns a <code>LngLatBounds</code> from the coordinates extended by a given <code>radius</code>. The returned <code>LngLatBounds</code> completely contains the <code>radius</code>.</p>"},{"location":"API/classes/maplibregl.LngLatBounds/#parameters_6","title":"Parameters","text":"Name Type Default value Description <code>center</code> <code>LngLat</code> <code>undefined</code> center coordinates of the new bounds. <code>radius</code> <code>number</code> <code>0</code> Distance in meters from the coordinates to extend the bounds."},{"location":"API/classes/maplibregl.LngLatBounds/#returns_18","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>A new <code>LngLatBounds</code> object representing the coordinates extended by the <code>radius</code>.</p> <p><code>Example</code></p> <pre><code>let center = new maplibregl.LngLat(-73.9749, 40.7736);\nmaplibregl.LngLatBounds.fromLngLat(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]\n</code></pre>"},{"location":"API/classes/maplibregl.LngLatBounds/#defined-in_18","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:325</p>"},{"location":"API/classes/maplibregl.LogoControl/","title":"Class: LogoControl","text":"<p>maplibregl.LogoControl</p> <p>A <code>LogoControl</code> is a control that adds the watermark.</p> <p><code>Example</code></p> <pre><code>map.addControl(new maplibregl.LogoControl({compact: false}));\n</code></pre>"},{"location":"API/classes/maplibregl.LogoControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.LogoControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.LogoControl/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>): <code>HTMLElement</code></p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map#addControl internally.</p>"},{"location":"API/classes/maplibregl.LogoControl/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/maplibregl.LogoControl/#returns","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/maplibregl.LogoControl/#implementation-of","title":"Implementation of","text":"<p>IControl.onAdd</p>"},{"location":"API/classes/maplibregl.LogoControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/logo_control.ts:42</p>"},{"location":"API/classes/maplibregl.LogoControl/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(): <code>void</code></p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map#removeControl internally.</p>"},{"location":"API/classes/maplibregl.LogoControl/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.LogoControl/#implementation-of_1","title":"Implementation of","text":"<p>IControl.onRemove</p>"},{"location":"API/classes/maplibregl.LogoControl/#defined-in_1","title":"Defined in","text":"<p>src/ui/control/logo_control.ts:62</p>"},{"location":"API/classes/maplibregl.Map/","title":"Class: Map","text":"<p>maplibregl.Map</p> <p>The <code>Map</code> object represents the map on your page. It exposes methods and properties that enable you to programmatically change the map, and fires events as users interact with it.</p> <p>You create a <code>Map</code> by specifying a <code>container</code> and other options, see MapOptions for the full list. Then MapLibre GL JS initializes the map on the page and returns your <code>Map</code> object.</p> <p><code>Example</code></p> <pre><code>let map = new maplibregl.Map({\n  container: 'map',\n  center: [-122.420679, 37.772537],\n  zoom: 13,\n  style: style_object,\n  hash: true,\n  transformRequest: (url, resourceType)=&gt; {\n    if(resourceType === 'Source' &amp;&amp; url.startsWith('http://myHost')) {\n      return {\n       url: url.replace('http', 'https'),\n       headers: { 'my-custom-header': true},\n       credentials: 'include'  // Include cookies for cross-origin requests\n     }\n    }\n  }\n});\n</code></pre> <p><code>See</code></p> <p>Display a map</p>"},{"location":"API/classes/maplibregl.Map/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Camera</code></li> </ul> <p>\u21b3 <code>Map</code></p>"},{"location":"API/classes/maplibregl.Map/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.Map/#repaint","title":"repaint","text":"<p>\u2022 <code>get</code> repaint(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map will continuously repaint. This information is useful for analyzing performance.</p>"},{"location":"API/classes/maplibregl.Map/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in","title":"Defined in","text":"<p>src/ui/map.ts:3407</p>"},{"location":"API/classes/maplibregl.Map/#showcollisionboxes","title":"showCollisionBoxes","text":"<p>\u2022 <code>get</code> showCollisionBoxes(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map will render boxes around all symbols in the data source, revealing which symbols were rendered or which were hidden due to collisions. This information is useful for debugging.</p>"},{"location":"API/classes/maplibregl.Map/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_1","title":"Defined in","text":"<p>src/ui/map.ts:3375</p>"},{"location":"API/classes/maplibregl.Map/#showoverdrawinspector","title":"showOverdrawInspector","text":"<p>\u2022 <code>get</code> showOverdrawInspector(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map should color-code each fragment to show how many times it has been shaded. White fragments have been shaded 8 or more times. Black fragments have been shaded 0 times. This information is useful for debugging.</p>"},{"location":"API/classes/maplibregl.Map/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_2","title":"Defined in","text":"<p>src/ui/map.ts:3396</p>"},{"location":"API/classes/maplibregl.Map/#showpadding","title":"showPadding","text":"<p>\u2022 <code>get</code> showPadding(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map will visualize the padding offsets.</p>"},{"location":"API/classes/maplibregl.Map/#returns_3","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_3","title":"Defined in","text":"<p>src/ui/map.ts:3362</p>"},{"location":"API/classes/maplibregl.Map/#showtileboundaries","title":"showTileBoundaries","text":"<p>\u2022 <code>get</code> showTileBoundaries(): <code>boolean</code></p> <p>Gets and sets a Boolean indicating whether the map will render an outline around each tile and the tile ID. These tile boundaries are useful for debugging.</p> <p>The uncompressed file size of the first vector source is drawn in the top left corner of each tile, next to the tile ID.</p>"},{"location":"API/classes/maplibregl.Map/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>Example</code></p> <pre><code>map.showTileBoundaries = true;\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_4","title":"Defined in","text":"<p>src/ui/map.ts:3351</p>"},{"location":"API/classes/maplibregl.Map/#version","title":"version","text":"<p>\u2022 <code>get</code> version(): <code>string</code></p> <p>Returns the package version of the library</p>"},{"location":"API/classes/maplibregl.Map/#returns_5","title":"Returns","text":"<p><code>string</code></p> <p>Package version of the library</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_5","title":"Defined in","text":"<p>src/ui/map.ts:3422</p>"},{"location":"API/classes/maplibregl.Map/#events","title":"Events","text":""},{"location":"API/classes/maplibregl.Map/#off","title":"off","text":"<p>\u25b8 off\\&lt;<code>T</code>&gt;(<code>type</code>, <code>layer</code>, <code>listener</code>): <code>Map</code></p> <p>Removes an event listener for events previously added with <code>Map#on</code>.</p>"},{"location":"API/classes/maplibregl.Map/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The event type previously used to install the listener. <code>layer</code> <code>string</code> The layer ID or listener previously used to install the listener. <code>listener</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function previously installed as a listener."},{"location":"API/classes/maplibregl.Map/#returns_6","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides","title":"Overrides","text":"<p>Camera.off</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_6","title":"Defined in","text":"<p>src/ui/map.ts:1515</p> <p>\u25b8 off\\&lt;<code>T</code>&gt;(<code>type</code>, <code>listener</code>): <code>Map</code></p> <p>Overload of the <code>off</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/maplibregl.Map/#type-parameters_1","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The type of the event. <code>listener</code> (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function previously installed as a listener."},{"location":"API/classes/maplibregl.Map/#returns_7","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides_1","title":"Overrides","text":"<p>Camera.off</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_7","title":"Defined in","text":"<p>src/ui/map.ts:1527</p> <p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Map</code></p> <p>Overload of the <code>off</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The type of the event. <code>listener</code> <code>Listener</code> The function previously installed as a listener."},{"location":"API/classes/maplibregl.Map/#returns_8","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides_2","title":"Overrides","text":"<p>Camera.off</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_8","title":"Defined in","text":"<p>src/ui/map.ts:1535</p>"},{"location":"API/classes/maplibregl.Map/#on","title":"on","text":"<p>\u25b8 on\\&lt;<code>T</code>&gt;(<code>type</code>, <code>layer</code>, <code>listener</code>): <code>Map</code></p> <p>Adds a listener for events of a specified type, optionally limited to features in a specified style layer. See MapEventType and MapLayerEventType for a full list of events and their description.</p> Event Compatible with <code>layerId</code> <code>mousedown</code> yes <code>mouseup</code> yes <code>mouseover</code> yes <code>mouseout</code> yes <code>mousemove</code> yes <code>mouseenter</code> yes (required) <code>mouseleave</code> yes (required) <code>click</code> yes <code>dblclick</code> yes <code>contextmenu</code> yes <code>touchstart</code> yes <code>touchend</code> yes <code>touchcancel</code> yes <code>wheel</code> <code>resize</code> <code>remove</code> <code>touchmove</code> <code>movestart</code> <code>move</code> <code>moveend</code> <code>dragstart</code> <code>drag</code> <code>dragend</code> <code>zoomstart</code> <code>zoom</code> <code>zoomend</code> <code>rotatestart</code> <code>rotate</code> <code>rotateend</code> <code>pitchstart</code> <code>pitch</code> <code>pitchend</code> <code>boxzoomstart</code> <code>boxzoomend</code> <code>boxzoomcancel</code> <code>webglcontextlost</code> <code>webglcontextrestored</code> <code>load</code> <code>render</code> <code>idle</code> <code>error</code> <code>data</code> <code>styledata</code> <code>sourcedata</code> <code>dataloading</code> <code>styledataloading</code> <code>sourcedataloading</code> <code>styleimagemissing</code> <code>dataabort</code> <code>sourcedataabort</code>"},{"location":"API/classes/maplibregl.Map/#type-parameters_2","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The event type to listen for. Events compatible with the optional <code>layerId</code> parameter are triggered when the cursor enters a visible portion of the specified layer from outside that layer or outside the map canvas. <code>layer</code> <code>string</code> The ID of a style layer or a listener if no ID is provided. Event will only be triggered if its location is within a visible feature in this layer. The event will have a <code>features</code> property containing an array of the matching features. If <code>layer</code> is not supplied, the event will not have a <code>features</code> property. Please note that many event types are not compatible with the optional <code>layer</code> parameter. <code>listener</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function to be called when the event is fired."},{"location":"API/classes/maplibregl.Map/#returns_9","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>// Set an event listener that will fire\n// when the map has finished loading\nmap.on('load', function() {\n  // Once the map has finished loading,\n  // add a new layer\n  map.addLayer({\n    id: 'points-of-interest',\n    source: {\n      type: 'vector',\n      url: 'https://maplibre.org/maplibre-style-spec/'\n    },\n    'source-layer': 'poi_label',\n    type: 'circle',\n    paint: {\n      // MapLibre Style Specification paint properties\n    },\n    layout: {\n      // MapLibre Style Specification layout properties\n    }\n  });\n});\n</code></pre> <p><code>Example</code></p> <pre><code>// Set an event listener that will fire\n// when a feature on the countries layer of the map is clicked\nmap.on('click', 'countries', (e) =&gt; {\n  new maplibregl.Popup()\n    .setLngLat(e.lngLat)\n    .setHTML(`Country name: ${e.features[0].properties.name}`)\n    .addTo(map);\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Display popup on click</li> <li>Center the map on a clicked symbol</li> <li>Create a hover effect</li> <li>Create a draggable marker</li> </ul>"},{"location":"API/classes/maplibregl.Map/#overrides_3","title":"Overrides","text":"<p>Camera.on</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_9","title":"Defined in","text":"<p>src/ui/map.ts:1415</p> <p>\u25b8 on\\&lt;<code>T</code>&gt;(<code>type</code>, <code>listener</code>): <code>Map</code></p> <p>Overload of the <code>on</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/maplibregl.Map/#type-parameters_3","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The type of the event. <code>listener</code> (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The listener callback."},{"location":"API/classes/maplibregl.Map/#returns_10","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides_4","title":"Overrides","text":"<p>Camera.on</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_10","title":"Defined in","text":"<p>src/ui/map.ts:1427</p> <p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Map</code></p> <p>Overload of the <code>on</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The type of the event. <code>listener</code> <code>Listener</code> The listener callback."},{"location":"API/classes/maplibregl.Map/#returns_11","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides_5","title":"Overrides","text":"<p>Camera.on</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_11","title":"Defined in","text":"<p>src/ui/map.ts:1435</p>"},{"location":"API/classes/maplibregl.Map/#once","title":"once","text":"<p>\u25b8 once\\&lt;<code>T</code>&gt;(<code>type</code>, <code>layer</code>, <code>listener?</code>): <code>Map</code> | <code>Promise</code>\\&lt;<code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>&gt;</p> <p>Adds a listener that will be called only once to a specified event type, optionally limited to features in a specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#type-parameters_4","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters_6","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The event type to listen for; one of <code>'mousedown'</code>, <code>'mouseup'</code>, <code>'click'</code>, <code>'dblclick'</code>, <code>'mousemove'</code>, <code>'mouseenter'</code>, <code>'mouseleave'</code>, <code>'mouseover'</code>, <code>'mouseout'</code>, <code>'contextmenu'</code>, <code>'touchstart'</code>, <code>'touchend'</code>, or <code>'touchcancel'</code>. <code>mouseenter</code> and <code>mouseover</code> events are triggered when the cursor enters a visible portion of the specified layer from outside that layer or outside the map canvas. <code>mouseleave</code> and <code>mouseout</code> events are triggered when the cursor leaves a visible portion of the specified layer, or leaves the map canvas. <code>layer</code> <code>string</code> The ID of a style layer or a listener if no ID is provided. Only events whose location is within a visible feature in this layer will trigger the listener. The event will have a <code>features</code> property containing an array of the matching features. <code>listener?</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function to be called when the event is fired."},{"location":"API/classes/maplibregl.Map/#returns_12","title":"Returns","text":"<p><code>Map</code> | <code>Promise</code>\\&lt;<code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>&gt;</p> <p><code>this</code> if listener is provided, promise otherwise to allow easier usage of async/await</p>"},{"location":"API/classes/maplibregl.Map/#overrides_6","title":"Overrides","text":"<p>Camera.once</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_12","title":"Defined in","text":"<p>src/ui/map.ts:1470</p> <p>\u25b8 once\\&lt;<code>T</code>&gt;(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Map</code></p> <p>Overload of the <code>once</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/maplibregl.Map/#type-parameters_5","title":"Type parameters","text":"Name Type <code>T</code> extends keyof <code>MapEventType</code>"},{"location":"API/classes/maplibregl.Map/#parameters_7","title":"Parameters","text":"Name Type Description <code>type</code> <code>T</code> The type of the event. <code>listener?</code> (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The listener callback."},{"location":"API/classes/maplibregl.Map/#returns_13","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides_7","title":"Overrides","text":"<p>Camera.once</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_13","title":"Defined in","text":"<p>src/ui/map.ts:1482</p> <p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Map</code></p> <p>Overload of the <code>once</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_8","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The type of the event. <code>listener?</code> <code>Listener</code> The listener callback."},{"location":"API/classes/maplibregl.Map/#returns_14","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#overrides_8","title":"Overrides","text":"<p>Camera.once</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_14","title":"Defined in","text":"<p>src/ui/map.ts:1490</p>"},{"location":"API/classes/maplibregl.Map/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Map/#addcontrol","title":"addControl","text":"<p>\u25b8 addControl(<code>control</code>, <code>position?</code>): <code>Map</code></p> <p>Adds an IControl to the map, calling <code>control.onAdd(this)</code>.</p> <p>An ErrorEvent will be fired if the image parameter is invald.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_9","title":"Parameters","text":"Name Type Description <code>control</code> <code>IControl</code> The IControl to add. <code>position?</code> <code>ControlPosition</code> position on the map to which the control will be added. Valid values are <code>'top-left'</code>, <code>'top-right'</code>, <code>'bottom-left'</code>, and <code>'bottom-right'</code>. Defaults to <code>'top-right'</code>."},{"location":"API/classes/maplibregl.Map/#returns_15","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Add zoom and rotation controls to the map. <pre><code>map.addControl(new maplibregl.NavigationControl());\n</code></pre></p> <p><code>See</code></p> <p>Display map navigation controls</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_15","title":"Defined in","text":"<p>src/ui/map.ts:736</p>"},{"location":"API/classes/maplibregl.Map/#addimage","title":"addImage","text":"<p>\u25b8 addImage(<code>id</code>, <code>image</code>, <code>options?</code>): <code>Map</code></p> <p>Add an image to the style. This image can be displayed on the map like any other icon in the style's sprite using the image's ID with <code>icon-image</code>, <code>background-pattern</code>, <code>fill-pattern</code>, or <code>line-pattern</code>.</p> <p>A ErrorEvent event will be fired if the image parameter is invalid or there is not enough space in the sprite to add this image.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_10","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image. <code>image</code> <code>ImageBitmap</code> | <code>HTMLImageElement</code> | <code>ImageData</code> | <code>StyleImageInterface</code> | { <code>data</code>: <code>Uint8Array</code> | <code>Uint8ClampedArray</code> ; <code>height</code>: <code>number</code> ; <code>width</code>: <code>number</code>  } The image as an <code>HTMLImageElement</code>, <code>ImageData</code>, <code>ImageBitmap</code> or object with <code>width</code>, <code>height</code>, and <code>data</code> properties with the same format as <code>ImageData</code>. <code>options</code> <code>Partial</code>\\&lt;<code>StyleImageMetadata</code>&gt; Options object."},{"location":"API/classes/maplibregl.Map/#returns_16","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>// If the style's sprite does not already contain an image with ID 'cat',\n// add the image 'cat-icon.png' to the style's sprite with the ID 'cat'.\nmap.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/400px-Cat_silhouette.svg.png', function(error, image) {\n   if (error) throw error;\n   if (!map.hasImage('cat')) map.addImage('cat', image);\n});\n\n// Add a stretchable image that can be used with `icon-text-fit`\n// In this example, the image is 600px wide by 400px high.\nmap.loadImage('https://upload.wikimedia.org/wikipedia/commons/8/89/Black_and_White_Boxed_%28bordered%29.png', function(error, image) {\n   if (error) throw error;\n   if (!map.hasImage('border-image')) {\n     map.addImage('border-image', image, {\n         content: [16, 16, 300, 384], // place text over left half of image, avoiding the 16px border\n         stretchX: [[16, 584]], // stretch everything horizontally except the 16px border\n         stretchY: [[16, 384]], // stretch everything vertically except the 16px border\n     });\n   }\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Use <code>HTMLImageElement</code>: Add an icon to the map</li> <li>Use <code>ImageData</code>: Add a generated icon to the map</li> </ul>"},{"location":"API/classes/maplibregl.Map/#defined-in_16","title":"Defined in","text":"<p>src/ui/map.ts:2141</p>"},{"location":"API/classes/maplibregl.Map/#addlayer","title":"addLayer","text":"<p>\u25b8 addLayer(<code>layer</code>, <code>beforeId?</code>): <code>Map</code></p> <p>Adds a MapLibre style layer to the map's style.</p> <p>A layer defines how data from a specified source will be styled. Read more about layer types and available paint and layout properties in the MapLibre Style Specification.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_11","title":"Parameters","text":"Name Type Description <code>layer</code> <code>AddLayerObject</code> The layer to add, conforming to either the MapLibre Style Specification's layer definition or, less commonly, the CustomLayerInterface specification. Can also be a layer definition with an embedded source definition. The MapLibre Style Specification's layer definition is appropriate for most layers. <code>beforeId?</code> <code>string</code> The ID of an existing layer to insert the new layer before, resulting in the new layer appearing visually beneath the existing layer. If this argument is not specified, the layer will be appended to the end of the layers array and appear visually above all other layers."},{"location":"API/classes/maplibregl.Map/#returns_17","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Add a circle layer with a vector source <pre><code>map.addLayer({\n  id: 'points-of-interest',\n  source: {\n    type: 'vector',\n    url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n  },\n  'source-layer': 'poi_label',\n  type: 'circle',\n  paint: {\n    // MapLibre Style Specification paint properties\n  },\n  layout: {\n    // MapLibre Style Specification layout properties\n  }\n});\n</code></pre></p> <p><code>Example</code></p> <p>Define a source before using it to create a new layer <pre><code>map.addSource('state-data', {\n  type: 'geojson',\n  data: 'path/to/data.geojson'\n});\n\nmap.addLayer({\n  id: 'states',\n  // References the GeoJSON source defined above\n  // and does not require a `source-layer`\n  source: 'state-data',\n  type: 'symbol',\n  layout: {\n    // Set the label content to the\n    // feature's `name` property\n    text-field: ['get', 'name']\n  }\n});\n</code></pre></p> <p><code>Example</code></p> <p>Add a new symbol layer before an existing layer <pre><code>map.addLayer({\n  id: 'states',\n  // References a source that's already been defined\n  source: 'state-data',\n  type: 'symbol',\n  layout: {\n    // Set the label content to the\n    // feature's `name` property\n    text-field: ['get', 'name']\n  }\n// Add the layer before the existing `cities` layer\n}, 'cities');\n</code></pre></p> <p><code>See</code></p> <ul> <li>Create and style clusters</li> <li>Add a vector tile source</li> <li>Add a WMS source</li> </ul>"},{"location":"API/classes/maplibregl.Map/#defined-in_17","title":"Defined in","text":"<p>src/ui/map.ts:2422</p>"},{"location":"API/classes/maplibregl.Map/#addsource","title":"addSource","text":"<p>\u25b8 addSource(<code>id</code>, <code>source</code>): <code>Map</code></p> <p>Adds a source to the map's style.</p> <p>Events triggered:</p> <p>Triggers the <code>source.add</code> event.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_12","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the source to add. Must not conflict with existing sources. <code>source</code> <code>SourceSpecification</code> The source object, conforming to the MapLibre Style Specification's source definition or CanvasSourceSpecification."},{"location":"API/classes/maplibregl.Map/#returns_18","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.addSource('my-data', {\n  type: 'vector',\n  url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.addSource('my-data', {\n  \"type\": \"geojson\",\n  \"data\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [-77.0323, 38.9131]\n    },\n    \"properties\": {\n      \"title\": \"Mapbox DC\",\n      \"marker-symbol\": \"monument\"\n    }\n  }\n});\n</code></pre> <p><code>See</code></p> <p>GeoJSON source: Add live realtime data</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_18","title":"Defined in","text":"<p>src/ui/map.ts:1926</p>"},{"location":"API/classes/maplibregl.Map/#addsourcetype","title":"addSourceType","text":"<p>\u25b8 addSourceType(<code>name</code>, <code>SourceType</code>, <code>callback</code>): <code>void</code></p> <p>Adds a custom source type, making it available for use with Map#addSource.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_13","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> The name of the source type; source definition objects use this name in the <code>{type: ...}</code> field. <code>SourceType</code> <code>SourceClass</code> A Source constructor. <code>callback</code> <code>Callback</code>\\&lt;<code>void</code>&gt; Called when the source type is ready or with an error argument if there is an error."},{"location":"API/classes/maplibregl.Map/#returns_19","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_19","title":"Defined in","text":"<p>src/ui/map.ts:2055</p>"},{"location":"API/classes/maplibregl.Map/#addsprite","title":"addSprite","text":"<p>\u25b8 addSprite(<code>id</code>, <code>url</code>, <code>options?</code>): <code>Map</code></p> <p>Adds a sprite to the map's style. Fires the <code>style</code> event.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_14","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the sprite to add. Must not conflict with existing sprites. <code>url</code> <code>string</code> The URL to load the sprite from <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_20","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.addSprite('sprite-two', 'http://example.com/sprite-two');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_20","title":"Defined in","text":"<p>src/ui/map.ts:2672</p>"},{"location":"API/classes/maplibregl.Map/#aretilesloaded","title":"areTilesLoaded","text":"<p>\u25b8 areTilesLoaded(): <code>boolean</code></p> <p>Returns a Boolean indicating whether all tiles in the viewport from all sources on the style are loaded.</p>"},{"location":"API/classes/maplibregl.Map/#returns_21","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether all tiles are loaded.</p> <p><code>Example</code></p> <pre><code>let tilesLoaded = map.areTilesLoaded();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_21","title":"Defined in","text":"<p>src/ui/map.ts:2035</p>"},{"location":"API/classes/maplibregl.Map/#cameraforbounds","title":"cameraForBounds","text":"<p>\u25b8 cameraForBounds(<code>bounds</code>, <code>options?</code>): <code>CenterZoomBearing</code></p>"},{"location":"API/classes/maplibregl.Map/#parameters_15","title":"Parameters","text":"Name Type Description <code>bounds</code> <code>LngLatBoundsLike</code> Calculate the center for these bounds in the viewport and use the highest zoom level up to and including <code>Map#getMaxZoom()</code> that fits in the viewport. LngLatBounds represent a box that is always axis-aligned with bearing 0. <code>options?</code> <code>CameraForBoundsOptions</code> Options object"},{"location":"API/classes/maplibregl.Map/#returns_22","title":"Returns","text":"<p><code>CenterZoomBearing</code></p> <p>If map is able to fit to provided bounds, returns <code>center</code>, <code>zoom</code>, and <code>bearing</code>. If map is unable to fit, method will warn and return undefined.</p> <p><code>Example</code></p> <pre><code>let bbox = [[-79, 43], [-73, 45]];\nlet newCameraTransform = map.cameraForBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#inherited-from","title":"Inherited from","text":"<p>Camera.cameraForBounds</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_22","title":"Defined in","text":"<p>src/ui/camera.ts:641</p>"},{"location":"API/classes/maplibregl.Map/#easeto","title":"easeTo","text":"<p>\u25b8 easeTo(<code>options</code>, <code>eventData?</code>): <code>Map</code></p> <p>Changes any combination of <code>center</code>, <code>zoom</code>, <code>bearing</code>, <code>pitch</code>, and <code>padding</code> with an animated transition between old and new values. The map will retain its current values for any details not specified in <code>options</code>.</p> <p>Note: The transition will happen instantly if the user has enabled the <code>reduced motion</code> accessibility feature enabled in their operating system, unless <code>options</code> includes <code>essential: true</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code>, <code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_16","title":"Parameters","text":"Name Type Description <code>options</code> <code>AnimationOptions</code> &amp; <code>CenterZoomBearing</code> &amp; { <code>around?</code>: <code>LngLatLike</code> ; <code>pitch?</code>: <code>number</code>  } &amp; { <code>delayEndEvents?</code>: <code>number</code> ; <code>padding?</code>: <code>number</code> | <code>RequireAtLeastOne</code>\\&lt;<code>PaddingOptions</code>&gt;  } &amp; { <code>easeId?</code>: <code>string</code> ; <code>noMoveStart?</code>: <code>boolean</code>  } Options describing the destination and animation of the transition. Accepts CameraOptions and AnimationOptions. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_23","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>See</code></p> <p>Navigate the map with game-like controls</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_1","title":"Inherited from","text":"<p>Camera.easeTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_23","title":"Defined in","text":"<p>src/ui/camera.ts:945</p>"},{"location":"API/classes/maplibregl.Map/#fitbounds","title":"fitBounds","text":"<p>\u25b8 fitBounds(<code>bounds</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Pans and zooms the map to contain its visible area within the specified geographical bounds. This function will also reset the map's bearing to 0 if bearing is nonzero.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_17","title":"Parameters","text":"Name Type Description <code>bounds</code> <code>LngLatBoundsLike</code> Center these bounds in the viewport and use the highest zoom level up to and including <code>Map#getMaxZoom()</code> that fits them in the viewport. <code>options?</code> <code>FitBoundsOptions</code> - <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_24","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre> <p><code>See</code></p> <p>Fit a map to a bounding box</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_2","title":"Inherited from","text":"<p>Camera.fitBounds</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_24","title":"Defined in","text":"<p>src/ui/camera.ts:757</p>"},{"location":"API/classes/maplibregl.Map/#fitscreencoordinates","title":"fitScreenCoordinates","text":"<p>\u25b8 fitScreenCoordinates(<code>p0</code>, <code>p1</code>, <code>bearing</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Pans, rotates and zooms the map to to fit the box made by points p0 and p1 once the map is rotated to the specified bearing. To zoom without rotating, pass in the current map bearing.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code> and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_18","title":"Parameters","text":"Name Type Description <code>p0</code> <code>PointLike</code> First point on screen, in pixel coordinates <code>p1</code> <code>PointLike</code> Second point on screen, in pixel coordinates <code>bearing</code> <code>number</code> Desired map bearing at end of animation, in degrees <code>options?</code> <code>FitBoundsOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_25","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let p0 = [220, 400];\nlet p1 = [500, 900];\nmap.fitScreenCoordinates(p0, p1, map.getBearing(), {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre> <p><code>See</code></p> <p>Used by BoxZoomHandler</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_3","title":"Inherited from","text":"<p>Camera.fitScreenCoordinates</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_25","title":"Defined in","text":"<p>src/ui/camera.ts:787</p>"},{"location":"API/classes/maplibregl.Map/#flyto","title":"flyTo","text":"<p>\u25b8 flyTo(<code>options</code>, <code>eventData?</code>): <code>Map</code></p> <p>Changes any combination of center, zoom, bearing, and pitch, animating the transition along a curve that evokes flight. The animation seamlessly incorporates zooming and panning to help the user maintain her bearings even after traversing a great distance.</p> <p>Note: The animation will be skipped, and this will behave equivalently to <code>jumpTo</code> if the user has the <code>reduced motion</code> accessibility feature enabled in their operating system, unless 'options' includes <code>essential: true</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code>, <code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_19","title":"Parameters","text":"Name Type Description <code>options</code> <code>FlyToOptions</code> Options describing the destination and animation of the transition. Accepts CameraOptions, AnimationOptions, and the following additional options. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_26","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>// fly with default options to null island\nmap.flyTo({center: [0, 0], zoom: 9});\n// using flyTo options\nmap.flyTo({\n  center: [0, 0],\n  zoom: 9,\n  speed: 0.2,\n  curve: 1,\n  easing(t) {\n    return t;\n  }\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Fly to a location</li> <li>Slowly fly to a location</li> <li>Fly to a location based on scroll position</li> </ul>"},{"location":"API/classes/maplibregl.Map/#inherited-from_4","title":"Inherited from","text":"<p>Camera.flyTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_26","title":"Defined in","text":"<p>src/ui/camera.ts:1207</p>"},{"location":"API/classes/maplibregl.Map/#getbearing","title":"getBearing","text":"<p>\u25b8 getBearing(): <code>number</code></p> <p>Returns the map's current bearing. The bearing is the compass direction that is \"up\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p>"},{"location":"API/classes/maplibregl.Map/#returns_27","title":"Returns","text":"<p><code>number</code></p> <p>The map's current bearing.</p> <p><code>See</code></p> <p>Navigate the map with game-like controls</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_5","title":"Inherited from","text":"<p>Camera.getBearing</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_27","title":"Defined in","text":"<p>src/ui/camera.ts:487</p>"},{"location":"API/classes/maplibregl.Map/#getbounds","title":"getBounds","text":"<p>\u25b8 getBounds(): <code>LngLatBounds</code></p> <p>Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not an axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region.</p>"},{"location":"API/classes/maplibregl.Map/#returns_28","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>The geographical bounds of the map as LngLatBounds.</p> <p><code>Example</code></p> <pre><code>let bounds = map.getBounds();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_28","title":"Defined in","text":"<p>src/ui/map.ts:920</p>"},{"location":"API/classes/maplibregl.Map/#getcameratargetelevation","title":"getCameraTargetElevation","text":"<p>\u25b8 getCameraTargetElevation(): <code>number</code></p> <p>Returns the elevation for the point where the camera is looking. This value corresponds to: \"meters above sea level\" * \"exaggeration\"</p>"},{"location":"API/classes/maplibregl.Map/#returns_29","title":"Returns","text":"<p><code>number</code></p> <p>The elevation.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_29","title":"Defined in","text":"<p>src/ui/map.ts:3432</p>"},{"location":"API/classes/maplibregl.Map/#getcanvas","title":"getCanvas","text":"<p>\u25b8 getCanvas(): <code>HTMLCanvasElement</code></p> <p>Returns the map's <code>&lt;canvas&gt;</code> element.</p>"},{"location":"API/classes/maplibregl.Map/#returns_30","title":"Returns","text":"<p><code>HTMLCanvasElement</code></p> <p>The map's <code>&lt;canvas&gt;</code> element.</p> <p><code>See</code></p> <ul> <li>Measure distances</li> <li>Display a popup on hover</li> <li>Center the map on a clicked symbol</li> </ul>"},{"location":"API/classes/maplibregl.Map/#defined-in_30","title":"Defined in","text":"<p>src/ui/map.ts:2912</p>"},{"location":"API/classes/maplibregl.Map/#getcanvascontainer","title":"getCanvasContainer","text":"<p>\u25b8 getCanvasContainer(): <code>HTMLElement</code></p> <p>Returns the HTML element containing the map's <code>&lt;canvas&gt;</code> element.</p> <p>If you want to add non-GL overlays to the map, you should append them to this element.</p> <p>This is the element to which event bindings for map interactivity (such as panning and zooming) are attached. It will receive bubbled events from child elements such as the <code>&lt;canvas&gt;</code>, but not from map controls.</p>"},{"location":"API/classes/maplibregl.Map/#returns_31","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The container of the map's <code>&lt;canvas&gt;</code>.</p> <p><code>See</code></p> <p>Create a draggable point</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_31","title":"Defined in","text":"<p>src/ui/map.ts:2900</p>"},{"location":"API/classes/maplibregl.Map/#getcenter","title":"getCenter","text":"<p>\u25b8 getCenter(): <code>LngLat</code></p> <p>Returns the map's geographical centerpoint.</p>"},{"location":"API/classes/maplibregl.Map/#returns_32","title":"Returns","text":"<p><code>LngLat</code></p> <p>The map's geographical centerpoint.</p> <p><code>Example</code></p> <p>Return a LngLat object such as <code>{lng: 0, lat: 0}</code> <pre><code>let center = map.getCenter();\n// access longitude and latitude values directly\nlet {lng, lat} = map.getCenter();\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_6","title":"Inherited from","text":"<p>Camera.getCenter</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_32","title":"Defined in","text":"<p>src/ui/camera.ts:328</p>"},{"location":"API/classes/maplibregl.Map/#getcontainer","title":"getContainer","text":"<p>\u25b8 getContainer(): <code>HTMLElement</code></p> <p>Returns the map's containing HTML element.</p>"},{"location":"API/classes/maplibregl.Map/#returns_33","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The map's container.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_33","title":"Defined in","text":"<p>src/ui/map.ts:2884</p>"},{"location":"API/classes/maplibregl.Map/#getcooperativegestures","title":"getCooperativeGestures","text":"<p>\u25b8 getCooperativeGestures(): <code>boolean</code> | <code>GestureOptions</code></p> <p>Gets the map's cooperativeGestures option</p>"},{"location":"API/classes/maplibregl.Map/#returns_34","title":"Returns","text":"<p><code>boolean</code> | <code>GestureOptions</code></p> <p>The gestureOptions</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_34","title":"Defined in","text":"<p>src/ui/map.ts:1166</p>"},{"location":"API/classes/maplibregl.Map/#getfeaturestate","title":"getFeatureState","text":"<p>\u25b8 getFeatureState(<code>feature</code>): <code>any</code></p> <p>Gets the <code>state</code> of a feature. A feature's <code>state</code> is a set of user-defined key-value pairs that are assigned to a feature at runtime. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p> <p>Note: To access the values in a feature's state object for the purposes of styling the feature, use the <code>feature-state</code> expression.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_20","title":"Parameters","text":"Name Type Description <code>feature</code> <code>FeatureIdentifier</code> Feature identifier. Feature objects returned from Map#queryRenderedFeatures or event handlers can be used as feature identifiers."},{"location":"API/classes/maplibregl.Map/#returns_35","title":"Returns","text":"<p><code>any</code></p> <p>The state of the feature: a set of key-value pairs that was assigned to the feature at runtime.</p> <p><code>Example</code></p> <p>When the mouse moves over the <code>my-layer</code> layer, get the feature state for the feature under the mouse <pre><code>map.on('mousemove', 'my-layer', function(e) {\n  if (e.features.length &gt; 0) {\n    map.getFeatureState({\n      source: 'my-source',\n      sourceLayer: 'my-source-layer',\n      id: e.features[0].id\n    });\n  }\n});\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_35","title":"Defined in","text":"<p>src/ui/map.ts:2875</p>"},{"location":"API/classes/maplibregl.Map/#getfilter","title":"getFilter","text":"<p>\u25b8 getFilter(<code>layerId</code>): <code>void</code> | <code>FilterSpecification</code></p> <p>Returns the filter applied to the specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_21","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the style layer whose filter to get."},{"location":"API/classes/maplibregl.Map/#returns_36","title":"Returns","text":"<p><code>void</code> | <code>FilterSpecification</code></p> <p>The layer's filter.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_36","title":"Defined in","text":"<p>src/ui/map.ts:2568</p>"},{"location":"API/classes/maplibregl.Map/#getglyphs","title":"getGlyphs","text":"<p>\u25b8 getGlyphs(): <code>string</code></p> <p>Returns the value of the style's glyphs URL</p>"},{"location":"API/classes/maplibregl.Map/#returns_37","title":"Returns","text":"<p><code>string</code></p> <p>glyphs Style's glyphs url</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_37","title":"Defined in","text":"<p>src/ui/map.ts:2656</p>"},{"location":"API/classes/maplibregl.Map/#getimage","title":"getImage","text":"<p>\u25b8 getImage(<code>id</code>): <code>StyleImage</code></p> <p>Returns an image, specified by ID, currently available in the map. This includes both images from the style's original sprite and any images that have been added at runtime using Map#addImage.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_22","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/maplibregl.Map/#returns_38","title":"Returns","text":"<p><code>StyleImage</code></p> <p>An image in the map with the specified ID.</p> <p><code>Example</code></p> <pre><code>let coffeeShopIcon = map.getImage(\"coffee_cup\");\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_38","title":"Defined in","text":"<p>src/ui/map.ts:2256</p>"},{"location":"API/classes/maplibregl.Map/#getlayer","title":"getLayer","text":"<p>\u25b8 getLayer(<code>id</code>): <code>StyleLayer</code></p> <p>Returns the layer with the specified ID in the map's style.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_23","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the layer to get."},{"location":"API/classes/maplibregl.Map/#returns_39","title":"Returns","text":"<p><code>StyleLayer</code></p> <p>The layer with the specified ID, or <code>undefined</code> if the ID corresponds to no existing layers.</p> <p><code>Example</code></p> <pre><code>let stateDataLayer = map.getLayer('state-data');\n</code></pre> <p><code>See</code></p> <ul> <li>Filter symbols by toggling a list</li> <li>Filter symbols by text input</li> </ul>"},{"location":"API/classes/maplibregl.Map/#defined-in_39","title":"Defined in","text":"<p>src/ui/map.ts:2479</p>"},{"location":"API/classes/maplibregl.Map/#getlayersorder","title":"getLayersOrder","text":"<p>\u25b8 getLayersOrder(): <code>string</code>[]</p> <p>Return the ids of all layers currently in the style, including custom layers, in order.</p>"},{"location":"API/classes/maplibregl.Map/#returns_40","title":"Returns","text":"<p><code>string</code>[]</p> <p>ids of layers, in order</p> <p><code>Example</code></p> <pre><code>const orderedLayerIds = map.getLayersOrder();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_40","title":"Defined in","text":"<p>src/ui/map.ts:2493</p>"},{"location":"API/classes/maplibregl.Map/#getlayoutproperty","title":"getLayoutProperty","text":"<p>\u25b8 getLayoutProperty(<code>layerId</code>, <code>name</code>): <code>any</code></p> <p>Returns the value of a layout property in the specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_24","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to get the layout property from. <code>name</code> <code>string</code> The name of the layout property to get."},{"location":"API/classes/maplibregl.Map/#returns_41","title":"Returns","text":"<p><code>any</code></p> <p>The value of the specified layout property.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_41","title":"Defined in","text":"<p>src/ui/map.ts:2630</p>"},{"location":"API/classes/maplibregl.Map/#getlight","title":"getLight","text":"<p>\u25b8 getLight(): <code>LightSpecification</code></p> <p>Returns the value of the light object.</p>"},{"location":"API/classes/maplibregl.Map/#returns_42","title":"Returns","text":"<p><code>LightSpecification</code></p> <p>light Light properties of the style.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_42","title":"Defined in","text":"<p>src/ui/map.ts:2752</p>"},{"location":"API/classes/maplibregl.Map/#getmaxbounds","title":"getMaxBounds","text":"<p>\u25b8 getMaxBounds(): <code>LngLatBounds</code></p> <p>Returns the maximum geographical bounds the map is constrained to, or <code>null</code> if none set.</p>"},{"location":"API/classes/maplibregl.Map/#returns_43","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>The map object.</p> <p><code>Example</code></p> <pre><code>let maxBounds = map.getMaxBounds();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_43","title":"Defined in","text":"<p>src/ui/map.ts:932</p>"},{"location":"API/classes/maplibregl.Map/#getmaxpitch","title":"getMaxPitch","text":"<p>\u25b8 getMaxPitch(): <code>number</code></p> <p>Returns the map's maximum allowable pitch.</p>"},{"location":"API/classes/maplibregl.Map/#returns_44","title":"Returns","text":"<p><code>number</code></p> <p>The maxPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_44","title":"Defined in","text":"<p>src/ui/map.ts:1122</p>"},{"location":"API/classes/maplibregl.Map/#getmaxzoom","title":"getMaxZoom","text":"<p>\u25b8 getMaxZoom(): <code>number</code></p> <p>Returns the map's maximum allowable zoom level.</p>"},{"location":"API/classes/maplibregl.Map/#returns_45","title":"Returns","text":"<p><code>number</code></p> <p>The maxZoom</p> <p><code>Example</code></p> <pre><code>let maxZoom = map.getMaxZoom();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_45","title":"Defined in","text":"<p>src/ui/map.ts:1048</p>"},{"location":"API/classes/maplibregl.Map/#getminpitch","title":"getMinPitch","text":"<p>\u25b8 getMinPitch(): <code>number</code></p> <p>Returns the map's minimum allowable pitch.</p>"},{"location":"API/classes/maplibregl.Map/#returns_46","title":"Returns","text":"<p><code>number</code></p> <p>The minPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_46","title":"Defined in","text":"<p>src/ui/map.ts:1085</p>"},{"location":"API/classes/maplibregl.Map/#getminzoom","title":"getMinZoom","text":"<p>\u25b8 getMinZoom(): <code>number</code></p> <p>Returns the map's minimum allowable zoom level.</p>"},{"location":"API/classes/maplibregl.Map/#returns_47","title":"Returns","text":"<p><code>number</code></p> <p>minZoom</p> <p><code>Example</code></p> <pre><code>let minZoom = map.getMinZoom();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_47","title":"Defined in","text":"<p>src/ui/map.ts:1007</p>"},{"location":"API/classes/maplibregl.Map/#getpadding","title":"getPadding","text":"<p>\u25b8 getPadding(): <code>PaddingOptions</code></p> <p>Returns the current padding applied around the map viewport.</p>"},{"location":"API/classes/maplibregl.Map/#returns_48","title":"Returns","text":"<p><code>PaddingOptions</code></p> <p>The current padding around the map viewport.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_7","title":"Inherited from","text":"<p>Camera.getPadding</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_48","title":"Defined in","text":"<p>src/ui/camera.ts:516</p>"},{"location":"API/classes/maplibregl.Map/#getpaintproperty","title":"getPaintProperty","text":"<p>\u25b8 getPaintProperty(<code>layerId</code>, <code>name</code>): <code>unknown</code></p> <p>Returns the value of a paint property in the specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_25","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to get the paint property from. <code>name</code> <code>string</code> The name of a paint property to get."},{"location":"API/classes/maplibregl.Map/#returns_49","title":"Returns","text":"<p><code>unknown</code></p> <p>The value of the specified paint property.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_49","title":"Defined in","text":"<p>src/ui/map.ts:2601</p>"},{"location":"API/classes/maplibregl.Map/#getpitch","title":"getPitch","text":"<p>\u25b8 getPitch(): <code>number</code></p> <p>Returns the map's current pitch (tilt).</p>"},{"location":"API/classes/maplibregl.Map/#returns_50","title":"Returns","text":"<p><code>number</code></p> <p>The map's current pitch, measured in degrees away from the plane of the screen.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_8","title":"Inherited from","text":"<p>Camera.getPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_50","title":"Defined in","text":"<p>src/ui/camera.ts:610</p>"},{"location":"API/classes/maplibregl.Map/#getpixelratio","title":"getPixelRatio","text":"<p>\u25b8 getPixelRatio(): <code>number</code></p> <p>Returns the map's pixel ratio. Note that the pixel ratio actually applied may be lower to respect maxCanvasSize.</p>"},{"location":"API/classes/maplibregl.Map/#returns_51","title":"Returns","text":"<p><code>number</code></p> <p>The pixel ratio.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_51","title":"Defined in","text":"<p>src/ui/map.ts:894</p>"},{"location":"API/classes/maplibregl.Map/#getrenderworldcopies","title":"getRenderWorldCopies","text":"<p>\u25b8 getRenderWorldCopies(): <code>boolean</code></p> <p>Returns the state of <code>renderWorldCopies</code>. If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>: - When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude. - Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level.</p>"},{"location":"API/classes/maplibregl.Map/#returns_52","title":"Returns","text":"<p><code>boolean</code></p> <p>The renderWorldCopies</p> <p><code>Example</code></p> <pre><code>let worldCopiesRendered = map.getRenderWorldCopies();\n</code></pre> <p><code>See</code></p> <p>Render world copies</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_52","title":"Defined in","text":"<p>src/ui/map.ts:1137</p>"},{"location":"API/classes/maplibregl.Map/#getsource","title":"getSource","text":"<p>\u25b8 getSource(<code>id</code>): <code>Source</code></p> <p>Returns the source with the specified ID in the map's style.</p> <p>This method is often used to update a source using the instance members for the relevant source type as defined in Sources. For example, setting the <code>data</code> for a GeoJSON source or updating the <code>url</code> and <code>coordinates</code> of an image source.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_26","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the source to get."},{"location":"API/classes/maplibregl.Map/#returns_53","title":"Returns","text":"<p><code>Source</code></p> <p>The style source with the specified ID or <code>undefined</code> if the ID corresponds to no existing sources. The shape of the object varies by source type. A list of options for each source type is available on the MapLibre Style Specification's Sources page.</p> <p><code>Example</code></p> <pre><code>let sourceObject = map.getSource('points');\n</code></pre> <p><code>See</code></p> <ul> <li>Create a draggable point</li> <li>Animate a point</li> <li>Add live realtime data</li> </ul>"},{"location":"API/classes/maplibregl.Map/#defined-in_53","title":"Defined in","text":"<p>src/ui/map.ts:2097</p>"},{"location":"API/classes/maplibregl.Map/#getsprite","title":"getSprite","text":"<p>\u25b8 getSprite(): { <code>id</code>: <code>string</code> ; <code>url</code>: <code>string</code>  }[]</p> <p>Returns the as-is value of the style's sprite.</p>"},{"location":"API/classes/maplibregl.Map/#returns_54","title":"Returns","text":"<p>{ <code>id</code>: <code>string</code> ; <code>url</code>: <code>string</code>  }[]</p> <p>style's sprite list of id-url pairs</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_54","title":"Defined in","text":"<p>src/ui/map.ts:2704</p>"},{"location":"API/classes/maplibregl.Map/#getstyle","title":"getStyle","text":"<p>\u25b8 getStyle(): <code>StyleSpecification</code></p> <p>Returns the map's MapLibre style object, a JSON object which can be used to recreate the map's style.</p>"},{"location":"API/classes/maplibregl.Map/#returns_55","title":"Returns","text":"<p><code>StyleSpecification</code></p> <p>The map's style JSON object.</p> <p><code>Example</code></p> <pre><code>let styleJson = map.getStyle();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_55","title":"Defined in","text":"<p>src/ui/map.ts:1867</p>"},{"location":"API/classes/maplibregl.Map/#getterrain","title":"getTerrain","text":"<p>\u25b8 getTerrain(): <code>TerrainSpecification</code></p> <p>Get the terrain-options if terrain is loaded</p>"},{"location":"API/classes/maplibregl.Map/#returns_56","title":"Returns","text":"<p><code>TerrainSpecification</code></p> <p>the TerrainSpecification passed to setTerrain</p> <p><code>Example</code></p> <pre><code>map.getTerrain(); // { source: 'terrain' };\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_56","title":"Defined in","text":"<p>src/ui/map.ts:2021</p>"},{"location":"API/classes/maplibregl.Map/#getzoom","title":"getZoom","text":"<p>\u25b8 getZoom(): <code>number</code></p> <p>Returns the map's current zoom level.</p>"},{"location":"API/classes/maplibregl.Map/#returns_57","title":"Returns","text":"<p><code>number</code></p> <p>The map's current zoom level.</p> <p><code>Example</code></p> <pre><code>map.getZoom();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#inherited-from_9","title":"Inherited from","text":"<p>Camera.getZoom</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_57","title":"Defined in","text":"<p>src/ui/camera.ts:395</p>"},{"location":"API/classes/maplibregl.Map/#hascontrol","title":"hasControl","text":"<p>\u25b8 hasControl(<code>control</code>): <code>boolean</code></p> <p>Checks if a control exists on the map.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_27","title":"Parameters","text":"Name Type Description <code>control</code> <code>IControl</code> The IControl to check."},{"location":"API/classes/maplibregl.Map/#returns_58","title":"Returns","text":"<p><code>boolean</code></p> <p>true if map contains control.</p> <p><code>Example</code></p> <pre><code>// Define a new navigation control.\nlet navigation = new maplibregl.NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Check that the navigation control exists on the map.\nmap.hasControl(navigation);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_58","title":"Defined in","text":"<p>src/ui/map.ts:803</p>"},{"location":"API/classes/maplibregl.Map/#hasimage","title":"hasImage","text":"<p>\u25b8 hasImage(<code>id</code>): <code>boolean</code></p> <p>Check whether or not an image with a specific ID exists in the style. This checks both images in the style's original sprite and any images that have been added at runtime using Map#addImage.</p> <p>An ErrorEvent will be fired if the image parameter is invald.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_28","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/maplibregl.Map/#returns_59","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the image exists.</p> <p><code>Example</code></p> <p>Check if an image with the ID 'cat' exists in the style's sprite. <pre><code>let catIconExists = map.hasImage('cat');\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_59","title":"Defined in","text":"<p>src/ui/map.ts:2276</p>"},{"location":"API/classes/maplibregl.Map/#ismoving","title":"isMoving","text":"<p>\u25b8 isMoving(): <code>boolean</code></p> <p>Returns true if the map is panning, zooming, rotating, or pitching due to a camera animation or user gesture.</p>"},{"location":"API/classes/maplibregl.Map/#returns_60","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the map is moving.</p> <p><code>Example</code></p> <pre><code>let isMoving = map.isMoving();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_60","title":"Defined in","text":"<p>src/ui/map.ts:1229</p>"},{"location":"API/classes/maplibregl.Map/#isrotating","title":"isRotating","text":"<p>\u25b8 isRotating(): <code>boolean</code></p> <p>Returns true if the map is rotating due to a camera animation or user gesture.</p>"},{"location":"API/classes/maplibregl.Map/#returns_61","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the map is rotating.</p> <p><code>Example</code></p> <pre><code>map.isRotating();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_61","title":"Defined in","text":"<p>src/ui/map.ts:1253</p>"},{"location":"API/classes/maplibregl.Map/#issourceloaded","title":"isSourceLoaded","text":"<p>\u25b8 isSourceLoaded(<code>id</code>): <code>boolean</code></p> <p>Returns a Boolean indicating whether the source is loaded. Returns <code>true</code> if the source with the given ID in the map's style has no outstanding network requests, otherwise <code>false</code>.</p> <p>A ErrorEvent event will be fired if there is no source wit the specified ID.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_29","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the source to be checked."},{"location":"API/classes/maplibregl.Map/#returns_62","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the source is loaded.</p> <p><code>Example</code></p> <pre><code>let sourceLoaded = map.isSourceLoaded('bathymetry-data');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_62","title":"Defined in","text":"<p>src/ui/map.ts:1945</p>"},{"location":"API/classes/maplibregl.Map/#isstyleloaded","title":"isStyleLoaded","text":"<p>\u25b8 isStyleLoaded(): <code>boolean</code> | <code>void</code></p> <p>Returns a Boolean indicating whether the map's style is fully loaded.</p>"},{"location":"API/classes/maplibregl.Map/#returns_63","title":"Returns","text":"<p><code>boolean</code> | <code>void</code></p> <p>A Boolean indicating whether the style is fully loaded.</p> <p><code>Example</code></p> <pre><code>let styleLoadStatus = map.isStyleLoaded();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_63","title":"Defined in","text":"<p>src/ui/map.ts:1883</p>"},{"location":"API/classes/maplibregl.Map/#iszooming","title":"isZooming","text":"<p>\u25b8 isZooming(): <code>boolean</code></p> <p>Returns true if the map is zooming due to a camera animation or user gesture.</p>"},{"location":"API/classes/maplibregl.Map/#returns_64","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the map is zooming.</p> <p><code>Example</code></p> <pre><code>let isZooming = map.isZooming();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_64","title":"Defined in","text":"<p>src/ui/map.ts:1241</p>"},{"location":"API/classes/maplibregl.Map/#jumpto","title":"jumpTo","text":"<p>\u25b8 jumpTo(<code>options</code>, <code>eventData?</code>): <code>Map</code></p> <p>Changes any combination of center, zoom, bearing, and pitch, without an animated transition. The map will retain its current values for any details not specified in <code>options</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code>, <code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_30","title":"Parameters","text":"Name Type Description <code>options</code> <code>JumpToOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_65","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>// jump to coordinates at current zoom\nmap.jumpTo({center: [0, 0]});\n// jump with zoom, pitch, and bearing options\nmap.jumpTo({\n  center: [0, 0],\n  zoom: 8,\n  pitch: 45,\n  bearing: 90\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Jump to a series of locations</li> <li>Update a feature in realtime</li> </ul>"},{"location":"API/classes/maplibregl.Map/#inherited-from_10","title":"Inherited from","text":"<p>Camera.jumpTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_65","title":"Defined in","text":"<p>src/ui/camera.ts:837</p>"},{"location":"API/classes/maplibregl.Map/#listimages","title":"listImages","text":"<p>\u25b8 listImages(): <code>string</code>[]</p> <p>Returns an Array of strings containing the IDs of all images currently available in the map. This includes both images from the style's original sprite and any images that have been added at runtime using Map#addImage.</p>"},{"location":"API/classes/maplibregl.Map/#returns_66","title":"Returns","text":"<p><code>string</code>[]</p> <p>An Array of strings containing the names of all sprites/images currently available in the map.</p> <p><code>Example</code></p> <pre><code>let allImages = map.listImages();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_66","title":"Defined in","text":"<p>src/ui/map.ts:2337</p>"},{"location":"API/classes/maplibregl.Map/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_31","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Map/#returns_67","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_11","title":"Inherited from","text":"<p>Camera.listens</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_67","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.Map/#loadimage","title":"loadImage","text":"<p>\u25b8 loadImage(<code>url</code>, <code>callback</code>): <code>void</code></p> <p>Load an image from an external URL to be used with Map#addImage. External domains must support CORS.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_32","title":"Parameters","text":"Name Type Description <code>url</code> <code>string</code> The URL of the image file. Image file must be in png, webp, or jpg format. <code>callback</code> <code>GetImageCallback</code> Expecting <code>callback(error, data)</code>. Called when the image has loaded or with an error argument if there is an error."},{"location":"API/classes/maplibregl.Map/#returns_68","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <p>Load an image from an external URL. <pre><code>map.loadImage('http://placekitten.com/50/50', function(error, image) {\n  if (error) throw error;\n  // Add the loaded image to the style's sprite with the ID 'kitten'.\n  map.addImage('kitten', image);\n});\n</code></pre></p> <p><code>See</code></p> <p>Add an icon to the map</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_68","title":"Defined in","text":"<p>src/ui/map.ts:2321</p>"},{"location":"API/classes/maplibregl.Map/#loaded","title":"loaded","text":"<p>\u25b8 loaded(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the map is fully loaded.</p> <p>Returns <code>false</code> if the style is not yet fully loaded, or if there has been a change to the sources or style that has not yet fully loaded.</p>"},{"location":"API/classes/maplibregl.Map/#returns_69","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the map is fully loaded.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_69","title":"Defined in","text":"<p>src/ui/map.ts:3084</p>"},{"location":"API/classes/maplibregl.Map/#movelayer","title":"moveLayer","text":"<p>\u25b8 moveLayer(<code>id</code>, <code>beforeId?</code>): <code>Map</code></p> <p>Moves a layer to a different z-position.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_33","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the layer to move. <code>beforeId?</code> <code>string</code> The ID of an existing layer to insert the new layer before. When viewing the map, the <code>id</code> layer will appear beneath the <code>beforeId</code> layer. If <code>beforeId</code> is omitted, the layer will be appended to the end of the layers array and appear above all other layers on the map."},{"location":"API/classes/maplibregl.Map/#returns_70","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Move a layer with ID 'polygon' before the layer with ID 'country-label'. The <code>polygon</code> layer will appear beneath the <code>country-label</code> layer on the map. <pre><code>map.moveLayer('polygon', 'country-label');\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_70","title":"Defined in","text":"<p>src/ui/map.ts:2441</p>"},{"location":"API/classes/maplibregl.Map/#panby","title":"panBy","text":"<p>\u25b8 panBy(<code>offset</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Pans the map by the specified offset.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_34","title":"Parameters","text":"Name Type Description <code>offset</code> <code>PointLike</code> <code>x</code> and <code>y</code> coordinates by which to pan the map. <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_71","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>See</code></p> <p>Navigate the map with game-like controls</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_12","title":"Inherited from","text":"<p>Camera.panBy</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_71","title":"Defined in","text":"<p>src/ui/camera.ts:358</p>"},{"location":"API/classes/maplibregl.Map/#panto","title":"panTo","text":"<p>\u25b8 panTo(<code>lnglat</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Pans the map to the specified location with an animated transition.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_35","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> The location to pan the map to. <code>options?</code> <code>AnimationOptions</code> Options describing the destination and animation of the transition. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_72","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.panTo([-74, 38]);\n// Specify that the panTo animation should last 5000 milliseconds.\nmap.panTo([-74, 38], {duration: 5000});\n</code></pre> <p><code>See</code></p> <p>Update a feature in realtime</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_13","title":"Inherited from","text":"<p>Camera.panTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_72","title":"Defined in","text":"<p>src/ui/camera.ts:380</p>"},{"location":"API/classes/maplibregl.Map/#project","title":"project","text":"<p>\u25b8 project(<code>lnglat</code>): <code>Point</code></p> <p>Returns a Point representing pixel coordinates, relative to the map's <code>container</code>, that correspond to the specified geographical location.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_36","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> The geographical location to project."},{"location":"API/classes/maplibregl.Map/#returns_73","title":"Returns","text":"<p><code>Point</code></p> <p>The Point corresponding to <code>lnglat</code>, relative to the map's <code>container</code>.</p> <p><code>Example</code></p> <pre><code>let coordinate = [-122.420679, 37.772537];\nlet point = map.project(coordinate);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_73","title":"Defined in","text":"<p>src/ui/map.ts:1199</p>"},{"location":"API/classes/maplibregl.Map/#queryrenderedfeatures","title":"queryRenderedFeatures","text":"<p>\u25b8 queryRenderedFeatures(<code>geometryOrOptions?</code>, <code>options?</code>): <code>MapGeoJSONFeature</code>[]</p> <p>Returns an array of MapGeoJSONFeature objects representing visible features that satisfy the query parameters.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_37","title":"Parameters","text":"Name Type Description <code>geometryOrOptions?</code> <code>PointLike</code> | <code>QueryRenderedFeaturesOptions</code> | [<code>PointLike</code>, <code>PointLike</code>] (optional) The geometry of the query region: either a single point or southwest and northeast points describing a bounding box. Omitting this parameter (i.e. calling Map#queryRenderedFeatures with zero arguments, or with only a <code>options</code> argument) is equivalent to passing a bounding box encompassing the entire map viewport. The geometryOrOptions can receive a QueryRenderedFeaturesOptions only to support a situation where the function receives only one parameter which is the options parameter. <code>options?</code> <code>QueryRenderedFeaturesOptions</code> (optional) Options object."},{"location":"API/classes/maplibregl.Map/#returns_74","title":"Returns","text":"<p><code>MapGeoJSONFeature</code>[]</p> <p>An array of MapGeoJSONFeature objects.</p> <p>The <code>properties</code> value of each returned feature object contains the properties of its source feature. For GeoJSON sources, only string and numeric property values are supported (i.e. <code>null</code>, <code>Array</code>, and <code>Object</code> values are not supported).</p> <p>Each feature includes top-level <code>layer</code>, <code>source</code>, and <code>sourceLayer</code> properties. The <code>layer</code> property is an object representing the style layer to  which the feature belongs. Layout and paint properties in this object contain values which are fully evaluated for the given zoom level and feature.</p> <p>Only features that are currently rendered are included. Some features will not be included, like:</p> <ul> <li>Features from layers whose <code>visibility</code> property is <code>\"none\"</code>.</li> <li>Features from layers whose zoom range excludes the current zoom level.</li> <li>Symbol features that have been hidden due to text or icon collision.</li> </ul> <p>Features from all other layers are included, including features that may have no visible contribution to the rendered result; for example, because the layer's opacity or color alpha component is set to 0.</p> <p>The topmost rendered feature appears first in the returned array, and subsequent features are sorted by descending z-order. Features that are rendered multiple times (due to wrapping across the antemeridian at low zoom levels) are returned only once (though subject to the following caveat).</p> <p>Because features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature geometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple times in query results. For example, suppose there is a highway running through the bounding rectangle of a query. The results of the query will be those parts of the highway that lie within the map tiles covering the bounding rectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile will be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple tiles due to tile buffering.</p> <p><code>Example</code></p> <p>Find all features at a point <pre><code>let features = map.queryRenderedFeatures(\n  [20, 35],\n  { layers: ['my-layer-name'] }\n);\n</code></pre></p> <p><code>Example</code></p> <p>Find all features within a static bounding box <pre><code>let features = map.queryRenderedFeatures(\n  [[10, 20], [30, 50]],\n  { layers: ['my-layer-name'] }\n);\n</code></pre></p> <p><code>Example</code></p> <p>Find all features within a bounding box around a point <pre><code>let width = 10;\nlet height = 20;\nlet features = map.queryRenderedFeatures([\n  [point.x - width / 2, point.y - height / 2],\n  [point.x + width / 2, point.y + height / 2]\n], { layers: ['my-layer-name'] });\n</code></pre></p> <p><code>Example</code></p> <p>Query all rendered features from a single layer <pre><code>let features = map.queryRenderedFeatures({ layers: ['my-layer-name'] });\n</code></pre></p> <p><code>See</code></p> <p>Get features under the mouse pointer</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_74","title":"Defined in","text":"<p>src/ui/map.ts:1641</p>"},{"location":"API/classes/maplibregl.Map/#querysourcefeatures","title":"querySourceFeatures","text":"<p>\u25b8 querySourceFeatures(<code>sourceId</code>, <code>parameters?</code>): <code>MapGeoJSONFeature</code>[]</p> <p>Returns an array of MapGeoJSONFeature objects representing features within the specified vector tile or GeoJSON source that satisfy the query parameters.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_38","title":"Parameters","text":"Name Type Description <code>sourceId</code> <code>string</code> The ID of the vector tile or GeoJSON source to query. <code>parameters?</code> <code>QuerySourceFeatureOptions</code> The options object."},{"location":"API/classes/maplibregl.Map/#returns_75","title":"Returns","text":"<p><code>MapGeoJSONFeature</code>[]</p> <p>An array of MapGeoJSONFeature objects.</p> <p>In contrast to Map#queryRenderedFeatures, this function returns all features matching the query parameters, whether or not they are rendered by the current style (i.e. visible). The domain of the query includes all currently-loaded vector tiles and GeoJSON source tiles: this function does not check tiles outside the currently visible viewport.</p> <p>Because features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature geometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple times in query results. For example, suppose there is a highway running through the bounding rectangle of a query. The results of the query will be those parts of the highway that lie within the map tiles covering the bounding rectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile will be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple tiles due to tile buffering.</p> <p><code>Example</code></p> <p>Find all features in one source layer in a vector source <pre><code>let features = map.querySourceFeatures('your-source-id', {\n  sourceLayer: 'your-source-layer'\n});\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_75","title":"Defined in","text":"<p>src/ui/map.ts:1691</p>"},{"location":"API/classes/maplibregl.Map/#queryterrainelevation","title":"queryTerrainElevation","text":"<p>\u25b8 queryTerrainElevation(<code>lngLatLike</code>): <code>number</code></p> <p>Query the current elevation of location. It return null if terrain is not enabled. the elevation is in meters relative to mean sea-level</p>"},{"location":"API/classes/maplibregl.Map/#parameters_39","title":"Parameters","text":"Name Type Description <code>lngLatLike</code> <code>LngLatLike</code> [x,y] or LngLat coordinates of the location"},{"location":"API/classes/maplibregl.Map/#returns_76","title":"Returns","text":"<p><code>number</code></p> <p>elevation in meters</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_14","title":"Inherited from","text":"<p>Camera.queryTerrainElevation</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_76","title":"Defined in","text":"<p>src/ui/camera.ts:1465</p>"},{"location":"API/classes/maplibregl.Map/#redraw","title":"redraw","text":"<p>\u25b8 redraw(): <code>Map</code></p> <p>Force a synchronous redraw of the map.</p>"},{"location":"API/classes/maplibregl.Map/#returns_77","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.redraw();\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_77","title":"Defined in","text":"<p>src/ui/map.ts:3253</p>"},{"location":"API/classes/maplibregl.Map/#remove","title":"remove","text":"<p>\u25b8 remove(): <code>void</code></p> <p>Clean up and release all internal resources associated with this map.</p> <p>This includes DOM elements, event bindings, web workers, and WebGL resources.</p> <p>Use this method when you are done using the map and wish to ensure that it no longer consumes browser resources. Afterwards, you must not call any other methods on the map.</p>"},{"location":"API/classes/maplibregl.Map/#returns_78","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_78","title":"Defined in","text":"<p>src/ui/map.ts:3274</p>"},{"location":"API/classes/maplibregl.Map/#removecontrol","title":"removeControl","text":"<p>\u25b8 removeControl(<code>control</code>): <code>Map</code></p> <p>Removes the control from the map.</p> <p>An ErrorEvent will be fired if the image parameter is invald.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_40","title":"Parameters","text":"Name Type Description <code>control</code> <code>IControl</code> The IControl to remove."},{"location":"API/classes/maplibregl.Map/#returns_79","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>// Define a new navigation control.\nlet navigation = new maplibregl.NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Remove zoom and rotation controls from the map.\nmap.removeControl(navigation);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_79","title":"Defined in","text":"<p>src/ui/map.ts:777</p>"},{"location":"API/classes/maplibregl.Map/#removefeaturestate","title":"removeFeatureState","text":"<p>\u25b8 removeFeatureState(<code>target</code>, <code>key?</code>): <code>Map</code></p> <p>Removes the <code>state</code> of a feature, setting it back to the default behavior. If only a <code>target.source</code> is specified, it will remove the state for all features from that source. If <code>target.id</code> is also specified, it will remove all keys for that feature's state. If <code>key</code> is also specified, it removes only that key from that feature's state. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_41","title":"Parameters","text":"Name Type Description <code>target</code> <code>FeatureIdentifier</code> Identifier of where to remove state. It can be a source, a feature, or a specific key of feature. Feature objects returned from Map#queryRenderedFeatures or event handlers can be used as feature identifiers. <code>key?</code> <code>string</code> (optional) The key in the feature state to reset."},{"location":"API/classes/maplibregl.Map/#returns_80","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Reset the entire state object for all features in the <code>my-source</code> source <pre><code>map.removeFeatureState({\n  source: 'my-source'\n});\n</code></pre></p> <p><code>Example</code></p> <p>When the mouse leaves the <code>my-layer</code> layer, reset the entire state object for the feature under the mouse <pre><code>map.on('mouseleave', 'my-layer', function(e) {\n  map.removeFeatureState({\n    source: 'my-source',\n    sourceLayer: 'my-source-layer',\n    id: e.features[0].id\n  });\n});\n</code></pre></p> <p><code>Example</code></p> <p>When the mouse leaves the <code>my-layer</code> layer, reset only the <code>hover</code> key-value pair in the state for the feature under the mouse <pre><code>map.on('mouseleave', 'my-layer', function(e) {\n  map.removeFeatureState({\n    source: 'my-source',\n    sourceLayer: 'my-source-layer',\n    id: e.features[0].id\n  }, 'hover');\n});\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_80","title":"Defined in","text":"<p>src/ui/map.ts:2844</p>"},{"location":"API/classes/maplibregl.Map/#removeimage","title":"removeImage","text":"<p>\u25b8 removeImage(<code>id</code>): <code>void</code></p> <p>Remove an image from a style. This can be an image from the style's original sprite or any images that have been added at runtime using Map#addImage.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_42","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/maplibregl.Map/#returns_81","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>// If an image with the ID 'cat' exists in\n// the style's sprite, remove it.\nif (map.hasImage('cat')) map.removeImage('cat');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_81","title":"Defined in","text":"<p>src/ui/map.ts:2299</p>"},{"location":"API/classes/maplibregl.Map/#removelayer","title":"removeLayer","text":"<p>\u25b8 removeLayer(<code>id</code>): <code>Map</code></p> <p>Removes the layer with the given ID from the map's style.</p> <p>An ErrorEvent will be fired if the image parameter is invald.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_43","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the layer to remove"},{"location":"API/classes/maplibregl.Map/#returns_82","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>If a layer with ID 'state-data' exists, remove it. <pre><code>if (map.getLayer('state-data')) map.removeLayer('state-data');\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_82","title":"Defined in","text":"<p>src/ui/map.ts:2460</p>"},{"location":"API/classes/maplibregl.Map/#removesource","title":"removeSource","text":"<p>\u25b8 removeSource(<code>id</code>): <code>Map</code></p> <p>Removes a source from the map's style.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_44","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the source to remove."},{"location":"API/classes/maplibregl.Map/#returns_83","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.removeSource('bathymetry-data');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_83","title":"Defined in","text":"<p>src/ui/map.ts:2070</p>"},{"location":"API/classes/maplibregl.Map/#removesprite","title":"removeSprite","text":"<p>\u25b8 removeSprite(<code>id</code>): <code>Map</code></p> <p>Removes the sprite from the map's style. Fires the <code>style</code> event.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_45","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the sprite to remove. If the sprite is declared as a single URL, the ID must be \"default\"."},{"location":"API/classes/maplibregl.Map/#returns_84","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.removeSprite('sprite-two');\nmap.removeSprite('default');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_84","title":"Defined in","text":"<p>src/ui/map.ts:2693</p>"},{"location":"API/classes/maplibregl.Map/#resetnorth","title":"resetNorth","text":"<p>\u25b8 resetNorth(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Rotates the map so that north is up (0\u00b0 bearing), with an animated transition.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_46","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_85","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_15","title":"Inherited from","text":"<p>Camera.resetNorth</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_85","title":"Defined in","text":"<p>src/ui/camera.ts:565</p>"},{"location":"API/classes/maplibregl.Map/#resetnorthpitch","title":"resetNorthPitch","text":"<p>\u25b8 resetNorthPitch(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Rotates and pitches the map so that north is up (0\u00b0 bearing) and pitch is 0\u00b0, with an animated transition.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_47","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_86","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_16","title":"Inherited from","text":"<p>Camera.resetNorthPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_86","title":"Defined in","text":"<p>src/ui/camera.ts:579</p>"},{"location":"API/classes/maplibregl.Map/#resize","title":"resize","text":"<p>\u25b8 resize(<code>eventData?</code>): <code>Map</code></p> <p>Resizes the map according to the dimensions of its <code>container</code> element.</p> <p>Checks if the map container size changed and updates the map if it has changed. This method must be called after the map's <code>container</code> is resized programmatically or when the map is shown after being initially hidden with CSS.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, and <code>resize</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_48","title":"Parameters","text":"Name Type Description <code>eventData?</code> <code>any</code> Additional properties to be passed to <code>movestart</code>, <code>move</code>, <code>resize</code>, and <code>moveend</code> events that get triggered as a result of resize. This can be useful for differentiating the source of an event (for example, user-initiated or programmatically-triggered events)."},{"location":"API/classes/maplibregl.Map/#returns_87","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Resize the map when the map container is shown after being initially hidden with CSS. <pre><code>let mapDiv = document.getElementById('map');\nif (mapDiv.style.visibility === true) map.resize();\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_87","title":"Defined in","text":"<p>src/ui/map.ts:835</p>"},{"location":"API/classes/maplibregl.Map/#rotateto","title":"rotateTo","text":"<p>\u25b8 rotateTo(<code>bearing</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Rotates the map to the specified bearing, with an animated transition. The bearing is the compass direction that is \"up\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_49","title":"Parameters","text":"Name Type Description <code>bearing</code> <code>number</code> The desired bearing. <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_88","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_17","title":"Inherited from","text":"<p>Camera.rotateTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_88","title":"Defined in","text":"<p>src/ui/camera.ts:550</p>"},{"location":"API/classes/maplibregl.Map/#setbearing","title":"setBearing","text":"<p>\u25b8 setBearing(<code>bearing</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the map's bearing (rotation). The bearing is the compass direction that is \"up\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p> <p>Equivalent to <code>jumpTo({bearing: bearing})</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_50","title":"Parameters","text":"Name Type Description <code>bearing</code> <code>number</code> The desired bearing. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_89","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Rotate the map to 90 degrees <pre><code>map.setBearing(90);\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_18","title":"Inherited from","text":"<p>Camera.setBearing</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_89","title":"Defined in","text":"<p>src/ui/camera.ts:506</p>"},{"location":"API/classes/maplibregl.Map/#setcenter","title":"setCenter","text":"<p>\u25b8 setCenter(<code>center</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the map's geographical centerpoint. Equivalent to <code>jumpTo({center: center})</code>.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_51","title":"Parameters","text":"Name Type Description <code>center</code> <code>LngLatLike</code> The centerpoint to set. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_90","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setCenter([-74, 38]);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#inherited-from_19","title":"Inherited from","text":"<p>Camera.setCenter</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_90","title":"Defined in","text":"<p>src/ui/camera.ts:343</p>"},{"location":"API/classes/maplibregl.Map/#setcooperativegestures","title":"setCooperativeGestures","text":"<p>\u25b8 setCooperativeGestures(<code>gestureOptions?</code>): <code>Map</code></p> <p>Sets or clears the map's cooperativeGestures option</p>"},{"location":"API/classes/maplibregl.Map/#parameters_52","title":"Parameters","text":"Name Type Description <code>gestureOptions?</code> <code>boolean</code> | <code>GestureOptions</code> If <code>true</code> or set to an options object, map is only accessible on desktop while holding Command/Ctrl and only accessible on mobile with two fingers. Interacting with the map using normal gestures will trigger an informational screen. With this option enabled, \"drag to pitch\" requires a three-finger gesture."},{"location":"API/classes/maplibregl.Map/#returns_91","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_91","title":"Defined in","text":"<p>src/ui/map.ts:1176</p>"},{"location":"API/classes/maplibregl.Map/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Map</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_53","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Map/#returns_92","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_20","title":"Inherited from","text":"<p>Camera.setEventedParent</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_92","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.Map/#setfeaturestate","title":"setFeatureState","text":"<p>\u25b8 setFeatureState(<code>feature</code>, <code>state</code>): <code>Map</code></p> <p>Sets the <code>state</code> of a feature. A feature's <code>state</code> is a set of user-defined key-value pairs that are assigned to a feature at runtime. When using this method, the <code>state</code> object is merged with any existing key-value pairs in the feature's state. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p> <p>This method can only be used with sources that have a <code>feature.id</code> attribute. The <code>feature.id</code> attribute can be defined in three ways: - For vector or GeoJSON sources, including an <code>id</code> attribute in the original data file. - For vector or GeoJSON sources, using the <code>promoteId</code> option at the time the source is defined. - For GeoJSON sources, using the <code>generateId</code> option to auto-assign an <code>id</code> based on the feature's index in the source data. If you change feature data using <code>map.getSource('some id').setData(..)</code>, you may need to re-apply state taking into account updated <code>id</code> values.</p> <p>Note: You can use the <code>feature-state</code> expression to access the values in a feature's state object for the purposes of styling.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_54","title":"Parameters","text":"Name Type Description <code>feature</code> <code>FeatureIdentifier</code> Feature identifier. Feature objects returned from Map#queryRenderedFeatures or event handlers can be used as feature identifiers. <code>state</code> <code>any</code> A set of key-value pairs. The values should be valid JSON types."},{"location":"API/classes/maplibregl.Map/#returns_93","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>// When the mouse moves over the `my-layer` layer, update\n// the feature state for the feature under the mouse\nmap.on('mousemove', 'my-layer', function(e) {\n  if (e.features.length &gt; 0) {\n    map.setFeatureState({\n      source: 'my-source',\n      sourceLayer: 'my-source-layer',\n      id: e.features[0].id,\n    }, {\n      hover: true\n    });\n  }\n});\n</code></pre> <p><code>See</code></p> <p>Create a hover effect</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_93","title":"Defined in","text":"<p>src/ui/map.ts:2792</p>"},{"location":"API/classes/maplibregl.Map/#setfilter","title":"setFilter","text":"<p>\u25b8 setFilter(<code>layerId</code>, <code>filter?</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the filter for the specified style layer.</p> <p>Filters control which features a style layer renders from its source. Any feature for which the filter expression evaluates to <code>true</code> will be rendered on the map. Those that are false will be hidden.</p> <p>Use <code>setFilter</code> to show a subset of your source data.</p> <p>To clear the filter, pass <code>null</code> or <code>undefined</code> as the second parameter.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_55","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to which the filter will be applied. <code>filter?</code> <code>FilterSpecification</code> The filter, conforming to the MapLibre Style Specification's filter definition. If <code>null</code> or <code>undefined</code> is provided, the function removes any existing filter from the layer. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_94","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Display only features with the 'name' property 'USA' <pre><code>map.setFilter('my-layer', ['==', ['get', 'name'], 'USA']);\n</code></pre></p> <p><code>Example</code></p> <p>Display only features with five or more 'available-spots' <pre><code>map.setFilter('bike-docks', ['&gt;=', ['get', 'available-spots'], 5]);\n</code></pre></p> <p><code>Example</code></p> <p>Remove the filter for the 'bike-docks' style layer <pre><code>map.setFilter('bike-docks', null);\n</code></pre></p> <p><code>See</code></p> <p>Create a timeline animation</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_94","title":"Defined in","text":"<p>src/ui/map.ts:2557</p>"},{"location":"API/classes/maplibregl.Map/#setglyphs","title":"setGlyphs","text":"<p>\u25b8 setGlyphs(<code>glyphsUrl</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the value of the style's glyphs property.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_56","title":"Parameters","text":"Name Type Description <code>glyphsUrl</code> <code>string</code> Glyph URL to set. Must conform to the MapLibre Style Specification. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_95","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setGlyphs('https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_95","title":"Defined in","text":"<p>src/ui/map.ts:2645</p>"},{"location":"API/classes/maplibregl.Map/#setlayerzoomrange","title":"setLayerZoomRange","text":"<p>\u25b8 setLayerZoomRange(<code>layerId</code>, <code>minzoom</code>, <code>maxzoom</code>): <code>Map</code></p> <p>Sets the zoom extent for the specified style layer. The zoom extent includes the minimum zoom level and maximum zoom level) at which the layer will be rendered.</p> <p>Note: For style layers using vector sources, style layers cannot be rendered at zoom levels lower than the minimum zoom level of the source layer because the data does not exist at those zoom levels. If the minimum zoom level of the source layer is higher than the minimum zoom level defined in the style layer, the style layer will not be rendered at all zoom levels in the zoom range.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_57","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to which the zoom extent will be applied. <code>minzoom</code> <code>number</code> The minimum zoom to set (0-24). <code>maxzoom</code> <code>number</code> The maximum zoom to set (0-24)."},{"location":"API/classes/maplibregl.Map/#returns_96","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setLayerZoomRange('my-layer', 2, 5);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_96","title":"Defined in","text":"<p>src/ui/map.ts:2518</p>"},{"location":"API/classes/maplibregl.Map/#setlayoutproperty","title":"setLayoutProperty","text":"<p>\u25b8 setLayoutProperty(<code>layerId</code>, <code>name</code>, <code>value</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the value of a layout property in the specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_58","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to set the layout property in. <code>name</code> <code>string</code> The name of the layout property to set. <code>value</code> <code>any</code> The value of the layout property. Must be of a type appropriate for the property, as defined in the MapLibre Style Specification. <code>options</code> <code>StyleSetterOptions</code> The options object."},{"location":"API/classes/maplibregl.Map/#returns_97","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setLayoutProperty('my-layer', 'visibility', 'none');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_97","title":"Defined in","text":"<p>src/ui/map.ts:2618</p>"},{"location":"API/classes/maplibregl.Map/#setlight","title":"setLight","text":"<p>\u25b8 setLight(<code>light</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the any combination of light values.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_59","title":"Parameters","text":"Name Type Description <code>light</code> <code>LightSpecification</code> Light properties to set. Must conform to the MapLibre Style Specification. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_98","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let layerVisibility = map.getLayoutProperty('my-layer', 'visibility');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_98","title":"Defined in","text":"<p>src/ui/map.ts:2741</p>"},{"location":"API/classes/maplibregl.Map/#setmaxbounds","title":"setMaxBounds","text":"<p>\u25b8 setMaxBounds(<code>bounds?</code>): <code>Map</code></p> <p>Sets or clears the map's geographical bounds.</p> <p>Pan and zoom operations are constrained within these bounds. If a pan or zoom is performed that would display regions outside these bounds, the map will instead display a position and zoom level as close as possible to the operation's request while still remaining within the bounds.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_60","title":"Parameters","text":"Name Type Description <code>bounds?</code> <code>LngLatBoundsLike</code> The maximum bounds to set. If <code>null</code> or <code>undefined</code> is provided, the function removes the map's maximum bounds."},{"location":"API/classes/maplibregl.Map/#returns_99","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Define bounds that conform to the <code>LngLatBoundsLike</code> object as set the max bounds. <pre><code>let bounds = [\n  [-74.04728, 40.68392], // [west, south]\n  [-73.91058, 40.87764]  // [east, north]\n];\nmap.setMaxBounds(bounds);\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_99","title":"Defined in","text":"<p>src/ui/map.ts:958</p>"},{"location":"API/classes/maplibregl.Map/#setmaxpitch","title":"setMaxPitch","text":"<p>\u25b8 setMaxPitch(<code>maxPitch?</code>): <code>Map</code></p> <p>Sets or clears the map's maximum pitch. If the map's current pitch is higher than the new maximum, the map will pitch to the new maximum.</p> <p>A ErrorEvent event will be fired if maxPitch is out of bounds.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_61","title":"Parameters","text":"Name Type Description <code>maxPitch?</code> <code>number</code> The maximum pitch to set (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. If <code>null</code> or <code>undefined</code> is provided, the function removes the current maximum pitch (sets it to 60)."},{"location":"API/classes/maplibregl.Map/#returns_100","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_100","title":"Defined in","text":"<p>src/ui/map.ts:1098</p>"},{"location":"API/classes/maplibregl.Map/#setmaxzoom","title":"setMaxZoom","text":"<p>\u25b8 setMaxZoom(<code>maxZoom?</code>): <code>Map</code></p> <p>Sets or clears the map's maximum zoom level. If the map's current zoom level is higher than the new maximum, the map will zoom to the new maximum.</p> <p>A ErrorEvent event will be fired if minZoom is out of bounds.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_62","title":"Parameters","text":"Name Type Description <code>maxZoom?</code> <code>number</code> The maximum zoom level to set. If <code>null</code> or <code>undefined</code> is provided, the function removes the current maximum zoom (sets it to 22)."},{"location":"API/classes/maplibregl.Map/#returns_101","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setMaxZoom(18.75);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_101","title":"Defined in","text":"<p>src/ui/map.ts:1024</p>"},{"location":"API/classes/maplibregl.Map/#setminpitch","title":"setMinPitch","text":"<p>\u25b8 setMinPitch(<code>minPitch?</code>): <code>Map</code></p> <p>Sets or clears the map's minimum pitch. If the map's current pitch is lower than the new minimum, the map will pitch to the new minimum.</p> <p>A ErrorEvent event will be fired if minPitch is out of bounds.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_63","title":"Parameters","text":"Name Type Description <code>minPitch?</code> <code>number</code> The minimum pitch to set (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. If <code>null</code> or <code>undefined</code> is provided, the function removes the current minimum pitch (i.e. sets it to 0)."},{"location":"API/classes/maplibregl.Map/#returns_102","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_102","title":"Defined in","text":"<p>src/ui/map.ts:1061</p>"},{"location":"API/classes/maplibregl.Map/#setminzoom","title":"setMinZoom","text":"<p>\u25b8 setMinZoom(<code>minZoom?</code>): <code>Map</code></p> <p>Sets or clears the map's minimum zoom level. If the map's current zoom level is lower than the new minimum, the map will zoom to the new minimum.</p> <p>It is not always possible to zoom out and reach the set <code>minZoom</code>. Other factors such as map height may restrict zooming. For example, if the map is 512px tall it will not be possible to zoom below zoom 0 no matter what the <code>minZoom</code> is set to.</p> <p>A ErrorEvent event will be fired if minZoom is out of bounds.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_64","title":"Parameters","text":"Name Type Description <code>minZoom?</code> <code>number</code> The minimum zoom level to set (-2 - 24). If <code>null</code> or <code>undefined</code> is provided, the function removes the current minimum zoom (i.e. sets it to -2)."},{"location":"API/classes/maplibregl.Map/#returns_103","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setMinZoom(12.25);\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_103","title":"Defined in","text":"<p>src/ui/map.ts:983</p>"},{"location":"API/classes/maplibregl.Map/#setpadding","title":"setPadding","text":"<p>\u25b8 setPadding(<code>padding</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the padding in pixels around the viewport.</p> <p>Equivalent to <code>jumpTo({padding: padding})</code>.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_65","title":"Parameters","text":"Name Type Description <code>padding</code> <code>PaddingOptions</code> The desired padding. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_104","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Sets a left padding of 300px, and a top padding of 50px <pre><code>map.setPadding({ left: 300, top: 50 });\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_21","title":"Inherited from","text":"<p>Camera.setPadding</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_104","title":"Defined in","text":"<p>src/ui/camera.ts:534</p>"},{"location":"API/classes/maplibregl.Map/#setpaintproperty","title":"setPaintProperty","text":"<p>\u25b8 setPaintProperty(<code>layerId</code>, <code>name</code>, <code>value</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the value of a paint property in the specified style layer.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_66","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> The ID of the layer to set the paint property in. <code>name</code> <code>string</code> The name of the paint property to set. <code>value</code> <code>any</code> The value of the paint property to set. Must be of a type appropriate for the property, as defined in the MapLibre Style Specification. Pass <code>null</code> to unset the existing value. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_105","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setPaintProperty('my-layer', 'fill-color', '#faafee');\n</code></pre> <p><code>See</code></p> <ul> <li>Change a layer's color with buttons</li> <li>Create a draggable point</li> </ul>"},{"location":"API/classes/maplibregl.Map/#defined-in_105","title":"Defined in","text":"<p>src/ui/map.ts:2589</p>"},{"location":"API/classes/maplibregl.Map/#setpitch","title":"setPitch","text":"<p>\u25b8 setPitch(<code>pitch</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the map's pitch (tilt). Equivalent to <code>jumpTo({pitch: pitch})</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, <code>pitchstart</code>, and <code>pitchend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_67","title":"Parameters","text":"Name Type Description <code>pitch</code> <code>number</code> The pitch to set, measured in degrees away from the plane of the screen (0-60). <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_106","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_22","title":"Inherited from","text":"<p>Camera.setPitch</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_106","title":"Defined in","text":"<p>src/ui/camera.ts:621</p>"},{"location":"API/classes/maplibregl.Map/#setpixelratio","title":"setPixelRatio","text":"<p>\u25b8 setPixelRatio(<code>pixelRatio</code>): <code>void</code></p> <p>Sets the map's pixel ratio. This allows to override <code>devicePixelRatio</code>. After this call, the canvas' <code>width</code> attribute will be <code>container.clientWidth * pixelRatio</code> and its height attribute will be <code>container.clientHeight * pixelRatio</code>. Set this to null to disable <code>devicePixelRatio</code> override. Note that the pixel ratio actually applied may be lower to respect maxCanvasSize.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_68","title":"Parameters","text":"Name Type Description <code>pixelRatio</code> <code>number</code> The pixel ratio."},{"location":"API/classes/maplibregl.Map/#returns_107","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Map/#defined-in_107","title":"Defined in","text":"<p>src/ui/map.ts:906</p>"},{"location":"API/classes/maplibregl.Map/#setrenderworldcopies","title":"setRenderWorldCopies","text":"<p>\u25b8 setRenderWorldCopies(<code>renderWorldCopies?</code>): <code>Map</code></p> <p>Sets the state of <code>renderWorldCopies</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_69","title":"Parameters","text":"Name Type Description <code>renderWorldCopies?</code> <code>boolean</code> If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>: - When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude. - Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level. <code>undefined</code> is treated as <code>true</code>, <code>null</code> is treated as <code>false</code>."},{"location":"API/classes/maplibregl.Map/#returns_108","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setRenderWorldCopies(true);\n</code></pre> <p><code>See</code></p> <p>Render world copies</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_108","title":"Defined in","text":"<p>src/ui/map.ts:1156</p>"},{"location":"API/classes/maplibregl.Map/#setsprite","title":"setSprite","text":"<p>\u25b8 setSprite(<code>spriteUrl</code>, <code>options?</code>): <code>Map</code></p> <p>Sets the value of the style's sprite property.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_70","title":"Parameters","text":"Name Type Description <code>spriteUrl</code> <code>string</code> Sprite URL to set. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_109","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setSprite('YOUR_SPRITE_URL');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_109","title":"Defined in","text":"<p>src/ui/map.ts:2719</p>"},{"location":"API/classes/maplibregl.Map/#setstyle","title":"setStyle","text":"<p>\u25b8 setStyle(<code>style</code>, <code>options?</code>): <code>Map</code></p> <p>Updates the map's MapLibre style object with a new value.</p> <p>If a style is already set when this is used and options.diff is set to true, the map renderer will attempt to compare the given style against the map's current state and perform only the changes necessary to make the map style match the desired state. Changes in sprites (images used for icons and patterns) and glyphs (fonts for label text) cannot be diffed. If the sprites or fonts used in the current style and the given style are different in any way, the map renderer will force a full update, removing the current style and building the given one from scratch.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_71","title":"Parameters","text":"Name Type Description <code>style</code> <code>string</code> | <code>StyleSpecification</code> A JSON object conforming to the schema described in the MapLibre Style Specification, or a URL to such JSON. <code>options?</code> <code>StyleSwapOptions</code> &amp; <code>StyleOptions</code> The options object."},{"location":"API/classes/maplibregl.Map/#returns_110","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setStyle(\"https://demotiles.maplibre.org/style.json\");\n\nmap.setStyle('https://demotiles.maplibre.org/style.json', {\n  transformStyle: (previousStyle, nextStyle) =&gt; ({\n      ...nextStyle,\n      sources: {\n          ...nextStyle.sources,\n          // copy a source from previous style\n          'osm': previousStyle.sources.osm\n      },\n      layers: [\n          // background layer\n          nextStyle.layers[0],\n          // copy a layer from previous style\n          previousStyle.layers[0],\n          // other layers from the next style\n          ...nextStyle.layers.slice(1).map(layer =&gt; {\n              // hide the layers we don't need from demotiles style\n              if (layer.id.startsWith('geolines')) {\n                  layer.layout = {...layer.layout || {}, visibility: 'none'};\n              // filter out US polygons\n              } else if (layer.id.startsWith('coastline') || layer.id.startsWith('countries')) {\n                  layer.filter = ['!=', ['get', 'ADM0_A3'], 'USA'];\n              }\n              return layer;\n          })\n      ]\n  })\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_110","title":"Defined in","text":"<p>src/ui/map.ts:1743</p>"},{"location":"API/classes/maplibregl.Map/#setterrain","title":"setTerrain","text":"<p>\u25b8 setTerrain(<code>options</code>): <code>Map</code></p> <p>Loads a 3D terrain mesh, based on a \"raster-dem\" source.</p> <p>Triggers the <code>terrain</code> event.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_72","title":"Parameters","text":"Name Type Description <code>options</code> <code>TerrainSpecification</code> Options object."},{"location":"API/classes/maplibregl.Map/#returns_111","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setTerrain({ source: 'terrain' });\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_111","title":"Defined in","text":"<p>src/ui/map.ts:1966</p>"},{"location":"API/classes/maplibregl.Map/#settransformrequest","title":"setTransformRequest","text":"<p>\u25b8 setTransformRequest(<code>transformRequest</code>): <code>Map</code></p> <p>Updates the requestManager's transform request with a new function</p>"},{"location":"API/classes/maplibregl.Map/#parameters_73","title":"Parameters","text":"Name Type Description <code>transformRequest</code> <code>RequestTransformFunction</code> A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests. Expected to return an object with a <code>url</code> property and optionally <code>headers</code> and <code>credentials</code> properties"},{"location":"API/classes/maplibregl.Map/#returns_112","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>map.setTransformRequest((url: string, resourceType: string) =&gt; {});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_112","title":"Defined in","text":"<p>src/ui/map.ts:1772</p>"},{"location":"API/classes/maplibregl.Map/#setzoom","title":"setZoom","text":"<p>\u25b8 setZoom(<code>zoom</code>, <code>eventData?</code>): <code>Map</code></p> <p>Sets the map's zoom level. Equivalent to <code>jumpTo({zoom: zoom})</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, and <code>zoomend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_74","title":"Parameters","text":"Name Type Description <code>zoom</code> <code>number</code> The zoom level to set (0-20). <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_113","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Zoom to the zoom level 5 without an animated transition <pre><code>map.setZoom(5);\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_23","title":"Inherited from","text":"<p>Camera.setZoom</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_113","title":"Defined in","text":"<p>src/ui/camera.ts:411</p>"},{"location":"API/classes/maplibregl.Map/#snaptonorth","title":"snapToNorth","text":"<p>\u25b8 snapToNorth(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Snaps the map so that north is up (0\u00b0 bearing), if the current bearing is close enough to it (i.e. within the <code>bearingSnap</code> threshold).</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_75","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_114","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_24","title":"Inherited from","text":"<p>Camera.snapToNorth</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_114","title":"Defined in","text":"<p>src/ui/camera.ts:598</p>"},{"location":"API/classes/maplibregl.Map/#stop","title":"stop","text":"<p>\u25b8 stop(): <code>Map</code></p> <p>Stops any animated transition underway.</p>"},{"location":"API/classes/maplibregl.Map/#returns_115","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_25","title":"Inherited from","text":"<p>Camera.stop</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_115","title":"Defined in","text":"<p>src/ui/camera.ts:1381</p>"},{"location":"API/classes/maplibregl.Map/#triggerrepaint","title":"triggerRepaint","text":"<p>\u25b8 triggerRepaint(): <code>void</code></p> <p>Trigger the rendering of a single frame. Use this method with custom layers to repaint the map when the layer changes. Calling this multiple times before the next frame is rendered will still result in only a single frame being rendered.</p>"},{"location":"API/classes/maplibregl.Map/#returns_116","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.triggerRepaint();\n</code></pre> <p><code>See</code></p> <ul> <li>Add a 3D model</li> <li>Add an animated icon to the map</li> </ul>"},{"location":"API/classes/maplibregl.Map/#defined-in_116","title":"Defined in","text":"<p>src/ui/map.ts:3324</p>"},{"location":"API/classes/maplibregl.Map/#unproject","title":"unproject","text":"<p>\u25b8 unproject(<code>point</code>): <code>LngLat</code></p> <p>Returns a LngLat representing geographical coordinates that correspond to the specified pixel coordinates.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_76","title":"Parameters","text":"Name Type Description <code>point</code> <code>PointLike</code> The pixel coordinates to unproject."},{"location":"API/classes/maplibregl.Map/#returns_117","title":"Returns","text":"<p><code>LngLat</code></p> <p>The LngLat corresponding to <code>point</code>.</p> <p><code>Example</code></p> <pre><code>map.on('click', function(e) {\n  // When the map is clicked, get the geographic coordinate.\n  let coordinate = map.unproject(e.point);\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_117","title":"Defined in","text":"<p>src/ui/map.ts:1217</p>"},{"location":"API/classes/maplibregl.Map/#updateimage","title":"updateImage","text":"<p>\u25b8 updateImage(<code>id</code>, <code>image</code>): <code>Map</code></p> <p>Update an existing image in a style. This image can be displayed on the map like any other icon in the style's sprite using the image's ID with <code>icon-image</code>, <code>background-pattern</code>, <code>fill-pattern</code>, or <code>line-pattern</code>.</p> <p>An ErrorEvent will be fired if the image parameter is invald.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_77","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The ID of the image. <code>image</code> <code>ImageBitmap</code> | <code>HTMLImageElement</code> | <code>ImageData</code> | <code>StyleImageInterface</code> | { <code>data</code>: <code>Uint8Array</code> | <code>Uint8ClampedArray</code> ; <code>height</code>: <code>number</code> ; <code>width</code>: <code>number</code>  } The image as an <code>HTMLImageElement</code>, <code>ImageData</code>, <code>ImageBitmap</code> or object with <code>width</code>, <code>height</code>, and <code>data</code> properties with the same format as <code>ImageData</code>."},{"location":"API/classes/maplibregl.Map/#returns_118","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>// If an image with the ID 'cat' already exists in the style's sprite,\n// replace that image with a new image, 'other-cat-icon.png'.\nif (map.hasImage('cat')) map.updateImage('cat', './other-cat-icon.png');\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#defined-in_118","title":"Defined in","text":"<p>src/ui/map.ts:2208</p>"},{"location":"API/classes/maplibregl.Map/#zoomin","title":"zoomIn","text":"<p>\u25b8 zoomIn(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Increases the map's zoom level by 1.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, and <code>zoomend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_78","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_119","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Zoom the map in one level with a custom animation duration <pre><code>map.zoomIn({duration: 1000});\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_26","title":"Inherited from","text":"<p>Camera.zoomIn</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_119","title":"Defined in","text":"<p>src/ui/camera.ts:456</p>"},{"location":"API/classes/maplibregl.Map/#zoomout","title":"zoomOut","text":"<p>\u25b8 zoomOut(<code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Decreases the map's zoom level by 1.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, and <code>zoomend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_79","title":"Parameters","text":"Name Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_120","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Zoom the map out one level with a custom animation offset <pre><code>map.zoomOut({offset: [80, 60]});\n</code></pre></p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_27","title":"Inherited from","text":"<p>Camera.zoomOut</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_120","title":"Defined in","text":"<p>src/ui/camera.ts:475</p>"},{"location":"API/classes/maplibregl.Map/#zoomto","title":"zoomTo","text":"<p>\u25b8 zoomTo(<code>zoom</code>, <code>options?</code>, <code>eventData?</code>): <code>Map</code></p> <p>Zooms the map to the specified zoom level, with an animated transition.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, and <code>zoomend</code>.</p>"},{"location":"API/classes/maplibregl.Map/#parameters_80","title":"Parameters","text":"Name Type Description <code>zoom</code> <code>number</code> The zoom level to transition to. <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/maplibregl.Map/#returns_121","title":"Returns","text":"<p><code>Map</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>// Zoom to the zoom level 5 without an animated transition\nmap.zoomTo(5);\n// Zoom to the zoom level 8 with an animated transition\nmap.zoomTo(8, {\n  duration: 2000,\n  offset: [100, 50]\n});\n</code></pre>"},{"location":"API/classes/maplibregl.Map/#inherited-from_28","title":"Inherited from","text":"<p>Camera.zoomTo</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_121","title":"Defined in","text":"<p>src/ui/camera.ts:436</p>"},{"location":"API/classes/maplibregl.Map/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.Map/#boxzoom","title":"boxZoom","text":"<p>\u2022 boxZoom: <code>BoxZoomHandler</code></p> <p>The map's BoxZoomHandler, which implements zooming using a drag gesture with the Shift key pressed. Find more details and examples using <code>boxZoom</code> in the BoxZoomHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_122","title":"Defined in","text":"<p>src/ui/map.ts:521</p>"},{"location":"API/classes/maplibregl.Map/#doubleclickzoom","title":"doubleClickZoom","text":"<p>\u2022 doubleClickZoom: <code>DoubleClickZoomHandler</code></p> <p>The map's DoubleClickZoomHandler, which allows the user to zoom by double clicking. Find more details and examples using <code>doubleClickZoom</code> in the DoubleClickZoomHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_123","title":"Defined in","text":"<p>src/ui/map.ts:546</p>"},{"location":"API/classes/maplibregl.Map/#dragpan","title":"dragPan","text":"<p>\u2022 dragPan: <code>DragPanHandler</code></p> <p>The map's DragPanHandler, which implements dragging the map with a mouse or touch gesture. Find more details and examples using <code>dragPan</code> in the DragPanHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_124","title":"Defined in","text":"<p>src/ui/map.ts:534</p>"},{"location":"API/classes/maplibregl.Map/#dragrotate","title":"dragRotate","text":"<p>\u2022 dragRotate: <code>DragRotateHandler</code></p> <p>The map's DragRotateHandler, which implements rotating the map while dragging with the right mouse button or with the Control key pressed. Find more details and examples using <code>dragRotate</code> in the DragRotateHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_125","title":"Defined in","text":"<p>src/ui/map.ts:528</p>"},{"location":"API/classes/maplibregl.Map/#keyboard","title":"keyboard","text":"<p>\u2022 keyboard: <code>KeyboardHandler</code></p> <p>The map's KeyboardHandler, which allows the user to zoom, rotate, and pan the map using keyboard shortcuts. Find more details and examples using <code>keyboard</code> in the KeyboardHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_126","title":"Defined in","text":"<p>src/ui/map.ts:540</p>"},{"location":"API/classes/maplibregl.Map/#scrollzoom","title":"scrollZoom","text":"<p>\u2022 scrollZoom: <code>ScrollZoomHandler</code></p> <p>The map's ScrollZoomHandler, which implements zooming in and out with a scroll wheel or trackpad. Find more details and examples using <code>scrollZoom</code> in the ScrollZoomHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_127","title":"Defined in","text":"<p>src/ui/map.ts:515</p>"},{"location":"API/classes/maplibregl.Map/#touchpitch","title":"touchPitch","text":"<p>\u2022 touchPitch: <code>TwoFingersTouchPitchHandler</code></p> <p>The map's TwoFingersTouchPitchHandler, which allows the user to pitch the map with touch gestures. Find more details and examples using <code>touchPitch</code> in the TwoFingersTouchPitchHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_128","title":"Defined in","text":"<p>src/ui/map.ts:558</p>"},{"location":"API/classes/maplibregl.Map/#touchzoomrotate","title":"touchZoomRotate","text":"<p>\u2022 touchZoomRotate: <code>TwoFingersTouchZoomRotateHandler</code></p> <p>The map's TwoFingersTouchZoomRotateHandler, which allows the user to zoom or rotate the map with touch gestures. Find more details and examples using <code>touchZoomRotate</code> in the TwoFingersTouchZoomRotateHandler section.</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_129","title":"Defined in","text":"<p>src/ui/map.ts:552</p>"},{"location":"API/classes/maplibregl.Map/#transformcameraupdate","title":"transformCameraUpdate","text":"<p>\u2022 transformCameraUpdate: <code>CameraUpdateTransformFunction</code></p> <p>A callback used to defer camera updates or apply arbitrary constraints. If specified, this Camera instance can be used as a stateless component in React etc.</p>"},{"location":"API/classes/maplibregl.Map/#inherited-from_29","title":"Inherited from","text":"<p>Camera.transformCameraUpdate</p>"},{"location":"API/classes/maplibregl.Map/#defined-in_130","title":"Defined in","text":"<p>src/ui/camera.ts:297</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/","title":"Class: MapMouseEvent","text":"<p>maplibregl.MapMouseEvent</p> <p><code>MapMouseEvent</code> is the event type for mouse-related map events.</p> <p><code>Example</code></p> <pre><code>// The `click` event is an example of a `MapMouseEvent`.\n// Set up an event listener on the map.\nmap.on('click', function(e) {\n  // The event object (e) contains information like the\n  // coordinates of the point on the map that was clicked.\n  console.log('A click event has occurred at ' + e.lngLat);\n});\n</code></pre>"},{"location":"API/classes/maplibregl.MapMouseEvent/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Event</code></li> </ul> <p>\u21b3 <code>MapMouseEvent</code></p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#implements","title":"Implements","text":"<ul> <li><code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code>&gt;</li> </ul>"},{"location":"API/classes/maplibregl.MapMouseEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.MapMouseEvent/#defaultprevented","title":"defaultPrevented","text":"<p>\u2022 <code>get</code> defaultPrevented(): <code>boolean</code></p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:516</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.MapMouseEvent/#preventdefault","title":"preventDefault","text":"<p>\u25b8 preventDefault(): <code>void</code></p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the following default map behaviors:</p> <ul> <li>On <code>mousedown</code> events, the behavior of DragPanHandler</li> <li>On <code>mousedown</code> events, the behavior of DragRotateHandler</li> <li>On <code>mousedown</code> events, the behavior of BoxZoomHandler</li> <li>On <code>dblclick</code> events, the behavior of DoubleClickZoomHandler</li> </ul>"},{"location":"API/classes/maplibregl.MapMouseEvent/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_1","title":"Defined in","text":"<p>src/ui/events.ts:509</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.MapMouseEvent/#lnglat","title":"lngLat","text":"<p>\u2022 lngLat: <code>LngLat</code></p> <p>The geographic location on the map of the mouse cursor.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_2","title":"Defined in","text":"<p>src/ui/events.ts:496</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#originalevent","title":"originalEvent","text":"<p>\u2022 originalEvent: <code>MouseEvent</code></p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#implementation-of","title":"Implementation of","text":"<p>MapLibreEvent.originalEvent</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_3","title":"Defined in","text":"<p>src/ui/events.ts:486</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#point","title":"point","text":"<p>\u2022 point: <code>Point</code></p> <p>The pixel coordinates of the mouse cursor, relative to the map and measured from the top left corner.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_4","title":"Defined in","text":"<p>src/ui/events.ts:491</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#target","title":"target","text":"<p>\u2022 target: <code>Map</code></p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#implementation-of_1","title":"Implementation of","text":"<p>MapLibreEvent.target</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_5","title":"Defined in","text":"<p>src/ui/events.ts:481</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#type","title":"type","text":"<p>\u2022 type: <code>\"click\"</code> | <code>\"contextmenu\"</code> | <code>\"dblclick\"</code> | <code>\"mousedown\"</code> | <code>\"mouseenter\"</code> | <code>\"mouseleave\"</code> | <code>\"mousemove\"</code> | <code>\"mouseout\"</code> | <code>\"mouseover\"</code> | <code>\"mouseup\"</code></p> <p>The event type</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#implementation-of_2","title":"Implementation of","text":"<p>MapLibreEvent.type</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#overrides","title":"Overrides","text":"<p>Event.type</p>"},{"location":"API/classes/maplibregl.MapMouseEvent/#defined-in_6","title":"Defined in","text":"<p>src/ui/events.ts:476</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/","title":"Class: MapTouchEvent","text":"<p>maplibregl.MapTouchEvent</p> <p><code>MapTouchEvent</code> is the event type for touch-related map events.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Event</code></li> </ul> <p>\u21b3 <code>MapTouchEvent</code></p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#implements","title":"Implements","text":"<ul> <li><code>MapLibreEvent</code>\\&lt;<code>TouchEvent</code>&gt;</li> </ul>"},{"location":"API/classes/maplibregl.MapTouchEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.MapTouchEvent/#defaultprevented","title":"defaultPrevented","text":"<p>\u2022 <code>get</code> defaultPrevented(): <code>boolean</code></p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:591</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.MapTouchEvent/#preventdefault","title":"preventDefault","text":"<p>\u25b8 preventDefault(): <code>void</code></p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the following default map behaviors:</p> <ul> <li>On <code>touchstart</code> events, the behavior of DragPanHandler</li> <li>On <code>touchstart</code> events, the behavior of TwoFingersTouchZoomRotateHandler</li> </ul>"},{"location":"API/classes/maplibregl.MapTouchEvent/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_1","title":"Defined in","text":"<p>src/ui/events.ts:584</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.MapTouchEvent/#lnglat","title":"lngLat","text":"<p>\u2022 lngLat: <code>LngLat</code></p> <p>The geographic location on the map of the center of the touch event points.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_2","title":"Defined in","text":"<p>src/ui/events.ts:555</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#lnglats","title":"lngLats","text":"<p>\u2022 lngLats: <code>LngLat</code>[]</p> <p>The geographical locations on the map corresponding to a touch event's <code>touches</code> property.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_3","title":"Defined in","text":"<p>src/ui/events.ts:573</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#originalevent","title":"originalEvent","text":"<p>\u2022 originalEvent: <code>TouchEvent</code></p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#implementation-of","title":"Implementation of","text":"<p>MapLibreEvent.originalEvent</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_4","title":"Defined in","text":"<p>src/ui/events.ts:550</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#point","title":"point","text":"<p>\u2022 point: <code>Point</code></p> <p>The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left corner.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_5","title":"Defined in","text":"<p>src/ui/events.ts:561</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#points","title":"points","text":"<p>\u2022 points: <code>Point</code>[]</p> <p>The array of pixel coordinates corresponding to a touch event's <code>touches</code> property.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_6","title":"Defined in","text":"<p>src/ui/events.ts:567</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#target","title":"target","text":"<p>\u2022 target: <code>Map</code></p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#implementation-of_1","title":"Implementation of","text":"<p>MapLibreEvent.target</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_7","title":"Defined in","text":"<p>src/ui/events.ts:545</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#type","title":"type","text":"<p>\u2022 type: <code>\"touchcancel\"</code> | <code>\"touchend\"</code> | <code>\"touchmove\"</code> | <code>\"touchstart\"</code></p> <p>The event type.</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#implementation-of_2","title":"Implementation of","text":"<p>MapLibreEvent.type</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#overrides","title":"Overrides","text":"<p>Event.type</p>"},{"location":"API/classes/maplibregl.MapTouchEvent/#defined-in_8","title":"Defined in","text":"<p>src/ui/events.ts:540</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/","title":"Class: MapWheelEvent","text":"<p>maplibregl.MapWheelEvent</p> <p><code>MapWheelEvent</code> is the event type for the <code>wheel</code> map event.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Event</code></li> </ul> <p>\u21b3 <code>MapWheelEvent</code></p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/maplibregl.MapWheelEvent/#defaultprevented","title":"defaultPrevented","text":"<p>\u2022 <code>get</code> defaultPrevented(): <code>boolean</code></p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:643</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.MapWheelEvent/#constructor","title":"constructor","text":"<p>\u2022 new MapWheelEvent(<code>type</code>, <code>map</code>, <code>originalEvent</code>): <code>MapWheelEvent</code></p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#parameters","title":"Parameters","text":"Name Type <code>type</code> <code>string</code> <code>map</code> <code>Map</code> <code>originalEvent</code> <code>WheelEvent</code>"},{"location":"API/classes/maplibregl.MapWheelEvent/#returns_1","title":"Returns","text":"<p><code>MapWheelEvent</code></p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#overrides","title":"Overrides","text":"<p>Event.constructor</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_1","title":"Defined in","text":"<p>src/ui/events.ts:650</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.MapWheelEvent/#preventdefault","title":"preventDefault","text":"<p>\u25b8 preventDefault(): <code>void</code></p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the behavior of ScrollZoomHandler.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_2","title":"Defined in","text":"<p>src/ui/events.ts:636</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.MapWheelEvent/#originalevent","title":"originalEvent","text":"<p>\u2022 originalEvent: <code>WheelEvent</code></p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_3","title":"Defined in","text":"<p>src/ui/events.ts:629</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#target","title":"target","text":"<p>\u2022 target: <code>Map</code></p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_4","title":"Defined in","text":"<p>src/ui/events.ts:624</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#type","title":"type","text":"<p>\u2022 type: <code>\"wheel\"</code></p> <p>The event type.</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#overrides_1","title":"Overrides","text":"<p>Event.type</p>"},{"location":"API/classes/maplibregl.MapWheelEvent/#defined-in_5","title":"Defined in","text":"<p>src/ui/events.ts:619</p>"},{"location":"API/classes/maplibregl.Marker/","title":"Class: Marker","text":"<p>maplibregl.Marker</p> <p>Creates a marker component</p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker()\n  .setLngLat([30.5, 50.5])\n  .addTo(map);\n</code></pre> <p><code>Example</code></p> <p>Set options <pre><code>let marker = new maplibregl.Marker({\n    color: \"#FFFFFF\",\n    draggable: true\n  }).setLngLat([30.5, 50.5])\n  .addTo(map);\n</code></pre></p> <p><code>See</code></p> <ul> <li>Add custom icons with Markers</li> <li>Create a draggable Marker</li> </ul>"},{"location":"API/classes/maplibregl.Marker/#events","title":"Events","text":"<p><code>dragstart</code> Fired when dragging starts, <code>marker</code> object that is being dragged</p> <p><code>drag</code> Fired while dragging. <code>marker</code> object that is being dragged</p> <p><code>dragend</code> Fired when the marker is finished being dragged, <code>marker</code> object that was dragged</p>"},{"location":"API/classes/maplibregl.Marker/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>Marker</code></p>"},{"location":"API/classes/maplibregl.Marker/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.Marker/#constructor","title":"constructor","text":"<p>\u2022 new Marker(<code>options?</code>): <code>Marker</code></p>"},{"location":"API/classes/maplibregl.Marker/#parameters","title":"Parameters","text":"Name Type Description <code>options?</code> <code>MarkerOptions</code> the options"},{"location":"API/classes/maplibregl.Marker/#returns","title":"Returns","text":"<p><code>Marker</code></p>"},{"location":"API/classes/maplibregl.Marker/#overrides","title":"Overrides","text":"<p>Evented.constructor</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in","title":"Defined in","text":"<p>src/ui/marker.ts:136</p>"},{"location":"API/classes/maplibregl.Marker/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Marker/#addclassname","title":"addClassName","text":"<p>\u25b8 addClassName(<code>className</code>): <code>void</code></p> <p>Adds a CSS class to the marker element.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_1","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> on-empty string with CSS class name to add to marker element"},{"location":"API/classes/maplibregl.Marker/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker()\nmarker.addClassName('some-class')\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#defined-in_1","title":"Defined in","text":"<p>src/ui/marker.ts:586</p>"},{"location":"API/classes/maplibregl.Marker/#addto","title":"addTo","text":"<p>\u25b8 addTo(<code>map</code>): <code>Marker</code></p> <p>Attaches the <code>Marker</code> to a <code>Map</code> object.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_2","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The MapLibre GL JS map to add the marker to."},{"location":"API/classes/maplibregl.Marker/#returns_2","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker()\n  .setLngLat([30.5, 50.5])\n  .addTo(map); // add the marker to the map\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#defined-in_2","title":"Defined in","text":"<p>src/ui/marker.ts:294</p>"},{"location":"API/classes/maplibregl.Marker/#getelement","title":"getElement","text":"<p>\u25b8 getElement(): <code>HTMLElement</code></p> <p>Returns the <code>Marker</code>'s HTML element.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_3","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>element</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_3","title":"Defined in","text":"<p>src/ui/marker.ts:391</p>"},{"location":"API/classes/maplibregl.Marker/#getlnglat","title":"getLngLat","text":"<p>\u25b8 getLngLat(): <code>LngLat</code></p> <p>Get the marker's geographical location.</p> <p>The longitude of the result may differ by a multiple of 360 degrees from the longitude previously set by <code>setLngLat</code> because <code>Marker</code> wraps the anchor longitude across copies of the world to keep the marker on screen.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_4","title":"Returns","text":"<p><code>LngLat</code></p> <p>A LngLat describing the marker's location.</p> <p><code>Example</code></p> <pre><code>// Store the marker's longitude and latitude coordinates in a variable\nlet lngLat = marker.getLngLat();\n// Print the marker's longitude and latitude values in the console\nconsole.log('Longitude: ' + lngLat.lng + ', Latitude: ' + lngLat.lat )\n</code></pre> <p><code>See</code></p> <p>Create a draggable Marker</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_4","title":"Defined in","text":"<p>src/ui/marker.ts:361</p>"},{"location":"API/classes/maplibregl.Marker/#getoffset","title":"getOffset","text":"<p>\u25b8 getOffset(): <code>Point</code></p> <p>Get the marker's offset.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_5","title":"Returns","text":"<p><code>Point</code></p> <p>The marker's screen coordinates in pixels.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_5","title":"Defined in","text":"<p>src/ui/marker.ts:560</p>"},{"location":"API/classes/maplibregl.Marker/#getpitchalignment","title":"getPitchAlignment","text":"<p>\u25b8 getPitchAlignment(): <code>Alignment</code></p> <p>Returns the current <code>pitchAlignment</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_6","title":"Returns","text":"<p><code>Alignment</code></p> <p>The current pitch alignment of the marker in degrees.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_6","title":"Defined in","text":"<p>src/ui/marker.ts:768</p>"},{"location":"API/classes/maplibregl.Marker/#getpopup","title":"getPopup","text":"<p>\u25b8 getPopup(): <code>Popup</code></p> <p>Returns the Popup instance that is bound to the Marker.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_7","title":"Returns","text":"<p><code>Popup</code></p> <p>popup</p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\"))\n .addTo(map);\n\nconsole.log(marker.getPopup()); // return the popup instance\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#defined-in_7","title":"Defined in","text":"<p>src/ui/marker.ts:483</p>"},{"location":"API/classes/maplibregl.Marker/#getrotation","title":"getRotation","text":"<p>\u25b8 getRotation(): <code>number</code></p> <p>Returns the current rotation angle of the marker (in degrees).</p>"},{"location":"API/classes/maplibregl.Marker/#returns_8","title":"Returns","text":"<p><code>number</code></p> <p>The current rotation angle of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_8","title":"Defined in","text":"<p>src/ui/marker.ts:730</p>"},{"location":"API/classes/maplibregl.Marker/#getrotationalignment","title":"getRotationAlignment","text":"<p>\u25b8 getRotationAlignment(): <code>Alignment</code></p> <p>Returns the current <code>rotationAlignment</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_9","title":"Returns","text":"<p><code>Alignment</code></p> <p>The current rotational alignment of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_9","title":"Defined in","text":"<p>src/ui/marker.ts:749</p>"},{"location":"API/classes/maplibregl.Marker/#isdraggable","title":"isDraggable","text":"<p>\u25b8 isDraggable(): <code>boolean</code></p> <p>Returns true if the marker can be dragged</p>"},{"location":"API/classes/maplibregl.Marker/#returns_10","title":"Returns","text":"<p><code>boolean</code></p> <p>True if the marker is draggable.</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_10","title":"Defined in","text":"<p>src/ui/marker.ts:711</p>"},{"location":"API/classes/maplibregl.Marker/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Marker/#returns_11","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_11","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.Marker/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Marker</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.Marker/#returns_12","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_12","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.Marker/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Marker</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.Marker/#returns_13","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_13","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.Marker/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Marker</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_6","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.Marker/#returns_14","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Marker</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_14","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.Marker/#remove","title":"remove","text":"<p>\u25b8 remove(): <code>Marker</code></p> <p>Removes the marker from a map</p>"},{"location":"API/classes/maplibregl.Marker/#returns_15","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker().addTo(map);\nmarker.remove();\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#defined-in_15","title":"Defined in","text":"<p>src/ui/marker.ts:322</p>"},{"location":"API/classes/maplibregl.Marker/#removeclassname","title":"removeClassName","text":"<p>\u25b8 removeClassName(<code>className</code>): <code>void</code></p> <p>Removes a CSS class from the marker element.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_7","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to remove from marker element"},{"location":"API/classes/maplibregl.Marker/#returns_16","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker()\nmarker.removeClassName('some-class')\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#defined-in_16","title":"Defined in","text":"<p>src/ui/marker.ts:601</p>"},{"location":"API/classes/maplibregl.Marker/#setdraggable","title":"setDraggable","text":"<p>\u25b8 setDraggable(<code>shouldBeDraggable?</code>): <code>Marker</code></p> <p>Sets the <code>draggable</code> property and functionality of the marker</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_8","title":"Parameters","text":"Name Type Description <code>shouldBeDraggable?</code> <code>boolean</code> Turns drag functionality on/off"},{"location":"API/classes/maplibregl.Marker/#returns_17","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_17","title":"Defined in","text":"<p>src/ui/marker.ts:689</p>"},{"location":"API/classes/maplibregl.Marker/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Marker</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_9","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Marker/#returns_18","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_18","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.Marker/#setlnglat","title":"setLngLat","text":"<p>\u25b8 setLngLat(<code>lnglat</code>): <code>Marker</code></p> <p>Set the marker's geographical position and move it.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_10","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> A LngLat describing where the marker should be located."},{"location":"API/classes/maplibregl.Marker/#returns_19","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Create a new marker, set the longitude and latitude, and add it to the map <pre><code>new maplibregl.Marker()\n  .setLngLat([-65.017, -16.457])\n  .addTo(map);\n</code></pre></p> <p><code>See</code></p> <ul> <li>Add custom icons with Markers</li> <li>Create a draggable Marker</li> </ul>"},{"location":"API/classes/maplibregl.Marker/#defined-in_19","title":"Defined in","text":"<p>src/ui/marker.ts:379</p>"},{"location":"API/classes/maplibregl.Marker/#setoffset","title":"setOffset","text":"<p>\u25b8 setOffset(<code>offset</code>): <code>Marker</code></p> <p>Sets the offset of the marker</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_11","title":"Parameters","text":"Name Type Description <code>offset</code> <code>PointLike</code> The offset in pixels as a PointLike object to apply relative to the element's center. Negatives indicate left and up."},{"location":"API/classes/maplibregl.Marker/#returns_20","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_20","title":"Defined in","text":"<p>src/ui/marker.ts:569</p>"},{"location":"API/classes/maplibregl.Marker/#setpitchalignment","title":"setPitchAlignment","text":"<p>\u25b8 setPitchAlignment(<code>alignment?</code>): <code>Marker</code></p> <p>Sets the <code>pitchAlignment</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_12","title":"Parameters","text":"Name Type Description <code>alignment?</code> <code>Alignment</code> Sets the <code>pitchAlignment</code> property of the marker. If alignment is 'auto', it will automatically match <code>rotationAlignment</code>."},{"location":"API/classes/maplibregl.Marker/#returns_21","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_21","title":"Defined in","text":"<p>src/ui/marker.ts:758</p>"},{"location":"API/classes/maplibregl.Marker/#setpopup","title":"setPopup","text":"<p>\u25b8 setPopup(<code>popup?</code>): <code>Marker</code></p> <p>Binds a Popup to the Marker.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_13","title":"Parameters","text":"Name Type Description <code>popup?</code> <code>Popup</code> An instance of the Popup class. If undefined or null, any popup set on this Marker instance is unset."},{"location":"API/classes/maplibregl.Marker/#returns_22","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")) // add popup\n .addTo(map);\n</code></pre> <p><code>See</code></p> <p>Attach a popup to a marker instance</p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_22","title":"Defined in","text":"<p>src/ui/marker.ts:409</p>"},{"location":"API/classes/maplibregl.Marker/#setrotation","title":"setRotation","text":"<p>\u25b8 setRotation(<code>rotation?</code>): <code>Marker</code></p> <p>Sets the <code>rotation</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_14","title":"Parameters","text":"Name Type Description <code>rotation?</code> <code>number</code> The rotation angle of the marker (clockwise, in degrees), relative to its respective Marker#setRotationAlignment setting."},{"location":"API/classes/maplibregl.Marker/#returns_23","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_23","title":"Defined in","text":"<p>src/ui/marker.ts:720</p>"},{"location":"API/classes/maplibregl.Marker/#setrotationalignment","title":"setRotationAlignment","text":"<p>\u25b8 setRotationAlignment(<code>alignment?</code>): <code>Marker</code></p> <p>Sets the <code>rotationAlignment</code> property of the marker.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_15","title":"Parameters","text":"Name Type Description <code>alignment?</code> <code>Alignment</code> Sets the <code>rotationAlignment</code> property of the marker. defaults to 'auto'"},{"location":"API/classes/maplibregl.Marker/#returns_24","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Marker/#defined-in_24","title":"Defined in","text":"<p>src/ui/marker.ts:739</p>"},{"location":"API/classes/maplibregl.Marker/#toggleclassname","title":"toggleClassName","text":"<p>\u25b8 toggleClassName(<code>className</code>): <code>boolean</code></p> <p>Add or remove the given CSS class on the marker element, depending on whether the element currently has that class.</p>"},{"location":"API/classes/maplibregl.Marker/#parameters_16","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to add/remove"},{"location":"API/classes/maplibregl.Marker/#returns_25","title":"Returns","text":"<p><code>boolean</code></p> <p>if the class was removed return false, if class was added, then return true</p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker()\nmarker.toggleClassName('toggleClass')\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#defined-in_25","title":"Defined in","text":"<p>src/ui/marker.ts:618</p>"},{"location":"API/classes/maplibregl.Marker/#togglepopup","title":"togglePopup","text":"<p>\u25b8 togglePopup(): <code>Marker</code></p> <p>Opens or closes the Popup instance that is bound to the Marker, depending on the current state of the Popup.</p>"},{"location":"API/classes/maplibregl.Marker/#returns_26","title":"Returns","text":"<p><code>Marker</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let marker = new maplibregl.Marker()\n .setLngLat([0, 0])\n .setPopup(new maplibregl.Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\"))\n .addTo(map);\n\nmarker.togglePopup(); // toggle popup open or closed\n</code></pre>"},{"location":"API/classes/maplibregl.Marker/#defined-in_26","title":"Defined in","text":"<p>src/ui/marker.ts:500</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/","title":"Class: MercatorCoordinate","text":"<p>maplibregl.MercatorCoordinate</p> <p>A <code>MercatorCoordinate</code> object represents a projected three dimensional position.</p> <p><code>MercatorCoordinate</code> uses the web mercator projection (EPSG:3857) with slightly different units: - the size of 1 unit is the width of the projected world instead of the \"mercator meter\" - the origin of the coordinate space is at the north-west corner instead of the middle</p> <p>For example, <code>MercatorCoordinate(0, 0, 0)</code> is the north-west corner of the mercator world and <code>MercatorCoordinate(1, 1, 0)</code> is the south-east corner. If you are familiar with vector tiles it may be helpful to think of the coordinate space as the <code>0/0/0</code> tile with an extent of <code>1</code>.</p> <p>The <code>z</code> dimension of <code>MercatorCoordinate</code> is conformal. A cube in the mercator coordinate space would be rendered as a cube.</p> <p><code>Example</code></p> <pre><code>let nullIsland = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);\n</code></pre> <p><code>See</code></p> <p>Add a custom style layer</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#implements","title":"Implements","text":"<ul> <li><code>IMercatorCoordinate</code></li> </ul>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.MercatorCoordinate/#constructor","title":"constructor","text":"<p>\u2022 new MercatorCoordinate(<code>x</code>, <code>y</code>, <code>z?</code>): <code>MercatorCoordinate</code></p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#parameters","title":"Parameters","text":"Name Type Default value Description <code>x</code> <code>number</code> <code>undefined</code> The x component of the position. <code>y</code> <code>number</code> <code>undefined</code> The y component of the position. <code>z</code> <code>number</code> <code>0</code> The z component of the position."},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns","title":"Returns","text":"<p><code>MercatorCoordinate</code></p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:87</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.MercatorCoordinate/#meterinmercatorcoordinateunits","title":"meterInMercatorCoordinateUnits","text":"<p>\u25b8 meterInMercatorCoordinateUnits(): <code>number</code></p> <p>Returns the distance of 1 meter in <code>MercatorCoordinate</code> units at this latitude.</p> <p>For coordinates in real world units using meters, this naturally provides the scale to transform into <code>MercatorCoordinate</code>s.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns_1","title":"Returns","text":"<p><code>number</code></p> <p>Distance of 1 meter in <code>MercatorCoordinate</code> units.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#implementation-of","title":"Implementation of","text":"<p>IMercatorCoordinate.meterInMercatorCoordinateUnits</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in_1","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:152</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#toaltitude","title":"toAltitude","text":"<p>\u25b8 toAltitude(): <code>number</code></p> <p>Returns the altitude in meters of the coordinate.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns_2","title":"Returns","text":"<p><code>number</code></p> <p>The altitude in meters.</p> <p><code>Example</code></p> <pre><code>let coord = new maplibregl.MercatorCoordinate(0, 0, 0.02);\ncoord.toAltitude(); // 6914.281956295339\n</code></pre>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#implementation-of_1","title":"Implementation of","text":"<p>IMercatorCoordinate.toAltitude</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in_2","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:140</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#tolnglat","title":"toLngLat","text":"<p>\u25b8 toLngLat(): <code>LngLat</code></p> <p>Returns the <code>LngLat</code> for the coordinate.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns_3","title":"Returns","text":"<p><code>LngLat</code></p> <p>The <code>LngLat</code> object.</p> <p><code>Example</code></p> <pre><code>let coord = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);\nlet lngLat = coord.toLngLat(); // LngLat(0, 0)\n</code></pre>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#implementation-of_2","title":"Implementation of","text":"<p>IMercatorCoordinate.toLngLat</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in_3","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:124</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#fromlnglat","title":"fromLngLat","text":"<p>\u25b8 fromLngLat(<code>lngLatLike</code>, <code>altitude?</code>): <code>MercatorCoordinate</code></p> <p>Project a <code>LngLat</code> to a <code>MercatorCoordinate</code>.</p>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#parameters_1","title":"Parameters","text":"Name Type Default value Description <code>lngLatLike</code> <code>LngLatLike</code> <code>undefined</code> The location to project. <code>altitude</code> <code>number</code> <code>0</code> The altitude in meters of the position."},{"location":"API/classes/maplibregl.MercatorCoordinate/#returns_4","title":"Returns","text":"<p><code>MercatorCoordinate</code></p> <p>The projected mercator coordinate.</p> <p><code>Example</code></p> <pre><code>let coord = maplibregl.MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);\ncoord; // MercatorCoordinate(0.5, 0.5, 0)\n</code></pre>"},{"location":"API/classes/maplibregl.MercatorCoordinate/#defined-in_4","title":"Defined in","text":"<p>src/geo/mercator_coordinate.ts:105</p>"},{"location":"API/classes/maplibregl.NavigationControl/","title":"Class: NavigationControl","text":"<p>maplibregl.NavigationControl</p> <p>A <code>NavigationControl</code> control contains zoom buttons and a compass.</p> <p><code>Example</code></p> <pre><code>let nav = new maplibregl.NavigationControl();\nmap.addControl(nav, 'top-left');\n</code></pre> <p><code>See</code></p> <p>Display map navigation controls</p>"},{"location":"API/classes/maplibregl.NavigationControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.NavigationControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/maplibregl.NavigationControl/#constructor","title":"constructor","text":"<p>\u2022 new NavigationControl(<code>options?</code>): <code>NavigationControl</code></p>"},{"location":"API/classes/maplibregl.NavigationControl/#parameters","title":"Parameters","text":"Name Type Description <code>options?</code> <code>NavigationOptions</code> the control's options"},{"location":"API/classes/maplibregl.NavigationControl/#returns","title":"Returns","text":"<p><code>NavigationControl</code></p>"},{"location":"API/classes/maplibregl.NavigationControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/navigation_control.ts:60</p>"},{"location":"API/classes/maplibregl.OverscaledTileID/","title":"Class: OverscaledTileID","text":"<p>maplibregl.OverscaledTileID</p> <p>An overscaled tile identifier</p>"},{"location":"API/classes/maplibregl.Popup/","title":"Class: Popup","text":"<p>maplibregl.Popup</p> <p>A popup component.</p> <p><code>Example</code></p> <p>Create a popup <pre><code>let popup = new maplibregl.Popup();\n// Set an event listener that will fire\n// any time the popup is opened\npopup.on('open', function(){\n  console.log('popup was opened');\n});\n</code></pre></p> <p><code>Example</code></p> <p>Create a popup <pre><code>let popup = new maplibregl.Popup();\n// Set an event listener that will fire\n// any time the popup is closed\npopup.on('close', function(){\n  console.log('popup was closed');\n});\n</code></pre></p> <p><code>Example</code></p> <pre><code>let markerHeight = 50, markerRadius = 10, linearOffset = 25;\nlet popupOffsets = {\n 'top': [0, 0],\n 'top-left': [0,0],\n 'top-right': [0,0],\n 'bottom': [0, -markerHeight],\n 'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n 'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n 'left': [markerRadius, (markerHeight - markerRadius) * -1],\n 'right': [-markerRadius, (markerHeight - markerRadius) * -1]\n };\nlet popup = new maplibregl.Popup({offset: popupOffsets, className: 'my-class'})\n  .setLngLat(e.lngLat)\n  .setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n  .setMaxWidth(\"300px\")\n  .addTo(map);\n</code></pre> <p><code>See</code></p> <ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Attach a popup to a marker instance</li> </ul>"},{"location":"API/classes/maplibregl.Popup/#events","title":"Events","text":"<p><code>open</code> Fired when the popup is opened manually or programmatically. <code>popup</code> object that was opened</p> <p><code>close</code> Fired when the popup is closed manually or programmatically. <code>popup</code> object that was closed</p>"},{"location":"API/classes/maplibregl.Popup/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>Popup</code></p>"},{"location":"API/classes/maplibregl.Popup/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Popup/#addclassname","title":"addClassName","text":"<p>\u25b8 addClassName(<code>className</code>): <code>void</code></p> <p>Adds a CSS class to the popup container element.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to add to popup container"},{"location":"API/classes/maplibregl.Popup/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup()\npopup.addClassName('some-class')\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#defined-in","title":"Defined in","text":"<p>src/ui/popup.ts:469</p>"},{"location":"API/classes/maplibregl.Popup/#addto","title":"addTo","text":"<p>\u25b8 addTo(<code>map</code>): <code>Popup</code></p> <p>Adds the popup to a map.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_1","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The MapLibre GL JS map to add the popup to."},{"location":"API/classes/maplibregl.Popup/#returns_1","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>new maplibregl.Popup()\n  .setLngLat([0, 0])\n  .setHTML(\"&lt;h1&gt;Null Island&lt;/h1&gt;\")\n  .addTo(map);\n</code></pre> <p><code>See</code></p> <ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Show polygon information on click</li> </ul>"},{"location":"API/classes/maplibregl.Popup/#defined-in_1","title":"Defined in","text":"<p>src/ui/popup.ts:182</p>"},{"location":"API/classes/maplibregl.Popup/#getelement","title":"getElement","text":"<p>\u25b8 getElement(): <code>HTMLElement</code></p> <p>Returns the <code>Popup</code>'s HTML element.</p>"},{"location":"API/classes/maplibregl.Popup/#returns_2","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>element</p> <p><code>Example</code></p> <p>Change the <code>Popup</code> element's font size <pre><code>let popup = new maplibregl.Popup()\n  .setLngLat([-96, 37.8])\n  .setHTML(\"&lt;p&gt;Hello World!&lt;/p&gt;\")\n  .addTo(map);\nlet popupElem = popup.getElement();\npopupElem.style.fontSize = \"25px\";\n</code></pre></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_2","title":"Defined in","text":"<p>src/ui/popup.ts:340</p>"},{"location":"API/classes/maplibregl.Popup/#getlnglat","title":"getLngLat","text":"<p>\u25b8 getLngLat(): <code>LngLat</code></p> <p>Returns the geographical location of the popup's anchor.</p> <p>The longitude of the result may differ by a multiple of 360 degrees from the longitude previously set by <code>setLngLat</code> because <code>Popup</code> wraps the anchor longitude across copies of the world to keep the popup on screen.</p>"},{"location":"API/classes/maplibregl.Popup/#returns_3","title":"Returns","text":"<p><code>LngLat</code></p> <p>The geographical location of the popup's anchor.</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_3","title":"Defined in","text":"<p>src/ui/popup.ts:266</p>"},{"location":"API/classes/maplibregl.Popup/#getmaxwidth","title":"getMaxWidth","text":"<p>\u25b8 getMaxWidth(): <code>string</code></p> <p>Returns the popup's maximum width.</p>"},{"location":"API/classes/maplibregl.Popup/#returns_4","title":"Returns","text":"<p><code>string</code></p> <p>The maximum width of the popup.</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_4","title":"Defined in","text":"<p>src/ui/popup.ts:405</p>"},{"location":"API/classes/maplibregl.Popup/#isopen","title":"isOpen","text":"<p>\u25b8 isOpen(): <code>boolean</code></p>"},{"location":"API/classes/maplibregl.Popup/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the popup is open, <code>false</code> if it is closed.</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_5","title":"Defined in","text":"<p>src/ui/popup.ts:217</p>"},{"location":"API/classes/maplibregl.Popup/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Popup/#returns_6","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_6","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.Popup/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Popup</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.Popup/#returns_7","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_7","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.Popup/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Popup</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_4","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.Popup/#returns_8","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_8","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.Popup/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Popup</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_5","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.Popup/#returns_9","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Popup</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_9","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.Popup/#remove","title":"remove","text":"<p>\u25b8 remove(): <code>this</code></p> <p>Removes the popup from the map it has been added to.</p>"},{"location":"API/classes/maplibregl.Popup/#returns_10","title":"Returns","text":"<p><code>this</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup().addTo(map);\npopup.remove();\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#defined-in_10","title":"Defined in","text":"<p>src/ui/popup.ts:231</p>"},{"location":"API/classes/maplibregl.Popup/#removeclassname","title":"removeClassName","text":"<p>\u25b8 removeClassName(<code>className</code>): <code>void</code></p> <p>Removes a CSS class from the popup container element.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_6","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to remove from popup container"},{"location":"API/classes/maplibregl.Popup/#returns_11","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup()\npopup.removeClassName('some-class')\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#defined-in_11","title":"Defined in","text":"<p>src/ui/popup.ts:486</p>"},{"location":"API/classes/maplibregl.Popup/#setdomcontent","title":"setDOMContent","text":"<p>\u25b8 setDOMContent(<code>htmlNode</code>): <code>Popup</code></p> <p>Sets the popup's content to the element provided as a DOM node.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_7","title":"Parameters","text":"Name Type Description <code>htmlNode</code> <code>Node</code> A DOM node to be used as content for the popup."},{"location":"API/classes/maplibregl.Popup/#returns_12","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p> <p><code>Example</code></p> <p>Create an element with the popup content <pre><code>let div = document.createElement('div');\ndiv.innerHTML = 'Hello, world!';\nlet popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setDOMContent(div)\n  .addTo(map);\n</code></pre></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_12","title":"Defined in","text":"<p>src/ui/popup.ts:438</p>"},{"location":"API/classes/maplibregl.Popup/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Popup</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_8","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Popup/#returns_13","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_13","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.Popup/#sethtml","title":"setHTML","text":"<p>\u25b8 setHTML(<code>html</code>): <code>Popup</code></p> <p>Sets the popup's content to the HTML provided as a string.</p> <p>This method does not perform HTML filtering or sanitization, and must be used only with trusted content. Consider Popup#setText if the content is an untrusted text string.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_9","title":"Parameters","text":"Name Type Description <code>html</code> <code>string</code> A string representing HTML content for the popup."},{"location":"API/classes/maplibregl.Popup/#returns_14","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n  .addTo(map);\n</code></pre> <p><code>See</code></p> <ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Attach a popup to a marker instance</li> </ul>"},{"location":"API/classes/maplibregl.Popup/#defined-in_14","title":"Defined in","text":"<p>src/ui/popup.ts:386</p>"},{"location":"API/classes/maplibregl.Popup/#setlnglat","title":"setLngLat","text":"<p>\u25b8 setLngLat(<code>lnglat</code>): <code>Popup</code></p> <p>Sets the geographical location of the popup's anchor, and moves the popup to it. Replaces trackPointer() behavior.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_10","title":"Parameters","text":"Name Type Description <code>lnglat</code> <code>LngLatLike</code> The geographical location to set as the popup's anchor."},{"location":"API/classes/maplibregl.Popup/#returns_15","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_15","title":"Defined in","text":"<p>src/ui/popup.ts:276</p>"},{"location":"API/classes/maplibregl.Popup/#setmaxwidth","title":"setMaxWidth","text":"<p>\u25b8 setMaxWidth(<code>maxWidth</code>): <code>Popup</code></p> <p>Sets the popup's maximum width. This is setting the CSS property <code>max-width</code>. Available values can be found here: https://developer.mozilla.org/en-US/docs/Web/CSS/max-width</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_11","title":"Parameters","text":"Name Type Description <code>maxWidth</code> <code>string</code> A string representing the value for the maximum width."},{"location":"API/classes/maplibregl.Popup/#returns_16","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_16","title":"Defined in","text":"<p>src/ui/popup.ts:416</p>"},{"location":"API/classes/maplibregl.Popup/#setoffset","title":"setOffset","text":"<p>\u25b8 setOffset(<code>offset?</code>): <code>Popup</code></p> <p>Sets the popup's offset.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_12","title":"Parameters","text":"Name Type Description <code>offset?</code> <code>Offset</code> Sets the popup's offset."},{"location":"API/classes/maplibregl.Popup/#returns_17","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Popup/#defined-in_17","title":"Defined in","text":"<p>src/ui/popup.ts:498</p>"},{"location":"API/classes/maplibregl.Popup/#settext","title":"setText","text":"<p>\u25b8 setText(<code>text</code>): <code>Popup</code></p> <p>Sets the popup's content to a string of text.</p> <p>This function creates a Text node in the DOM, so it cannot insert raw HTML. Use this method for security against XSS if the popup content is user-provided.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_13","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> Textual content for the popup."},{"location":"API/classes/maplibregl.Popup/#returns_18","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup()\n  .setLngLat(e.lngLat)\n  .setText('Hello, world!')\n  .addTo(map);\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#defined-in_18","title":"Defined in","text":"<p>src/ui/popup.ts:361</p>"},{"location":"API/classes/maplibregl.Popup/#toggleclassname","title":"toggleClassName","text":"<p>\u25b8 toggleClassName(<code>className</code>): <code>boolean</code></p> <p>Add or remove the given CSS class on the popup container, depending on whether the container currently has that class.</p>"},{"location":"API/classes/maplibregl.Popup/#parameters_14","title":"Parameters","text":"Name Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to add/remove"},{"location":"API/classes/maplibregl.Popup/#returns_19","title":"Returns","text":"<p><code>boolean</code></p> <p>if the class was removed return false, if class was added, then return true, undefined if there is no container</p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup()\npopup.toggleClassName('toggleClass')\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#defined-in_19","title":"Defined in","text":"<p>src/ui/popup.ts:517</p>"},{"location":"API/classes/maplibregl.Popup/#trackpointer","title":"trackPointer","text":"<p>\u25b8 trackPointer(): <code>Popup</code></p> <p>Tracks the popup anchor to the cursor position on screens with a pointer device (it will be hidden on touchscreens). Replaces the <code>setLngLat</code> behavior. For most use cases, set <code>closeOnClick</code> and <code>closeButton</code> to <code>false</code>.</p>"},{"location":"API/classes/maplibregl.Popup/#returns_20","title":"Returns","text":"<p><code>Popup</code></p> <p><code>this</code></p> <p><code>Example</code></p> <pre><code>let popup = new maplibregl.Popup({ closeOnClick: false, closeButton: false })\n  .setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n  .trackPointer()\n  .addTo(map);\n</code></pre>"},{"location":"API/classes/maplibregl.Popup/#defined-in_20","title":"Defined in","text":"<p>src/ui/popup.ts:308</p>"},{"location":"API/classes/maplibregl.RGBAImage/","title":"Class: RGBAImage","text":"<p>maplibregl.RGBAImage</p> <p>An object to store image data not premultiplied, because ImageData is not premultiplied. UNPACK_PREMULTIPLY_ALPHA_WEBGL must be used when uploading to a texture.</p>"},{"location":"API/classes/maplibregl.RGBAImage/#properties","title":"Properties","text":""},{"location":"API/classes/maplibregl.RGBAImage/#data","title":"data","text":"<p>\u2022 data: <code>Uint8Array</code></p> <p>data must be a Uint8Array instead of Uint8ClampedArray because texImage2D does not support Uint8ClampedArray in all browsers.</p>"},{"location":"API/classes/maplibregl.RGBAImage/#defined-in","title":"Defined in","text":"<p>src/util/image.ts:121</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/","title":"Class: RasterDEMTileSource","text":"<p>maplibregl.RasterDEMTileSource</p> <p>A source containing raster DEM tiles (See the Style Specification for detailed documentation of options.) This source can be used to show hillshading and 3D terrain</p> <p><code>Example</code></p> <pre><code>map.addSource('raster-dem-source', {\n     type: 'raster-dem',\n     url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n     tileSize: 256\n});\n</code></pre> <p><code>See</code></p> <p>3D Terrain</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>RasterTileSource</code></li> </ul> <p>\u21b3 <code>RasterDEMTileSource</code></p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.RasterDEMTileSource/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#inherited-from","title":"Inherited from","text":"<p>RasterTileSource.listens</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>RasterDEMTileSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.RasterDEMTileSource/#returns_1","title":"Returns","text":"<p><code>RasterDEMTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#inherited-from_1","title":"Inherited from","text":"<p>RasterTileSource.off</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>RasterDEMTileSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.RasterDEMTileSource/#returns_2","title":"Returns","text":"<p><code>RasterDEMTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#inherited-from_2","title":"Inherited from","text":"<p>RasterTileSource.on</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>RasterDEMTileSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.RasterDEMTileSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>RasterDEMTileSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#inherited-from_3","title":"Inherited from","text":"<p>RasterTileSource.once</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>RasterDEMTileSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#returns_4","title":"Returns","text":"<p><code>RasterDEMTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#inherited-from_4","title":"Inherited from","text":"<p>RasterTileSource.setEventedParent</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#settiles","title":"setTiles","text":"<p>\u25b8 setTiles(<code>tiles</code>): <code>RasterDEMTileSource</code></p> <p>Sets the source <code>tiles</code> property and re-renders the map.</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>tiles</code> <code>string</code>[] An array of one or more tile source URLs, as in the raster tiles spec (See the Style Specification"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#returns_5","title":"Returns","text":"<p><code>RasterDEMTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#inherited-from_5","title":"Inherited from","text":"<p>RasterTileSource.setTiles</p>"},{"location":"API/classes/maplibregl.RasterDEMTileSource/#defined-in_5","title":"Defined in","text":"<p>src/source/raster_tile_source.ts:143</p>"},{"location":"API/classes/maplibregl.RasterTileSource/","title":"Class: RasterTileSource","text":"<p>maplibregl.RasterTileSource</p> <p>A source containing raster tiles (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>map.addSource('raster-source', {\n    'type': 'raster',\n    'tiles': ['https://tiles.stadiamaps.com/tiles/stamen_watercolor/{z}/{x}/{y}.jpg'],\n    'tileSize': 256,\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.addSource('wms-test-source', {\n     'type': 'raster',\n// use the tiles option to specify a WMS tile source URL\n     'tiles': [\n         'https://img.nj.gov/imagerywms/Natural2015?bbox={bbox-epsg-3857}&amp;format=image/png&amp;service=WMS&amp;version=1.1.1&amp;request=GetMap&amp;srs=EPSG:3857&amp;transparent=true&amp;width=256&amp;height=256&amp;layers=Natural2015'\n     ],\n     'tileSize': 256\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Add a raster tile source</li> <li>Add a WMS source</li> <li>Display a satellite map</li> </ul>"},{"location":"API/classes/maplibregl.RasterTileSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>RasterTileSource</code></p> <p>\u21b3\u21b3 <code>RasterDEMTileSource</code></p>"},{"location":"API/classes/maplibregl.RasterTileSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/maplibregl.RasterTileSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.RasterTileSource/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.RasterTileSource/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>RasterTileSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.RasterTileSource/#returns_1","title":"Returns","text":"<p><code>RasterTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.RasterTileSource/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>RasterTileSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.RasterTileSource/#returns_2","title":"Returns","text":"<p><code>RasterTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.RasterTileSource/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>RasterTileSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.RasterTileSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>RasterTileSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>RasterTileSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.RasterTileSource/#returns_4","title":"Returns","text":"<p><code>RasterTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.RasterTileSource/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#settiles","title":"setTiles","text":"<p>\u25b8 setTiles(<code>tiles</code>): <code>RasterTileSource</code></p> <p>Sets the source <code>tiles</code> property and re-renders the map.</p>"},{"location":"API/classes/maplibregl.RasterTileSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>tiles</code> <code>string</code>[] An array of one or more tile source URLs, as in the raster tiles spec (See the Style Specification"},{"location":"API/classes/maplibregl.RasterTileSource/#returns_5","title":"Returns","text":"<p><code>RasterTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.RasterTileSource/#defined-in_5","title":"Defined in","text":"<p>src/source/raster_tile_source.ts:143</p>"},{"location":"API/classes/maplibregl.ScaleControl/","title":"Class: ScaleControl","text":"<p>maplibregl.ScaleControl</p> <p>A <code>ScaleControl</code> control displays the ratio of a distance on the map to the corresponding distance on the ground.</p> <p><code>Example</code></p> <pre><code>let scale = new maplibregl.ScaleControl({\n    maxWidth: 80,\n    unit: 'imperial'\n});\nmap.addControl(scale);\n\nscale.setUnit('metric');\n</code></pre>"},{"location":"API/classes/maplibregl.ScaleControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.ScaleControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.ScaleControl/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>): <code>HTMLElement</code></p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map#addControl internally.</p>"},{"location":"API/classes/maplibregl.ScaleControl/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/maplibregl.ScaleControl/#returns","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/maplibregl.ScaleControl/#implementation-of","title":"Implementation of","text":"<p>IControl.onAdd</p>"},{"location":"API/classes/maplibregl.ScaleControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/scale_control.ts:67</p>"},{"location":"API/classes/maplibregl.ScaleControl/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(): <code>void</code></p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map#removeControl internally.</p>"},{"location":"API/classes/maplibregl.ScaleControl/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.ScaleControl/#implementation-of_1","title":"Implementation of","text":"<p>IControl.onRemove</p>"},{"location":"API/classes/maplibregl.ScaleControl/#defined-in_1","title":"Defined in","text":"<p>src/ui/control/scale_control.ts:78</p>"},{"location":"API/classes/maplibregl.ScaleControl/#setunit","title":"setUnit","text":"<p>\u25b8 setUnit(<code>unit</code>): <code>void</code></p> <p>Set the scale's unit of the distance</p>"},{"location":"API/classes/maplibregl.ScaleControl/#parameters_1","title":"Parameters","text":"Name Type Description <code>unit</code> <code>Unit</code> Unit of the distance (<code>'imperial'</code>, <code>'metric'</code> or <code>'nautical'</code>)."},{"location":"API/classes/maplibregl.ScaleControl/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.ScaleControl/#defined-in_2","title":"Defined in","text":"<p>src/ui/control/scale_control.ts:89</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/","title":"Class: ScrollZoomHandler","text":"<p>maplibregl.ScrollZoomHandler</p> <p>The <code>ScrollZoomHandler</code> allows the user to zoom the map by scrolling.</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.ScrollZoomHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"scroll to zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.scrollZoom.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#implementation-of","title":"Implementation of","text":"<p>Handler.disable</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:149</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"scroll to zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#parameters","title":"Parameters","text":"Name Type Description <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code> Options object."},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.scrollZoom.enable();\nmap.scrollZoom.enable({ around: 'center' })\n</code></pre>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#implementation-of_1","title":"Implementation of","text":"<p>Handler.enable</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:135</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"scroll to zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"scroll to zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#implementation-of_2","title":"Implementation of","text":"<p>Handler.isEnabled</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:108</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#setwheelzoomrate","title":"setWheelZoomRate","text":"<p>\u25b8 setWheelZoomRate(<code>wheelZoomRate</code>): <code>void</code></p> <p>Set the zoom rate of a mouse wheel</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#parameters_1","title":"Parameters","text":"Name Type Description <code>wheelZoomRate</code> <code>number</code> 1/450 The rate used to scale mouse wheel movement to a zoom value."},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns_3","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <p>Slow down zoom of mouse wheel <pre><code>map.scrollZoom.setWheelZoomRate(1/600);\n</code></pre></p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:100</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#setzoomrate","title":"setZoomRate","text":"<p>\u25b8 setZoomRate(<code>zoomRate</code>): <code>void</code></p> <p>Set the zoom rate of a trackpad</p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#parameters_2","title":"Parameters","text":"Name Type Description <code>zoomRate</code> <code>number</code> 1/100 The rate used to scale trackpad movement to a zoom value."},{"location":"API/classes/maplibregl.ScrollZoomHandler/#returns_4","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <p>Speed up trackpad zoom <pre><code>map.scrollZoom.setZoomRate(1/25);\n</code></pre></p>"},{"location":"API/classes/maplibregl.ScrollZoomHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/scroll_zoom.ts:87</p>"},{"location":"API/classes/maplibregl.Style/","title":"Class: Style","text":"<p>maplibregl.Style</p> <p>The Style base class</p>"},{"location":"API/classes/maplibregl.Style/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>Style</code></p>"},{"location":"API/classes/maplibregl.Style/#events","title":"Events","text":""},{"location":"API/classes/maplibregl.Style/#removelayer","title":"removeLayer","text":"<p>\u25b8 removeLayer(<code>id</code>): <code>void</code></p> <p>Remove the layer with the given id from the style.</p> <p>If no such layer exists, an <code>error</code> event is fired.</p>"},{"location":"API/classes/maplibregl.Style/#parameters","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the layer to remove <code>error</code> - Fired if the layer does not exist"},{"location":"API/classes/maplibregl.Style/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in","title":"Defined in","text":"<p>src/style/style.ts:970</p>"},{"location":"API/classes/maplibregl.Style/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.Style/#_serializebyids","title":"_serializeByIds","text":"<p>\u25b8 _serializeByIds(<code>ids?</code>): <code>LayerSpecification</code>[]</p> <p>take an array of string IDs, and based on this._layers, generate an array of LayerSpecification</p>"},{"location":"API/classes/maplibregl.Style/#parameters_1","title":"Parameters","text":"Name Type Description <code>ids?</code> <code>string</code>[] an array of string IDs, for which serialized layers will be generated. If omitted, all serialized layers will be returned"},{"location":"API/classes/maplibregl.Style/#returns_1","title":"Returns","text":"<p><code>LayerSpecification</code>[]</p> <p>generated result</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_1","title":"Defined in","text":"<p>src/style/style.ts:504</p>"},{"location":"API/classes/maplibregl.Style/#_serializedalllayers","title":"_serializedAllLayers","text":"<p>\u25b8 _serializedAllLayers(): <code>Object</code></p> <p>Lazy initialization of this._serializedLayers dictionary and return it</p>"},{"location":"API/classes/maplibregl.Style/#returns_2","title":"Returns","text":"<p><code>Object</code></p> <p>this._serializedLayers dictionary</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_2","title":"Defined in","text":"<p>src/style/style.ts:526</p>"},{"location":"API/classes/maplibregl.Style/#addlayer","title":"addLayer","text":"<p>\u25b8 addLayer(<code>layerObject</code>, <code>before?</code>, <code>options?</code>): <code>Style</code></p> <p>Add a layer to the map style. The layer will be inserted before the layer with ID <code>before</code>, or appended if <code>before</code> is omitted.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_2","title":"Parameters","text":"Name Type Description <code>layerObject</code> <code>AddLayerObject</code> The style layer to add. <code>before?</code> <code>string</code> ID of an existing layer to insert before <code>options</code> <code>StyleSetterOptions</code> Style setter options."},{"location":"API/classes/maplibregl.Style/#returns_3","title":"Returns","text":"<p><code>Style</code></p> <p><code>this</code>.</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_3","title":"Defined in","text":"<p>src/style/style.ts:860</p>"},{"location":"API/classes/maplibregl.Style/#addsprite","title":"addSprite","text":"<p>\u25b8 addSprite(<code>id</code>, <code>url</code>, <code>options?</code>, <code>completion?</code>): <code>void</code></p> <p>Add a sprite.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_3","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> The id of the desired sprite <code>url</code> <code>string</code> The url to load the desired sprite from <code>options</code> <code>StyleSetterOptions</code> The style setter options <code>completion?</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code> The completion handler"},{"location":"API/classes/maplibregl.Style/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_4","title":"Defined in","text":"<p>src/style/style.ts:1661</p>"},{"location":"API/classes/maplibregl.Style/#getfilter","title":"getFilter","text":"<p>\u25b8 getFilter(<code>layer</code>): <code>void</code> | <code>FilterSpecification</code></p> <p>Get a layer's filter object</p>"},{"location":"API/classes/maplibregl.Style/#parameters_4","title":"Parameters","text":"Name Type Description <code>layer</code> <code>string</code> the layer to inspect"},{"location":"API/classes/maplibregl.Style/#returns_5","title":"Returns","text":"<p><code>void</code> | <code>FilterSpecification</code></p> <p>the layer's filter, if any</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_5","title":"Defined in","text":"<p>src/style/style.ts:1081</p>"},{"location":"API/classes/maplibregl.Style/#getlayer","title":"getLayer","text":"<p>\u25b8 getLayer(<code>id</code>): <code>StyleLayer</code></p> <p>Return the style layer object with the given <code>id</code>.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_5","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the desired layer"},{"location":"API/classes/maplibregl.Style/#returns_6","title":"Returns","text":"<p><code>StyleLayer</code></p> <p>a layer, if one with the given <code>id</code> exists</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_6","title":"Defined in","text":"<p>src/style/style.ts:1006</p>"},{"location":"API/classes/maplibregl.Style/#getlayersorder","title":"getLayersOrder","text":"<p>\u25b8 getLayersOrder(): <code>string</code>[]</p> <p>Return the ids of all layers currently in the style, including custom layers, in order.</p>"},{"location":"API/classes/maplibregl.Style/#returns_7","title":"Returns","text":"<p><code>string</code>[]</p> <p>ids of layers, in order</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_7","title":"Defined in","text":"<p>src/style/style.ts:1015</p>"},{"location":"API/classes/maplibregl.Style/#getlayoutproperty","title":"getLayoutProperty","text":"<p>\u25b8 getLayoutProperty(<code>layerId</code>, <code>name</code>): <code>any</code></p> <p>Get a layout property's value from a given layer</p>"},{"location":"API/classes/maplibregl.Style/#parameters_6","title":"Parameters","text":"Name Type Description <code>layerId</code> <code>string</code> the layer to inspect <code>name</code> <code>string</code> the name of the layout property"},{"location":"API/classes/maplibregl.Style/#returns_8","title":"Returns","text":"<p><code>any</code></p> <p>the property value</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_8","title":"Defined in","text":"<p>src/style/style.ts:1106</p>"},{"location":"API/classes/maplibregl.Style/#getsource","title":"getSource","text":"<p>\u25b8 getSource(<code>id</code>): <code>Source</code></p> <p>Get a source by ID.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_7","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> ID of the desired source"},{"location":"API/classes/maplibregl.Style/#returns_9","title":"Returns","text":"<p><code>Source</code></p> <p>source</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_9","title":"Defined in","text":"<p>src/style/style.ts:848</p>"},{"location":"API/classes/maplibregl.Style/#getsprite","title":"getSprite","text":"<p>\u25b8 getSprite(): { <code>id</code>: <code>string</code> ; <code>url</code>: <code>string</code>  }[]</p> <p>Get the current sprite value.</p>"},{"location":"API/classes/maplibregl.Style/#returns_10","title":"Returns","text":"<p>{ <code>id</code>: <code>string</code> ; <code>url</code>: <code>string</code>  }[]</p> <p>empty array when no sprite is set; id-url pairs otherwise</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_10","title":"Defined in","text":"<p>src/style/style.ts:1714</p>"},{"location":"API/classes/maplibregl.Style/#haslayer","title":"hasLayer","text":"<p>\u25b8 hasLayer(<code>id</code>): <code>boolean</code></p> <p>Checks if a specific layer is present within the style.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_8","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> the id of the desired layer"},{"location":"API/classes/maplibregl.Style/#returns_11","title":"Returns","text":"<p><code>boolean</code></p> <p>a boolean specifying if the given layer is present</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_11","title":"Defined in","text":"<p>src/style/style.ts:1025</p>"},{"location":"API/classes/maplibregl.Style/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_9","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.Style/#returns_12","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.Style/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_12","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.Style/#movelayer","title":"moveLayer","text":"<p>\u25b8 moveLayer(<code>id</code>, <code>before?</code>): <code>void</code></p> <p>Moves a layer to a different z-position. The layer will be inserted before the layer with ID <code>before</code>, or appended if <code>before</code> is omitted.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_10","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> ID of the layer to move <code>before?</code> <code>string</code> ID of an existing layer to insert before"},{"location":"API/classes/maplibregl.Style/#returns_13","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_13","title":"Defined in","text":"<p>src/style/style.ts:935</p>"},{"location":"API/classes/maplibregl.Style/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>Style</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_11","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.Style/#returns_14","title":"Returns","text":"<p><code>Style</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Style/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_14","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.Style/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>Style</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_12","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.Style/#returns_15","title":"Returns","text":"<p><code>Style</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Style/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_15","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.Style/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Style</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_13","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.Style/#returns_16","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>Style</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.Style/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_16","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.Style/#removesource","title":"removeSource","text":"<p>\u25b8 removeSource(<code>id</code>): <code>Style</code></p> <p>Remove a source from this stylesheet, given its id.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_14","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the source to remove"},{"location":"API/classes/maplibregl.Style/#returns_17","title":"Returns","text":"<p><code>Style</code></p> <p><code>this</code>.</p> <p><code>Throws</code></p> <p>if no source is found with the given ID</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_17","title":"Defined in","text":"<p>src/style/style.ts:806</p>"},{"location":"API/classes/maplibregl.Style/#removesprite","title":"removeSprite","text":"<p>\u25b8 removeSprite(<code>id</code>): <code>void</code></p> <p>Remove a sprite by its id. When the last sprite is removed, the whole <code>this.stylesheet.sprite</code> object becomes <code>undefined</code>. This falsy <code>undefined</code> value later prevents attempts to load the sprite when it's absent.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_15","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> the id of the sprite to remove"},{"location":"API/classes/maplibregl.Style/#returns_18","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_18","title":"Defined in","text":"<p>src/style/style.ts:1682</p>"},{"location":"API/classes/maplibregl.Style/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>Style</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_16","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.Style/#returns_19","title":"Returns","text":"<p><code>Style</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.Style/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_19","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.Style/#setgeojsonsourcedata","title":"setGeoJSONSourceData","text":"<p>\u25b8 setGeoJSONSourceData(<code>id</code>, <code>data</code>): <code>void</code></p> <p>Set the data of a GeoJSON source, given its id.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_17","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> id of the source <code>data</code> <code>string</code> | <code>GeoJSON</code> GeoJSON source"},{"location":"API/classes/maplibregl.Style/#returns_20","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_20","title":"Defined in","text":"<p>src/style/style.ts:832</p>"},{"location":"API/classes/maplibregl.Style/#setsprite","title":"setSprite","text":"<p>\u25b8 setSprite(<code>sprite</code>, <code>options?</code>, <code>completion?</code>): <code>void</code></p> <p>Set a new value for the style's sprite.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_18","title":"Parameters","text":"Name Type Description <code>sprite</code> <code>SpriteSpecification</code> new sprite value <code>options</code> <code>StyleSetterOptions</code> style setter options <code>completion?</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code> the completion handler"},{"location":"API/classes/maplibregl.Style/#returns_21","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.Style/#defined-in_21","title":"Defined in","text":"<p>src/style/style.ts:1725</p>"},{"location":"API/classes/maplibregl.Style/#setstate","title":"setState","text":"<p>\u25b8 setState(<code>nextState</code>, <code>options?</code>): <code>boolean</code></p> <p>Update this style's state to match the given style JSON, performing only the necessary mutations.</p> <p>May throw an Error ('Unimplemented: METHOD') if the mapbox-gl-style-spec diff algorithm produces an operation that is not supported.</p>"},{"location":"API/classes/maplibregl.Style/#parameters_19","title":"Parameters","text":"Name Type <code>nextState</code> <code>StyleSpecification</code> <code>options</code> <code>StyleSwapOptions</code>"},{"location":"API/classes/maplibregl.Style/#returns_22","title":"Returns","text":"<p><code>boolean</code></p> <p>true if any changes were made; false otherwise</p>"},{"location":"API/classes/maplibregl.Style/#defined-in_22","title":"Defined in","text":"<p>src/style/style.ts:695</p>"},{"location":"API/classes/maplibregl.StyleLayer/","title":"Class: StyleLayer","text":"<p>maplibregl.StyleLayer</p> <p>A base class for style layers</p>"},{"location":"API/classes/maplibregl.StyleLayer/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>StyleLayer</code></p> <p>\u21b3\u21b3 <code>CircleStyleLayer</code></p> <p>\u21b3\u21b3 <code>HeatmapStyleLayer</code></p>"},{"location":"API/classes/maplibregl.StyleLayer/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.StyleLayer/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.StyleLayer/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.StyleLayer/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.StyleLayer/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.StyleLayer/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.StyleLayer/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>StyleLayer</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.StyleLayer/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.StyleLayer/#returns_1","title":"Returns","text":"<p><code>StyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.StyleLayer/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.StyleLayer/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.StyleLayer/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>StyleLayer</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.StyleLayer/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.StyleLayer/#returns_2","title":"Returns","text":"<p><code>StyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.StyleLayer/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.StyleLayer/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.StyleLayer/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>StyleLayer</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.StyleLayer/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.StyleLayer/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>StyleLayer</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.StyleLayer/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.StyleLayer/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.StyleLayer/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>StyleLayer</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.StyleLayer/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.StyleLayer/#returns_4","title":"Returns","text":"<p><code>StyleLayer</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.StyleLayer/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.StyleLayer/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.TerrainControl/","title":"Class: TerrainControl","text":"<p>maplibregl.TerrainControl</p> <p>A <code>TerrainControl</code> control contains a button for turning the terrain on and off.</p> <p><code>Example</code></p> <pre><code>let map = new maplibregl.Map({TerrainControl: false})\n    .addControl(new maplibregl.TerrainControl({\n        source: \"terrain\"\n    }));\n</code></pre>"},{"location":"API/classes/maplibregl.TerrainControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/maplibregl.TerrainControl/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TerrainControl/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>): <code>HTMLElement</code></p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map#addControl internally.</p>"},{"location":"API/classes/maplibregl.TerrainControl/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/maplibregl.TerrainControl/#returns","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/maplibregl.TerrainControl/#implementation-of","title":"Implementation of","text":"<p>IControl.onAdd</p>"},{"location":"API/classes/maplibregl.TerrainControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/terrain_control.ts:31</p>"},{"location":"API/classes/maplibregl.TerrainControl/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(): <code>void</code></p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map#removeControl internally.</p>"},{"location":"API/classes/maplibregl.TerrainControl/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.TerrainControl/#implementation-of_1","title":"Implementation of","text":"<p>IControl.onRemove</p>"},{"location":"API/classes/maplibregl.TerrainControl/#defined-in_1","title":"Defined in","text":"<p>src/ui/control/terrain_control.ts:45</p>"},{"location":"API/classes/maplibregl.ThrottledInvoker/","title":"Class: ThrottledInvoker","text":"<p>maplibregl.ThrottledInvoker</p> <p>Invokes the wrapped function in a non-blocking way when trigger() is called. Invocation requests are ignored until the function was actually invoked.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/","title":"Class: TwoFingersTouchHandler","text":"<p>maplibregl.TwoFingersTouchHandler</p> <p>The <code>TwoFingersTouchHandler</code>s allows the user to zoom, pitch and rotate the map using two fingers</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>TwoFingersTouchHandler</code></li> </ul> <p>\u21b3 <code>TwoFingersTouchPitchHandler</code></p> <p>\u21b3 <code>TwoFingersTouchZoomHandler</code></p> <p>\u21b3 <code>TwoFingersTouchRotateHandler</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchPitch.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#implementation-of","title":"Implementation of","text":"<p>Handler.disable</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:110</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#parameters","title":"Parameters","text":"Name Type <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchPitch.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#implementation-of_1","title":"Implementation of","text":"<p>Handler.enable</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:97</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is active.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#implementation-of_2","title":"Implementation of","text":"<p>Handler.isActive</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:129</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#implementation-of_3","title":"Implementation of","text":"<p>Handler.isEnabled</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:120</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/","title":"Class: TwoFingersTouchPitchHandler","text":"<p>maplibregl.TwoFingersTouchPitchHandler</p> <p>The <code>TwoFingersTouchPitchHandler</code> allows the user to pitch the map by dragging up and down with two fingers.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>TwoFingersTouchHandler</code></li> </ul> <p>\u21b3 <code>TwoFingersTouchPitchHandler</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchPitch.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#inherited-from","title":"Inherited from","text":"<p>TwoFingersTouchHandler.disable</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:110</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#parameters","title":"Parameters","text":"Name Type <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchPitch.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#inherited-from_1","title":"Inherited from","text":"<p>TwoFingersTouchHandler.enable</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:97</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is active.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#inherited-from_2","title":"Inherited from","text":"<p>TwoFingersTouchHandler.isActive</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:129</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#inherited-from_3","title":"Inherited from","text":"<p>TwoFingersTouchHandler.isEnabled</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchPitchHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:120</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/","title":"Class: TwoFingersTouchRotateHandler","text":"<p>maplibregl.TwoFingersTouchRotateHandler</p> <p>The <code>TwoFingersTouchHandler</code>s allows the user to rotate the map two fingers</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>TwoFingersTouchHandler</code></li> </ul> <p>\u21b3 <code>TwoFingersTouchRotateHandler</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchPitch.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#inherited-from","title":"Inherited from","text":"<p>TwoFingersTouchHandler.disable</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:110</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#parameters","title":"Parameters","text":"Name Type <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchPitch.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#inherited-from_1","title":"Inherited from","text":"<p>TwoFingersTouchHandler.enable</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:97</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is active.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#inherited-from_2","title":"Inherited from","text":"<p>TwoFingersTouchHandler.isActive</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:129</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#inherited-from_3","title":"Inherited from","text":"<p>TwoFingersTouchHandler.isEnabled</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchRotateHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:120</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/","title":"Class: TwoFingersTouchZoomHandler","text":"<p>maplibregl.TwoFingersTouchZoomHandler</p> <p>The <code>TwoFingersTouchHandler</code>s allows the user to zoom the map two fingers</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>TwoFingersTouchHandler</code></li> </ul> <p>\u21b3 <code>TwoFingersTouchZoomHandler</code></p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchPitch.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#inherited-from","title":"Inherited from","text":"<p>TwoFingersTouchHandler.disable</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:110</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#parameters","title":"Parameters","text":"Name Type <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchPitch.enable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#inherited-from_1","title":"Inherited from","text":"<p>TwoFingersTouchHandler.enable</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:97</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is active.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#inherited-from_2","title":"Inherited from","text":"<p>TwoFingersTouchHandler.isActive</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:129</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#inherited-from_3","title":"Inherited from","text":"<p>TwoFingersTouchHandler.isEnabled</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:120</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/","title":"Class: TwoFingersTouchZoomRotateHandler","text":"<p>maplibregl.TwoFingersTouchZoomRotateHandler</p> <p>The <code>TwoFingersTouchZoomRotateHandler</code> allows the user to zoom and rotate the map by pinching on a touchscreen.</p> <p>They can zoom with one finger by double tapping and dragging. On the second tap, hold the finger down and drag up or down to zoom in or out.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#disable","title":"disable","text":"<p>\u25b8 disable(): <code>void</code></p> <p>Disables the \"pinch to rotate and zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.disable();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:58</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#disablerotation","title":"disableRotation","text":"<p>\u25b8 disableRotation(): <code>void</code></p> <p>Disables the \"pinch to rotate\" interaction, leaving the \"pinch to zoom\" interaction enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.disableRotation();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:94</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#enable","title":"enable","text":"<p>\u25b8 enable(<code>options?</code>): <code>void</code></p> <p>Enables the \"pinch to rotate and zoom\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#parameters","title":"Parameters","text":"Name Type Description <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code> Options object."},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_2","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.enable();\nmap.touchZoomRotate.enable({ around: 'center' });\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_2","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:43</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#enablerotation","title":"enableRotation","text":"<p>\u25b8 enableRotation(): <code>void</code></p> <p>Enables the \"pinch to rotate\" interaction.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_3","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>map.touchZoomRotate.enable();\nmap.touchZoomRotate.enableRotation();\n</code></pre>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_3","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:108</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#isactive","title":"isActive","text":"<p>\u25b8 isActive(): <code>boolean</code></p> <p>Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the handler is active, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_4","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:81</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#isenabled","title":"isEnabled","text":"<p>\u25b8 isEnabled(): <code>boolean</code></p> <p>Returns a Boolean indicating whether the \"pinch to rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"pinch to rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/maplibregl.TwoFingersTouchZoomRotateHandler/#defined-in_5","title":"Defined in","text":"<p>src/ui/handler/shim/two_fingers_touch.ts:70</p>"},{"location":"API/classes/maplibregl.VectorTileSource/","title":"Class: VectorTileSource","text":"<p>maplibregl.VectorTileSource</p> <p>A source containing vector tiles in Mapbox Vector Tile format. (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>map.addSource('some id', {\n    type: 'vector',\n    url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.addSource('some id', {\n    type: 'vector',\n    tiles: ['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt'],\n    minzoom: 6,\n    maxzoom: 14\n});\n</code></pre> <p><code>Example</code></p> <pre><code>map.getSource('some id').setUrl(\"https://demotiles.maplibre.org/tiles/tiles.json\");\n</code></pre> <p><code>Example</code></p> <pre><code>map.getSource('some id').setTiles(['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt']);\n</code></pre> <p><code>See</code></p> <p>Add a vector tile source</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Evented</code></li> </ul> <p>\u21b3 <code>VectorTileSource</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/maplibregl.VectorTileSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.VectorTileSource/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.VectorTileSource/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from","title":"Inherited from","text":"<p>Evented.listens</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>VectorTileSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_1","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from_1","title":"Inherited from","text":"<p>Evented.off</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>VectorTileSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_2","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from_2","title":"Inherited from","text":"<p>Evented.on</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>VectorTileSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>VectorTileSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from_3","title":"Inherited from","text":"<p>Evented.once</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>VectorTileSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_4","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.VectorTileSource/#returns_4","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#inherited-from_4","title":"Inherited from","text":"<p>Evented.setEventedParent</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#settiles","title":"setTiles","text":"<p>\u25b8 setTiles(<code>tiles</code>): <code>VectorTileSource</code></p> <p>Sets the source <code>tiles</code> property and re-renders the map.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>tiles</code> <code>string</code>[] An array of one or more tile source URLs, as in the TileJSON spec."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_5","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_5","title":"Defined in","text":"<p>src/source/vector_tile_source.ts:155</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#seturl","title":"setUrl","text":"<p>\u25b8 setUrl(<code>url</code>): <code>VectorTileSource</code></p> <p>Sets the source <code>url</code> property and re-renders the map.</p>"},{"location":"API/classes/maplibregl.VectorTileSource/#parameters_6","title":"Parameters","text":"Name Type Description <code>url</code> <code>string</code> A URL to a TileJSON resource. Supported protocols are <code>http:</code> and <code>https:</code>."},{"location":"API/classes/maplibregl.VectorTileSource/#returns_6","title":"Returns","text":"<p><code>VectorTileSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VectorTileSource/#defined-in_6","title":"Defined in","text":"<p>src/source/vector_tile_source.ts:169</p>"},{"location":"API/classes/maplibregl.VideoSource/","title":"Class: VideoSource","text":"<p>maplibregl.VideoSource</p> <p>A data source containing video. (See the Style Specification for detailed documentation of options.)</p> <p><code>Example</code></p> <pre><code>// add to map\nmap.addSource('some id', {\n   type: 'video',\n   url: [\n       'https://www.mapbox.com/blog/assets/baltimore-smoke.mp4',\n       'https://www.mapbox.com/blog/assets/baltimore-smoke.webm'\n   ],\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update\nlet mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\nmap.removeSource('some id');  // remove\n</code></pre> <p><code>See</code></p> <p>Add a video</p> <p>Note that when rendered as a raster layer, the layer's <code>raster-fade-duration</code> property will cause the video to fade in. This happens when playback is started, paused and resumed, or when the video's coordinates are updated. To avoid this behavior, set the layer's <code>raster-fade-duration</code> property to <code>0</code>.</p>"},{"location":"API/classes/maplibregl.VideoSource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ImageSource</code></li> </ul> <p>\u21b3 <code>VideoSource</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#methods","title":"Methods","text":""},{"location":"API/classes/maplibregl.VideoSource/#getvideo","title":"getVideo","text":"<p>\u25b8 getVideo(): <code>HTMLVideoElement</code></p> <p>Returns the HTML <code>video</code> element.</p>"},{"location":"API/classes/maplibregl.VideoSource/#returns","title":"Returns","text":"<p><code>HTMLVideoElement</code></p> <p>The HTML <code>video</code> element.</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in","title":"Defined in","text":"<p>src/source/video_source.ts:136</p>"},{"location":"API/classes/maplibregl.VideoSource/#listens","title":"listens","text":"<p>\u25b8 listens(<code>type</code>): <code>boolean</code></p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/maplibregl.VideoSource/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from","title":"Inherited from","text":"<p>ImageSource.listens</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_1","title":"Defined in","text":"<p>src/util/evented.ts:163</p>"},{"location":"API/classes/maplibregl.VideoSource/#off","title":"off","text":"<p>\u25b8 off(<code>type</code>, <code>listener</code>): <code>VideoSource</code></p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/maplibregl.VideoSource/#returns_2","title":"Returns","text":"<p><code>VideoSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_1","title":"Inherited from","text":"<p>ImageSource.off</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_2","title":"Defined in","text":"<p>src/util/evented.ts:88</p>"},{"location":"API/classes/maplibregl.VideoSource/#on","title":"on","text":"<p>\u25b8 on(<code>type</code>, <code>listener</code>): <code>VideoSource</code></p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/maplibregl.VideoSource/#returns_3","title":"Returns","text":"<p><code>VideoSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_2","title":"Inherited from","text":"<p>ImageSource.on</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_3","title":"Defined in","text":"<p>src/util/evented.ts:74</p>"},{"location":"API/classes/maplibregl.VideoSource/#once","title":"once","text":"<p>\u25b8 once(<code>type</code>, <code>listener?</code>): <code>Promise</code>\\&lt;<code>any</code>&gt; | <code>VideoSource</code></p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_3","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/maplibregl.VideoSource/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt; | <code>VideoSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_3","title":"Inherited from","text":"<p>ImageSource.once</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_4","title":"Defined in","text":"<p>src/util/evented.ts:104</p>"},{"location":"API/classes/maplibregl.VideoSource/#pause","title":"pause","text":"<p>\u25b8 pause(): <code>void</code></p> <p>Pauses the video.</p>"},{"location":"API/classes/maplibregl.VideoSource/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_5","title":"Defined in","text":"<p>src/source/video_source.ts:104</p>"},{"location":"API/classes/maplibregl.VideoSource/#play","title":"play","text":"<p>\u25b8 play(): <code>void</code></p> <p>Plays the video.</p>"},{"location":"API/classes/maplibregl.VideoSource/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_6","title":"Defined in","text":"<p>src/source/video_source.ts:113</p>"},{"location":"API/classes/maplibregl.VideoSource/#prepare","title":"prepare","text":"<p>\u25b8 prepare(): <code>this</code></p> <p>Sets the video's coordinates and re-renders the map.</p>"},{"location":"API/classes/maplibregl.VideoSource/#returns_7","title":"Returns","text":"<p><code>this</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#overrides","title":"Overrides","text":"<p>ImageSource.prepare</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_7","title":"Defined in","text":"<p>src/source/video_source.ts:155</p>"},{"location":"API/classes/maplibregl.VideoSource/#seek","title":"seek","text":"<p>\u25b8 seek(<code>seconds</code>): <code>void</code></p> <p>Sets playback to a timestamp, in seconds.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_4","title":"Parameters","text":"Name Type <code>seconds</code> <code>number</code>"},{"location":"API/classes/maplibregl.VideoSource/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_8","title":"Defined in","text":"<p>src/source/video_source.ts:122</p>"},{"location":"API/classes/maplibregl.VideoSource/#setcoordinates","title":"setCoordinates","text":"<p>\u25b8 setCoordinates(<code>coordinates</code>): <code>VideoSource</code></p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_5","title":"Parameters","text":"Name Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/maplibregl.VideoSource/#returns_9","title":"Returns","text":"<p><code>VideoSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_4","title":"Inherited from","text":"<p>ImageSource.setCoordinates</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_9","title":"Defined in","text":"<p>src/source/image_source.ts:210</p>"},{"location":"API/classes/maplibregl.VideoSource/#seteventedparent","title":"setEventedParent","text":"<p>\u25b8 setEventedParent(<code>parent?</code>, <code>data?</code>): <code>VideoSource</code></p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_6","title":"Parameters","text":"Name Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/maplibregl.VideoSource/#returns_10","title":"Returns","text":"<p><code>VideoSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_5","title":"Inherited from","text":"<p>ImageSource.setEventedParent</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_10","title":"Defined in","text":"<p>src/util/evented.ts:175</p>"},{"location":"API/classes/maplibregl.VideoSource/#updateimage","title":"updateImage","text":"<p>\u25b8 updateImage(<code>options</code>): <code>VideoSource</code></p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/maplibregl.VideoSource/#parameters_7","title":"Parameters","text":"Name Type Description <code>options</code> <code>UpdateImageOptions</code> The options object."},{"location":"API/classes/maplibregl.VideoSource/#returns_11","title":"Returns","text":"<p><code>VideoSource</code></p> <p><code>this</code></p>"},{"location":"API/classes/maplibregl.VideoSource/#inherited-from_6","title":"Inherited from","text":"<p>ImageSource.updateImage</p>"},{"location":"API/classes/maplibregl.VideoSource/#defined-in_11","title":"Defined in","text":"<p>src/source/image_source.ts:167</p>"},{"location":"API/classes/maplibregl.WorkerPool/","title":"Class: WorkerPool","text":"<p>maplibregl.WorkerPool</p> <p>Constructs a worker pool.</p>"},{"location":"API/enums/maplibregl.ResourceType/","title":"Enumeration: ResourceType","text":"<p>maplibregl.ResourceType</p> <p>A type of MapLibre resource.</p>"},{"location":"API/enums/maplibregl.ResourceType/#enumeration-members","title":"Enumeration Members","text":""},{"location":"API/enums/maplibregl.ResourceType/#glyphs","title":"Glyphs","text":"<p>\u2022 Glyphs = <code>\"Glyphs\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in","title":"Defined in","text":"<p>src/util/request_manager.ts:7</p>"},{"location":"API/enums/maplibregl.ResourceType/#image","title":"Image","text":"<p>\u2022 Image = <code>\"Image\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_1","title":"Defined in","text":"<p>src/util/request_manager.ts:8</p>"},{"location":"API/enums/maplibregl.ResourceType/#source","title":"Source","text":"<p>\u2022 Source = <code>\"Source\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_2","title":"Defined in","text":"<p>src/util/request_manager.ts:9</p>"},{"location":"API/enums/maplibregl.ResourceType/#spriteimage","title":"SpriteImage","text":"<p>\u2022 SpriteImage = <code>\"SpriteImage\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_3","title":"Defined in","text":"<p>src/util/request_manager.ts:10</p>"},{"location":"API/enums/maplibregl.ResourceType/#spritejson","title":"SpriteJSON","text":"<p>\u2022 SpriteJSON = <code>\"SpriteJSON\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_4","title":"Defined in","text":"<p>src/util/request_manager.ts:11</p>"},{"location":"API/enums/maplibregl.ResourceType/#style","title":"Style","text":"<p>\u2022 Style = <code>\"Style\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_5","title":"Defined in","text":"<p>src/util/request_manager.ts:12</p>"},{"location":"API/enums/maplibregl.ResourceType/#tile","title":"Tile","text":"<p>\u2022 Tile = <code>\"Tile\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_6","title":"Defined in","text":"<p>src/util/request_manager.ts:13</p>"},{"location":"API/enums/maplibregl.ResourceType/#unknown","title":"Unknown","text":"<p>\u2022 Unknown = <code>\"Unknown\"</code></p>"},{"location":"API/enums/maplibregl.ResourceType/#defined-in_7","title":"Defined in","text":"<p>src/util/request_manager.ts:14</p>"},{"location":"API/interfaces/maplibregl.AttributeBinder/","title":"Interface: AttributeBinder","text":"<p>maplibregl.AttributeBinder</p> <p><code>Binder</code> is the interface definition for the strategies for constructing,  uploading, and binding paint property data as GLSL attributes. Most style-  spec properties have a 1:1 relationship to shader attribute/uniforms, but  some require multiple values per feature to be passed to the GPU, and in  those cases we bind multiple attributes/uniforms.</p> <p>It has three implementations, one for each of the three strategies we use:</p> <ul> <li>For constant properties -- those whose value is a constant, or the constant    result of evaluating a camera expression at a particular camera position -- we    don't need a vertex attribute buffer, and instead use a uniform.</li> <li>For data expressions, we use a vertex buffer with a single attribute value,    the evaluated result of the source function for the given feature.</li> <li>For composite expressions, we use a vertex buffer with two attributes: min and    max values covering the range of zooms at which we expect the tile to be    displayed. These values are calculated by evaluating the composite expression for    the given feature at strategically chosen zoom levels. In addition to this    attribute data, we also use a uniform value which the shader uses to interpolate    between the min and max value at the final displayed zoom level. The use of a    uniform allows us to cheaply update the value on every frame.</li> </ul> <p>Note that the shader source varies depending on whether we're using a uniform or  attribute. We dynamically compile shaders at runtime to accommodate this.</p>"},{"location":"API/interfaces/maplibregl.Bucket/","title":"Interface: Bucket","text":"<p>maplibregl.Bucket</p> <p>The <code>Bucket</code> interface is the single point of knowledge about turning vector tiles into WebGL buffers.</p> <p><code>Bucket</code> is an abstract interface. An implementation exists for each style layer type. Create a bucket via the <code>StyleLayer#createBucket</code> method.</p> <p>The concrete bucket types, using layout options from the style layer, transform feature geometries into vertex and index data for use by the vertex shader.  They also (via <code>ProgramConfiguration</code>) use feature properties and the zoom level to populate the attributes needed for data-driven styling.</p> <p>Buckets are designed to be built on a worker thread and then serialized and transferred back to the main thread for rendering.  On the worker side, a bucket's vertex, index, and attribute data is stored in <code>bucket.arrays: ArrayGroup</code>. When a bucket's data is serialized and sent back to the main thread, is gets deserialized (using <code>new Bucket(serializedBucketData)</code>, with the array data now stored in <code>bucket.buffers: BufferGroup</code>. BufferGroups hold the same data as ArrayGroups, but are tuned for consumption by WebGL.</p>"},{"location":"API/interfaces/maplibregl.Bucket/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.Bucket/#destroy","title":"destroy","text":"<p>\u25b8 destroy(): <code>void</code></p> <p>Release the WebGL resources associated with the buffers. Note that because buckets are shared between layers having the same layout properties, they must be destroyed in groups (all buckets for a tile, or all symbol buckets).</p>"},{"location":"API/interfaces/maplibregl.Bucket/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.Bucket/#defined-in","title":"Defined in","text":"<p>src/data/bucket.ts:92</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/","title":"Interface: CustomLayerInterface","text":"<p>maplibregl.CustomLayerInterface</p> <p>Interface for custom style layers. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Custom layers allow a user to render directly into the map's GL context using the map's camera. These layers can be added between any regular layers using Map#addLayer.</p> <p>Custom layers must have a unique <code>id</code> and must have the <code>type</code> of <code>\"custom\"</code>. They must implement <code>render</code> and may implement <code>prerender</code>, <code>onAdd</code> and <code>onRemove</code>. They can trigger rendering using Map#triggerRepaint and they should appropriately handle MapContextEvent with <code>webglcontextlost</code> and <code>webglcontextrestored</code>.</p> <p>The <code>renderingMode</code> property controls whether the layer is treated as a <code>\"2d\"</code> or <code>\"3d\"</code> map layer. Use: - <code>\"renderingMode\": \"3d\"</code> to use the depth buffer and share it with other layers - <code>\"renderingMode\": \"2d\"</code> to add a layer with no depth. If you need to use the depth buffer for a <code>\"2d\"</code> layer you must use an offscreen   framebuffer and CustomLayerInterface#prerender</p> <p><code>Example</code></p> <p>Custom layer implemented as ES6 class <pre><code>class NullIslandLayer {\n    constructor() {\n        this.id = 'null-island';\n        this.type = 'custom';\n        this.renderingMode = '2d';\n    }\n\n    onAdd(map, gl) {\n        const vertexSource = `\n        uniform mat4 u_matrix;\n        void main() {\n            gl_Position = u_matrix * vec4(0.5, 0.5, 0.0, 1.0);\n            gl_PointSize = 20.0;\n        }`;\n\n        const fragmentSource = `\n        void main() {\n            fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }`;\n\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertexSource);\n        gl.compileShader(vertexShader);\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragmentSource);\n        gl.compileShader(fragmentShader);\n\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n    }\n\n    render(gl, matrix) {\n        gl.useProgram(this.program);\n        gl.uniformMatrix4fv(gl.getUniformLocation(this.program, \"u_matrix\"), false, matrix);\n        gl.drawArrays(gl.POINTS, 0, 1);\n    }\n}\n\nmap.on('load', function() {\n    map.addLayer(new NullIslandLayer());\n});\n</code></pre></p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>, <code>gl</code>): <code>void</code></p> <p>Optional method called when the layer has been added to the Map with Map#addLayer. This gives the layer a chance to initialize gl resources and register event listeners.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The gl context for the map."},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:125</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(<code>map</code>, <code>gl</code>): <code>void</code></p> <p>Optional method called when the layer has been removed from the Map with Map#removeLayer. This gives the layer a chance to clean up gl resources and event listeners.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#parameters_1","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The gl context for the map."},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_1","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:133</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#id","title":"id","text":"<p>\u2022 id: <code>string</code></p> <p>A unique layer id.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_2","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:86</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#prerender","title":"prerender","text":"<p>\u2022 <code>Optional</code> prerender: <code>CustomRenderMethod</code></p> <p>Optional method called during a render frame to allow a layer to prepare resources or render into a texture.</p> <p>The layer cannot make any assumptions about the current GL state and must bind a framebuffer before rendering.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_3","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:117</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#render","title":"render","text":"<p>\u2022 render: <code>CustomRenderMethod</code></p> <p>Called during a render frame allowing the layer to draw into the GL context.</p> <p>The layer can assume blending and depth state is set to allow the layer to properly blend and clip other layers. The layer cannot make any other assumptions about the current GL state.</p> <p>If the layer needs to render to a texture, it should implement the <code>prerender</code> method to do this and only use the <code>render</code> method for drawing directly into the main framebuffer.</p> <p>The blend function is set to <code>gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)</code>. This expects colors to be provided in premultiplied alpha form where the <code>r</code>, <code>g</code> and <code>b</code> values are already multiplied by the <code>a</code> value. If you are unable to provide colors in premultiplied form you may want to change the blend function to <code>gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA)</code>.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_4","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:111</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#renderingmode","title":"renderingMode","text":"<p>\u2022 <code>Optional</code> renderingMode: <code>\"2d\"</code> | <code>\"3d\"</code></p> <p>Either <code>\"2d\"</code> or <code>\"3d\"</code>. Defaults to <code>\"2d\"</code>.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_5","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:94</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#type","title":"type","text":"<p>\u2022 type: <code>\"custom\"</code></p> <p>The layer's type. Must be <code>\"custom\"</code>.</p>"},{"location":"API/interfaces/maplibregl.CustomLayerInterface/#defined-in_6","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:90</p>"},{"location":"API/interfaces/maplibregl.Handler/","title":"Interface: Handler","text":"<p>maplibregl.Handler</p> <p>Handlers interpret dom events and return camera changes that should be applied to the map (<code>HandlerResult</code>s). The camera changes are all deltas. The handler itself should have no knowledge of the map's current state. This makes it easier to merge multiple results and keeps handlers simpler. For example, if there is a mousedown and mousemove, the mousePan handler would return a <code>panDelta</code> on the mousemove.</p>"},{"location":"API/interfaces/maplibregl.Handler/#implemented-by","title":"Implemented by","text":"<ul> <li><code>BoxZoomHandler</code></li> <li><code>ClickZoomHandler</code></li> <li><code>KeyboardHandler</code></li> <li><code>ScrollZoomHandler</code></li> <li><code>TwoFingersTouchHandler</code></li> </ul>"},{"location":"API/interfaces/maplibregl.Handler/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.Handler/#reset","title":"reset","text":"<p>\u25b8 reset(): <code>void</code></p> <p><code>reset</code> can be called by the manager at any time and must reset everything to it's original state</p>"},{"location":"API/interfaces/maplibregl.Handler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.Handler/#defined-in","title":"Defined in","text":"<p>src/ui/handler_manager.ts:48</p>"},{"location":"API/interfaces/maplibregl.Handler/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.Handler/#renderframe","title":"renderFrame","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> renderFrame: () =&gt; <code>void</code> | <code>HandlerResult</code></p>"},{"location":"API/interfaces/maplibregl.Handler/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (): <code>void</code> | <code>HandlerResult</code></p> <p><code>renderFrame</code> is the only non-dom event. It is called during render frames and can be used to smooth camera changes (see scroll handler).</p>"},{"location":"API/interfaces/maplibregl.Handler/#returns_1","title":"Returns","text":"<p><code>void</code> | <code>HandlerResult</code></p>"},{"location":"API/interfaces/maplibregl.Handler/#defined-in_1","title":"Defined in","text":"<p>src/ui/handler_manager.ts:70</p>"},{"location":"API/interfaces/maplibregl.IControl/","title":"Interface: IControl","text":"<p>maplibregl.IControl</p> <p>Interface for interactive controls added to the map. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Controls must implement <code>onAdd</code> and <code>onRemove</code>, and must own an element, which is often a <code>div</code> element. To use MapLibre GL JS's default control styling, add the <code>maplibregl-ctrl</code> class to your control's node.</p> <p><code>Example</code></p> <p>Control implemented as ES6 class <pre><code>class HelloWorldControl {\n    onAdd(map) {\n        this._map = map;\n        this._container = document.createElement('div');\n        this._container.className = 'maplibregl-ctrl';\n        this._container.textContent = 'Hello, world';\n        return this._container;\n    }\n\n    onRemove() {\n        this._container.parentNode.removeChild(this._container);\n        this._map = undefined;\n    }\n}\n\n// Control implemented as ES5 prototypical class\nfunction HelloWorldControl() { }\n\nHelloWorldControl.prototype.onAdd = function(map) {\n    this._map = map;\n    this._container = document.createElement('div');\n    this._container.className = 'maplibregl-ctrl';\n    this._container.textContent = 'Hello, world';\n    return this._container;\n};\n\nHelloWorldControl.prototype.onRemove = function () {\n     this._container.parentNode.removeChild(this._container);\n     this._map = undefined;\n};\n</code></pre></p>"},{"location":"API/interfaces/maplibregl.IControl/#implemented-by","title":"Implemented by","text":"<ul> <li><code>AttributionControl</code></li> <li><code>FullscreenControl</code></li> <li><code>GeolocateControl</code></li> <li><code>LogoControl</code></li> <li><code>NavigationControl</code></li> <li><code>ScaleControl</code></li> <li><code>TerrainControl</code></li> </ul>"},{"location":"API/interfaces/maplibregl.IControl/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.IControl/#onadd","title":"onAdd","text":"<p>\u25b8 onAdd(<code>map</code>): <code>HTMLElement</code></p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map#addControl internally.</p>"},{"location":"API/interfaces/maplibregl.IControl/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/interfaces/maplibregl.IControl/#returns","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/interfaces/maplibregl.IControl/#defined-in","title":"Defined in","text":"<p>src/ui/control/control.ts:66</p>"},{"location":"API/interfaces/maplibregl.IControl/#onremove","title":"onRemove","text":"<p>\u25b8 onRemove(<code>map</code>): <code>void</code></p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map#removeControl internally.</p>"},{"location":"API/interfaces/maplibregl.IControl/#parameters_1","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> the Map this control will be removed from"},{"location":"API/interfaces/maplibregl.IControl/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.IControl/#defined-in_1","title":"Defined in","text":"<p>src/ui/control/control.ts:74</p>"},{"location":"API/interfaces/maplibregl.IControl/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.IControl/#getdefaultposition","title":"getDefaultPosition","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> getDefaultPosition: () =&gt; <code>ControlPosition</code></p>"},{"location":"API/interfaces/maplibregl.IControl/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (): <code>ControlPosition</code></p> <p>Optionally provide a default position for this control. If this method is implemented and Map#addControl is called without the <code>position</code> parameter, the value returned by getDefaultPosition will be used as the control's position.</p>"},{"location":"API/interfaces/maplibregl.IControl/#returns_2","title":"Returns","text":"<p><code>ControlPosition</code></p> <p>a control position, one of the values valid in addControl.</p>"},{"location":"API/interfaces/maplibregl.IControl/#defined-in_2","title":"Defined in","text":"<p>src/ui/control/control.ts:83</p>"},{"location":"API/interfaces/maplibregl.Source/","title":"Interface: Source","text":"<p>maplibregl.Source</p> <p>The <code>Source</code> interface must be implemented by each source type, including \"core\" types (<code>vector</code>, <code>raster</code>, <code>video</code>, etc.) and all custom, third-party types.</p> <p><code>data</code> - Fired with <code>{dataType: 'source', sourceDataType: 'metadata'}</code> to indicate that any necessary metadata has been loaded so that it's okay to call <code>loadTile</code>; and with <code>{dataType: 'source', sourceDataType: 'content'}</code> to indicate that the source data has changed, so that any current caches should be flushed.</p>"},{"location":"API/interfaces/maplibregl.Source/#implemented-by","title":"Implemented by","text":"<ul> <li><code>GeoJSONSource</code></li> <li><code>ImageSource</code></li> <li><code>RasterDEMTileSource</code></li> <li><code>RasterTileSource</code></li> <li><code>VectorTileSource</code></li> </ul>"},{"location":"API/interfaces/maplibregl.Source/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.Source/#serialize","title":"serialize","text":"<p>\u25b8 serialize(): <code>any</code></p>"},{"location":"API/interfaces/maplibregl.Source/#returns","title":"Returns","text":"<p><code>any</code></p> <p>A plain (stringifiable) JS object representing the current state of the source. Creating a source using the returned object as the <code>options</code> should result in a Source that is equivalent to this one.</p>"},{"location":"API/interfaces/maplibregl.Source/#defined-in","title":"Defined in","text":"<p>src/source/source.ts:68</p>"},{"location":"API/interfaces/maplibregl.Source/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.Source/#id","title":"id","text":"<p>\u2022 id: <code>string</code></p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/interfaces/maplibregl.Source/#defined-in_1","title":"Defined in","text":"<p>src/source/source.ts:35</p>"},{"location":"API/interfaces/maplibregl.Source/#istileclipped","title":"isTileClipped","text":"<p>\u2022 <code>Optional</code> isTileClipped: <code>boolean</code></p> <p><code>false</code> if tiles can be drawn outside their boundaries, <code>true</code> if they cannot.</p>"},{"location":"API/interfaces/maplibregl.Source/#defined-in_2","title":"Defined in","text":"<p>src/source/source.ts:47</p>"},{"location":"API/interfaces/maplibregl.Source/#reparseoverscaled","title":"reparseOverscaled","text":"<p>\u2022 <code>Optional</code> reparseOverscaled: <code>boolean</code></p> <p><code>true</code> if tiles should be sent back to the worker for each overzoomed zoom level, <code>false</code> if not.</p>"},{"location":"API/interfaces/maplibregl.Source/#defined-in_3","title":"Defined in","text":"<p>src/source/source.ts:52</p>"},{"location":"API/interfaces/maplibregl.Source/#roundzoom","title":"roundZoom","text":"<p>\u2022 <code>Optional</code> roundZoom: <code>boolean</code></p> <p><code>true</code> if zoom levels are rounded to the nearest integer in the source data, <code>false</code> if they are floor-ed to the nearest integer.</p>"},{"location":"API/interfaces/maplibregl.Source/#defined-in_4","title":"Defined in","text":"<p>src/source/source.ts:43</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/","title":"Interface: StyleImageInterface","text":"<p>maplibregl.StyleImageInterface</p> <p>Interface for dynamically generated style images. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Images implementing this interface can be redrawn for every frame. They can be used to animate icons and patterns or make them respond to user input. Style images can implement a StyleImageInterface#render method. The method is called every frame and can be used to update the image.</p> <p><code>See</code></p> <p>Add an animated icon to the map.</p> <p><code>Example</code></p> <pre><code>let flashingSquare = {\n    width: 64,\n    height: 64,\n    data: new Uint8Array(64 * 64 * 4),\n\n    onAdd: function(map) {\n        this.map = map;\n    },\n\n    render: function() {\n        // keep repainting while the icon is on the map\n        this.map.triggerRepaint();\n\n        // alternate between black and white based on the time\n        let value = Math.round(Date.now() / 1000) % 2 === 0  ? 255 : 0;\n\n        // check if image needs to be changed\n        if (value !== this.previousValue) {\n            this.previousValue = value;\n\n            let bytesPerPixel = 4;\n            for (let x = 0; x &lt; this.width; x++) {\n                for (let y = 0; y &lt; this.height; y++) {\n                    let offset = (y * this.width + x) * bytesPerPixel;\n                    this.data[offset + 0] = value;\n                    this.data[offset + 1] = value;\n                    this.data[offset + 2] = value;\n                    this.data[offset + 3] = 255;\n                }\n            }\n\n            // return true to indicate that the image changed\n            return true;\n        }\n    }\n }\n\n map.addImage('flashing_square', flashingSquare);\n</code></pre>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.StyleImageInterface/#onadd","title":"onAdd","text":"<p>\u2022 <code>Optional</code> onAdd: (<code>map</code>: <code>Map</code>, <code>id</code>: <code>string</code>) =&gt; <code>void</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>map</code>, <code>id</code>): <code>void</code></p> <p>Optional method called when the layer has been added to the Map with Map#addImage.</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#parameters","title":"Parameters","text":"Name Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>id</code> <code>string</code> -"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in","title":"Defined in","text":"<p>src/style/style_image.ts:134</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#onremove","title":"onRemove","text":"<p>\u2022 <code>Optional</code> onRemove: () =&gt; <code>void</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#type-declaration_1","title":"Type declaration","text":"<p>\u25b8 (): <code>void</code></p> <p>Optional method called when the icon is removed from the map with Map#removeImage. This gives the image a chance to clean up resources and event listeners.</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in_1","title":"Defined in","text":"<p>src/style/style_image.ts:139</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#render","title":"render","text":"<p>\u2022 <code>Optional</code> render: () =&gt; <code>boolean</code></p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#type-declaration_2","title":"Type declaration","text":"<p>\u25b8 (): <code>boolean</code></p> <p>This method is called once before every frame where the icon will be used. The method can optionally update the image's <code>data</code> member with a new image.</p> <p>If the method updates the image it must return <code>true</code> to commit the change. If the method returns <code>false</code> or nothing the image is assumed to not have changed.</p> <p>If updates are infrequent it maybe easier to use Map#updateImage to update the image instead of implementing this method.</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if this method updated the image. <code>false</code> if the image was not changed.</p>"},{"location":"API/interfaces/maplibregl.StyleImageInterface/#defined-in_2","title":"Defined in","text":"<p>src/style/style_image.ts:128</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/","title":"Interface: WorkerSource","text":"<p>maplibregl.WorkerSource</p> <p>May be implemented by custom source types to provide code that can be run on the WebWorkers. In addition to providing a custom WorkerSource#loadTile, any other methods attached to a <code>WorkerSource</code> implementation may also be targeted by the Source via <code>dispatcher.getActor().send('source-type.methodname', params, callback)</code>.</p> <p><code>See</code></p> <p>Map#addSourceType</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#methods","title":"Methods","text":""},{"location":"API/interfaces/maplibregl.WorkerSource/#aborttile","title":"abortTile","text":"<p>\u25b8 abortTile(<code>params</code>, <code>callback</code>): <code>void</code></p> <p>Aborts loading a tile that is in progress.</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#parameters","title":"Parameters","text":"Name Type <code>params</code> <code>TileParameters</code> <code>callback</code> <code>WorkerTileCallback</code>"},{"location":"API/interfaces/maplibregl.WorkerSource/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#defined-in","title":"Defined in","text":"<p>src/source/worker_source.ts:102</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#loadtile","title":"loadTile","text":"<p>\u25b8 loadTile(<code>params</code>, <code>callback</code>): <code>void</code></p> <p>Loads a tile from the given params and parse it into buckets ready to send back to the main thread for rendering.  Should call the callback with: <code>{ buckets, featureIndex, collisionIndex, rawTileData}</code>.</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#parameters_1","title":"Parameters","text":"Name Type <code>params</code> <code>WorkerTileParameters</code> <code>callback</code> <code>WorkerTileCallback</code>"},{"location":"API/interfaces/maplibregl.WorkerSource/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#defined-in_1","title":"Defined in","text":"<p>src/source/worker_source.ts:93</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#reloadtile","title":"reloadTile","text":"<p>\u25b8 reloadTile(<code>params</code>, <code>callback</code>): <code>void</code></p> <p>Re-parses a tile that has already been loaded.  Yields the same data as WorkerSource#loadTile.</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#parameters_2","title":"Parameters","text":"Name Type <code>params</code> <code>WorkerTileParameters</code> <code>callback</code> <code>WorkerTileCallback</code>"},{"location":"API/interfaces/maplibregl.WorkerSource/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#defined-in_2","title":"Defined in","text":"<p>src/source/worker_source.ts:98</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#removetile","title":"removeTile","text":"<p>\u25b8 removeTile(<code>params</code>, <code>callback</code>): <code>void</code></p> <p>Removes this tile from any local caches.</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#parameters_3","title":"Parameters","text":"Name Type <code>params</code> <code>TileParameters</code> <code>callback</code> <code>WorkerTileCallback</code>"},{"location":"API/interfaces/maplibregl.WorkerSource/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#defined-in_3","title":"Defined in","text":"<p>src/source/worker_source.ts:106</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#properties","title":"Properties","text":""},{"location":"API/interfaces/maplibregl.WorkerSource/#removesource","title":"removeSource","text":"<p>\u2022 <code>Optional</code> removeSource: (<code>params</code>: { <code>source</code>: <code>string</code>  }, <code>callback</code>: <code>WorkerTileCallback</code>) =&gt; <code>void</code></p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>params</code>, <code>callback</code>): <code>void</code></p> <p>Tells the WorkerSource to abort in-progress tasks and release resources. The foreground Source is responsible for ensuring that 'removeSource' is the last message sent to the WorkerSource.</p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#parameters_4","title":"Parameters","text":"Name Type <code>params</code> <code>Object</code> <code>params.source</code> <code>string</code> <code>callback</code> <code>WorkerTileCallback</code>"},{"location":"API/interfaces/maplibregl.WorkerSource/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/maplibregl.WorkerSource/#defined-in_4","title":"Defined in","text":"<p>src/source/worker_source.ts:112</p>"},{"location":"API/modules/maplibregl/","title":"Module: maplibregl","text":""},{"location":"API/modules/maplibregl/#main","title":"Main","text":"<ul> <li>Map</li> </ul>"},{"location":"API/modules/maplibregl/#markers-and-controls","title":"Markers and Controls","text":"<ul> <li>AttributionControl</li> <li>FullscreenControl</li> <li>GeolocateControl</li> <li>Hash</li> <li>LogoControl</li> <li>Marker</li> <li>NavigationControl</li> <li>Popup</li> <li>ScaleControl</li> <li>TerrainControl</li> </ul>"},{"location":"API/modules/maplibregl/#geography-and-geometry","title":"Geography and Geometry","text":"<ul> <li>EdgeInsets</li> <li>LngLat</li> <li>LngLatBounds</li> <li>MercatorCoordinate</li> <li>LngLatBoundsLike</li> <li>LngLatLike</li> <li>PaddingOptions</li> <li>PointLike</li> </ul>"},{"location":"API/modules/maplibregl/#handlers","title":"Handlers","text":"<ul> <li>BoxZoomHandler</li> <li>DoubleClickZoomHandler</li> <li>DragPanHandler</li> <li>DragRotateHandler</li> <li>KeyboardHandler</li> <li>ScrollZoomHandler</li> <li>TwoFingersTouchHandler</li> <li>TwoFingersTouchPitchHandler</li> <li>TwoFingersTouchRotateHandler</li> <li>TwoFingersTouchZoomHandler</li> <li>TwoFingersTouchZoomRotateHandler</li> </ul>"},{"location":"API/modules/maplibregl/#sources","title":"Sources","text":"<ul> <li>CanvasSource</li> <li>GeoJSONSource</li> <li>ImageSource</li> <li>RasterDEMTileSource</li> <li>RasterTileSource</li> <li>VectorTileSource</li> <li>VideoSource</li> <li>Source</li> </ul>"},{"location":"API/modules/maplibregl/#event-related","title":"Event Related","text":"<ul> <li>Evented</li> <li>MapTouchEvent</li> <li>MapWheelEvent</li> <li>MapContextEvent</li> <li>MapDataEvent</li> <li>MapEventType</li> <li>MapLayerEventType</li> <li>MapLayerMouseEvent</li> <li>MapLayerTouchEvent</li> <li>MapLibreEvent</li> <li>MapLibreZoomEvent</li> <li>MapSourceDataEvent</li> <li>MapStyleDataEvent</li> <li>MapStyleImageMissingEvent</li> <li>MapTerrainEvent</li> </ul>"},{"location":"API/modules/maplibregl/#classes","title":"Classes","text":"<ul> <li>AJAXError</li> <li>Actor</li> <li>CanonicalTileID</li> <li>CircleStyleLayer</li> <li>ClickZoomHandler</li> <li>Dispatcher</li> <li>Event</li> <li>GeoJSONFeature</li> <li>HeatmapStyleLayer</li> <li>Layout</li> <li>MapMouseEvent</li> <li>OverscaledTileID</li> <li>RGBAImage</li> <li>Style</li> <li>StyleLayer</li> <li>ThrottledInvoker</li> <li>WorkerPool</li> </ul>"},{"location":"API/modules/maplibregl/#enumerations","title":"Enumerations","text":"<ul> <li>ResourceType</li> </ul>"},{"location":"API/modules/maplibregl/#events","title":"Events","text":"<ul> <li>FullscreenControl</li> <li>GeolocateControl</li> <li>Marker</li> <li>Popup</li> <li>Source</li> </ul>"},{"location":"API/modules/maplibregl/#interfaces","title":"Interfaces","text":"<ul> <li>AttributeBinder</li> <li>Bucket</li> <li>CustomLayerInterface</li> <li>Handler</li> <li>IControl</li> <li>StyleImageInterface</li> <li>WorkerSource</li> </ul>"},{"location":"API/modules/maplibregl/#type-aliases","title":"Type Aliases","text":"<ul> <li>AddLayerObject</li> <li>Alignment</li> <li>AnimationOptions</li> <li>AroundCenterOptions</li> <li>AttributionOptions</li> <li>Callback</li> <li>CameraForBoundsOptions</li> <li>CameraOptions</li> <li>CameraUpdateTransformFunction</li> <li>Cancelable</li> <li>CanvasSourceSpecification</li> <li>CenterZoomBearing</li> <li>Config</li> <li>ControlPosition</li> <li>Coordinates</li> <li>CrossFaded</li> <li>CustomRenderMethod</li> <li>DashEntry</li> <li>DistributiveKeys</li> <li>DistributiveOmit</li> <li>DragPanOptions</li> <li>ErrorCallback</li> <li>ExpiryData</li> <li>FeatureIdentifier</li> <li>FitBoundsOptions</li> <li>FlyToOptions</li> <li>FullscreenOptions</li> <li>GeoJSONFeatureDiff</li> <li>GeoJSONFeatureId</li> <li>GeoJSONSourceDiff</li> <li>GeolocateOptions</li> <li>GestureOptions</li> <li>GetImageCallback</li> <li>GlyphPosition</li> <li>GlyphPositions</li> <li>GridKey</li> <li>HandlerResult</li> <li>JumpToOptions</li> <li>Listener</li> <li>LogoOptions</li> <li>MapGeoJSONFeature</li> <li>MapOptions</li> <li>MapSourceDataType</li> <li>MarkerOptions</li> <li>NavigationOptions</li> <li>Offset</li> <li>OverlapMode</li> <li>PositionAnchor</li> <li>PossiblyEvaluatedValue</li> <li>QueryRenderedFeaturesOptions</li> <li>QuerySourceFeatureOptions</li> <li>Rect</li> <li>RequestParameters</li> <li>RequestTransformFunction</li> <li>RequireAtLeastOne</li> <li>ResponseCallback</li> <li>ScaleOptions</li> <li>SerializedStructArray</li> <li>SetClusterOptions</li> <li>SourceClass</li> <li>SourceStatics</li> <li>SpriteOnDemandStyleImage</li> <li>StyleImage</li> <li>StyleImageData</li> <li>StyleImageMetadata</li> <li>StyleOptions</li> <li>StyleSetterOptions</li> <li>StyleSwapOptions</li> <li>SymbolQuad</li> <li>TileState</li> <li>Transferable</li> <li>TransformStyleFunction</li> <li>Unit</li> <li>UpdateImageOptions</li> </ul>"},{"location":"API/types/maplibregl.AddLayerObject/","title":"Type alias: AddLayerObject","text":"<p>maplibregl.AddLayerObject</p> <p>\u01ac AddLayerObject: <code>LayerSpecification</code> | <code>Omit</code>\\&lt;<code>LayerSpecification</code>, <code>\"source\"</code>&gt; &amp; { <code>source</code>: <code>SourceSpecification</code>  } | <code>CustomLayerInterface</code></p> <p>Specifies a layer to be added to a Style. In addition to a standard LayerSpecification or a CustomLayerInterface, a LayerSpecification with an embedded SourceSpecification can also be provided.</p>"},{"location":"API/types/maplibregl.AddLayerObject/#defined-in","title":"Defined in","text":"<p>src/style/style.ts:198</p>"},{"location":"API/types/maplibregl.Alignment/","title":"Type alias: Alignment","text":"<p>maplibregl.Alignment</p> <p>\u01ac Alignment: <code>\"map\"</code> | <code>\"viewport\"</code> | <code>\"auto\"</code></p> <p>Alignment options of rotation and pitch</p>"},{"location":"API/types/maplibregl.Alignment/#defined-in","title":"Defined in","text":"<p>src/ui/marker.ts:17</p>"},{"location":"API/types/maplibregl.AnimationOptions/","title":"Type alias: AnimationOptions","text":"<p>maplibregl.AnimationOptions</p> <p>\u01ac AnimationOptions: <code>Object</code></p> <p>Options common to map movement methods that involve animation, such as Map#panBy and Map#easeTo, controlling the duration and easing function of the animation. All properties are optional.</p>"},{"location":"API/types/maplibregl.AnimationOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>animate?</code> <code>boolean</code> If <code>false</code>, no animation will occur. <code>duration?</code> <code>number</code> The animation's duration, measured in milliseconds. <code>easing?</code> (<code>_</code>: <code>number</code>) =&gt; <code>number</code> A function taking a time in the range 0..1 and returning a number where 0 is the initial state and 1 is the final state. <code>essential?</code> <code>boolean</code> If <code>true</code>, then the animation is considered essential and will not be affected by <code>prefers-reduced-motion</code>. <code>freezeElevation?</code> <code>boolean</code> Default false. Needed in 3D maps to let the camera stay in a constant height based on sea-level. After the animation finished the zoom-level will be recalculated in respect of the distance from the camera to the center-coordinate-altitude. <code>offset?</code> <code>PointLike</code> of the target center relative to real map container center at the end of animation."},{"location":"API/types/maplibregl.AnimationOptions/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:195</p>"},{"location":"API/types/maplibregl.AroundCenterOptions/","title":"Type alias: AroundCenterOptions","text":"<p>maplibregl.AroundCenterOptions</p> <p>\u01ac AroundCenterOptions: <code>Object</code></p> <p>An options object sent to the enable function of some of the handlers</p>"},{"location":"API/types/maplibregl.AroundCenterOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>around</code> <code>\"center\"</code> If \"center\" is passed, map will zoom around the center of map"},{"location":"API/types/maplibregl.AroundCenterOptions/#defined-in","title":"Defined in","text":"<p>src/ui/handler/two_fingers_touch.ts:9</p>"},{"location":"API/types/maplibregl.AttributionOptions/","title":"Type alias: AttributionOptions","text":"<p>maplibregl.AttributionOptions</p> <p>\u01ac AttributionOptions: <code>Object</code></p> <p>The AttributionControl options</p>"},{"location":"API/types/maplibregl.AttributionOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>compact?</code> <code>boolean</code> If <code>true</code>, the attribution control will always collapse when moving the map. If <code>false</code>, force the expanded attribution control. The default is a responsive attribution that collapses when the user moves the map on maps less than 640 pixels wide. Attribution should not be collapsed if it can comfortably fit on the map. <code>compact</code> should only be used to modify default attribution when map size makes it impossible to fit default attribution and when the automatic compact resizing for default settings are not sufficient. <code>customAttribution?</code> <code>string</code> | <code>string</code>[] Attributions to show in addition to any other attributions."},{"location":"API/types/maplibregl.AttributionOptions/#defined-in","title":"Defined in","text":"<p>src/ui/control/attribution_control.ts:10</p>"},{"location":"API/types/maplibregl.Callback/","title":"Type alias: Callback\\&lt;T&gt;","text":"<p>maplibregl.Callback</p> <p>\u01ac Callback\\&lt;<code>T</code>&gt;: (<code>error?</code>: <code>Error</code> | <code>null</code>, <code>result?</code>: <code>T</code> | <code>null</code>) =&gt; <code>void</code></p>"},{"location":"API/types/maplibregl.Callback/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/types/maplibregl.Callback/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>error?</code>, <code>result?</code>): <code>void</code></p> <p>A callback definition.</p>"},{"location":"API/types/maplibregl.Callback/#parameters","title":"Parameters","text":"Name Type <code>error?</code> <code>Error</code> | <code>null</code> <code>result?</code> <code>T</code> | <code>null</code>"},{"location":"API/types/maplibregl.Callback/#returns","title":"Returns","text":"<p><code>void</code></p> <p><code>Example</code></p> <pre><code>asyncFunction((error, result) =&gt; {\n     if (error) {\n         // handle error\n     } else if (result) {\n         // handle success\n     }\n});\n</code></pre>"},{"location":"API/types/maplibregl.Callback/#defined-in","title":"Defined in","text":"<p>src/types/callback.ts:15</p>"},{"location":"API/types/maplibregl.CameraForBoundsOptions/","title":"Type alias: CameraForBoundsOptions","text":"<p>maplibregl.CameraForBoundsOptions</p> <p>\u01ac CameraForBoundsOptions: <code>CameraOptions</code> &amp; { <code>maxZoom?</code>: <code>number</code> ; <code>offset?</code>: <code>PointLike</code> ; <code>padding?</code>: <code>number</code> | <code>RequireAtLeastOne</code>\\&lt;<code>PaddingOptions</code>&gt;  }</p> <p>A options object for the Map#cameraForBounds method</p>"},{"location":"API/types/maplibregl.CameraForBoundsOptions/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:103</p>"},{"location":"API/types/maplibregl.CameraOptions/","title":"Type alias: CameraOptions","text":"<p>maplibregl.CameraOptions</p> <p>\u01ac CameraOptions: <code>CenterZoomBearing</code> &amp; { <code>around?</code>: <code>LngLatLike</code> ; <code>pitch?</code>: <code>number</code>  }</p> <p>Options common to Map#jumpTo, Map#easeTo, and Map#flyTo, controlling the desired location, zoom, bearing, and pitch of the camera. All properties are optional, and when a property is omitted, the current camera value for that property will remain unchanged.</p> <p><code>Example</code></p> <p>Set the map's initial perspective with CameraOptions <pre><code>let map = new maplibregl.Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json',\n  center: [-73.5804, 45.53483],\n  pitch: 60,\n  bearing: -60,\n  zoom: 10\n});\n</code></pre></p> <p><code>See</code></p> <ul> <li>Set pitch and bearing</li> <li>Jump to a series of locations</li> <li>Fly to a location</li> <li>Display buildings in 3D</li> </ul>"},{"location":"API/types/maplibregl.CameraOptions/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:57</p>"},{"location":"API/types/maplibregl.CameraUpdateTransformFunction/","title":"Type alias: CameraUpdateTransformFunction","text":"<p>maplibregl.CameraUpdateTransformFunction</p> <p>\u01ac CameraUpdateTransformFunction: (<code>next</code>: { <code>bearing</code>: <code>number</code> ; <code>center</code>: <code>LngLat</code> ; <code>elevation</code>: <code>number</code> ; <code>pitch</code>: <code>number</code> ; <code>zoom</code>: <code>number</code>  }) =&gt; { <code>bearing?</code>: <code>number</code> ; <code>center?</code>: <code>LngLat</code> ; <code>elevation?</code>: <code>number</code> ; <code>pitch?</code>: <code>number</code> ; <code>zoom?</code>: <code>number</code>  }</p>"},{"location":"API/types/maplibregl.CameraUpdateTransformFunction/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>next</code>): <code>Object</code></p> <p>A callback hook that allows manipulating the camera and being notified about camera updates before they happen</p>"},{"location":"API/types/maplibregl.CameraUpdateTransformFunction/#parameters","title":"Parameters","text":"Name Type <code>next</code> <code>Object</code> <code>next.bearing</code> <code>number</code> <code>next.center</code> <code>LngLat</code> <code>next.elevation</code> <code>number</code> <code>next.pitch</code> <code>number</code> <code>next.zoom</code> <code>number</code>"},{"location":"API/types/maplibregl.CameraUpdateTransformFunction/#returns","title":"Returns","text":"<p><code>Object</code></p> Name Type <code>bearing?</code> <code>number</code> <code>center?</code> <code>LngLat</code> <code>elevation?</code> <code>number</code> <code>pitch?</code> <code>number</code> <code>zoom?</code> <code>number</code>"},{"location":"API/types/maplibregl.CameraUpdateTransformFunction/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:229</p>"},{"location":"API/types/maplibregl.Cancelable/","title":"Type alias: Cancelable","text":"<p>maplibregl.Cancelable</p> <p>\u01ac Cancelable: <code>Object</code></p> <p>A request that can be cancelled</p>"},{"location":"API/types/maplibregl.Cancelable/#type-declaration","title":"Type declaration","text":"Name Type <code>cancel</code> () =&gt; <code>void</code>"},{"location":"API/types/maplibregl.Cancelable/#defined-in","title":"Defined in","text":"<p>src/types/cancelable.ts:4</p>"},{"location":"API/types/maplibregl.CanvasSourceSpecification/","title":"Type alias: CanvasSourceSpecification","text":"<p>maplibregl.CanvasSourceSpecification</p> <p>\u01ac CanvasSourceSpecification: <code>Object</code></p> <p>Options to add a canvas source type to the map.</p>"},{"location":"API/types/maplibregl.CanvasSourceSpecification/#type-declaration","title":"Type declaration","text":"Name Type Description <code>animate?</code> <code>boolean</code> Whether the canvas source is animated. If the canvas is static (i.e. pixels do not need to be re-read on every frame), <code>animate</code> should be set to <code>false</code> to improve performance. <code>Default Value</code> <code>ts true</code> <code>canvas?</code> <code>string</code> | <code>HTMLCanvasElement</code> Canvas source from which to read pixels. Can be a string representing the ID of the canvas element, or the <code>HTMLCanvasElement</code> itself. <code>coordinates</code> [[<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>]] Four geographical coordinates denoting where to place the corners of the canvas, specified in <code>[longitude, latitude]</code> pairs. <code>type</code> <code>\"canvas\"</code> Source type. Must be <code>\"canvas\"</code>."},{"location":"API/types/maplibregl.CanvasSourceSpecification/#defined-in","title":"Defined in","text":"<p>src/source/canvas_source.ts:16</p>"},{"location":"API/types/maplibregl.CenterZoomBearing/","title":"Type alias: CenterZoomBearing","text":"<p>maplibregl.CenterZoomBearing</p> <p>\u01ac CenterZoomBearing: <code>Object</code></p> <p>Holds center, zoom and bearing properties</p>"},{"location":"API/types/maplibregl.CenterZoomBearing/#type-declaration","title":"Type declaration","text":"Name Type Description <code>bearing?</code> <code>number</code> The desired bearing in degrees. The bearing is the compass direction that is \"up\". For example, <code>bearing: 90</code> orients the map so that east is up. <code>center?</code> <code>LngLatLike</code> The desired center. <code>zoom?</code> <code>number</code> The desired zoom level."},{"location":"API/types/maplibregl.CenterZoomBearing/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:74</p>"},{"location":"API/types/maplibregl.Config/","title":"Type alias: Config","text":"<p>maplibregl.Config</p> <p>\u01ac Config: <code>Object</code></p> <p>This is a global config object used to store the configuration It is available in the workers as well. Only serializable data should be stored in it.</p>"},{"location":"API/types/maplibregl.Config/#type-declaration","title":"Type declaration","text":"Name Type <code>MAX_PARALLEL_IMAGE_REQUESTS</code> <code>number</code> <code>MAX_PARALLEL_IMAGE_REQUESTS_PER_FRAME</code> <code>number</code> <code>MAX_TILE_CACHE_ZOOM_LEVELS</code> <code>number</code> <code>REGISTERED_PROTOCOLS</code> { <code>[x: string]</code>: (<code>requestParameters</code>: <code>RequestParameters</code>, <code>callback</code>: <code>ResponseCallback</code>\\&lt;<code>any</code>&gt;) =&gt; <code>Cancelable</code>;  } <code>WORKER_URL</code> <code>string</code>"},{"location":"API/types/maplibregl.Config/#defined-in","title":"Defined in","text":"<p>src/util/config.ts:9</p>"},{"location":"API/types/maplibregl.ControlPosition/","title":"Type alias: ControlPosition","text":"<p>maplibregl.ControlPosition</p> <p>\u01ac ControlPosition: <code>\"top-left\"</code> | <code>\"top-right\"</code> | <code>\"bottom-left\"</code> | <code>\"bottom-right\"</code></p> <p>A position defintion for the control to be placed, can be in one of the corners of the map. When two or more controls are places in the same location they are stacked toward the center of the map.</p>"},{"location":"API/types/maplibregl.ControlPosition/#defined-in","title":"Defined in","text":"<p>src/ui/control/control.ts:7</p>"},{"location":"API/types/maplibregl.Coordinates/","title":"Type alias: Coordinates","text":"<p>maplibregl.Coordinates</p> <p>\u01ac Coordinates: [[<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>]]</p> <p>Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle.</p>"},{"location":"API/types/maplibregl.Coordinates/#defined-in","title":"Defined in","text":"<p>src/source/image_source.ts:31</p>"},{"location":"API/types/maplibregl.CrossFaded/","title":"Type alias: CrossFaded\\&lt;T&gt;","text":"<p>maplibregl.CrossFaded</p> <p>\u01ac CrossFaded\\&lt;<code>T</code>&gt;: <code>Object</code></p> <p>A from-to type</p>"},{"location":"API/types/maplibregl.CrossFaded/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/types/maplibregl.CrossFaded/#type-declaration","title":"Type declaration","text":"Name Type <code>from</code> <code>T</code> <code>to</code> <code>T</code>"},{"location":"API/types/maplibregl.CrossFaded/#defined-in","title":"Defined in","text":"<p>src/style/properties.ts:19</p>"},{"location":"API/types/maplibregl.CustomRenderMethod/","title":"Type alias: CustomRenderMethod","text":"<p>maplibregl.CustomRenderMethod</p> <p>\u01ac CustomRenderMethod: (<code>gl</code>: <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code>, <code>matrix</code>: <code>mat4</code>) =&gt; <code>void</code></p>"},{"location":"API/types/maplibregl.CustomRenderMethod/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>gl</code>, <code>matrix</code>): <code>void</code></p>"},{"location":"API/types/maplibregl.CustomRenderMethod/#parameters","title":"Parameters","text":"Name Type Description <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The map's gl context. <code>matrix</code> <code>mat4</code> The map's camera matrix. It projects spherical mercator coordinates to gl coordinates. The spherical mercator coordinate <code>[0, 0]</code> represents the top left corner of the mercator world and <code>[1, 1]</code> represents the bottom right corner. When the <code>renderingMode</code> is <code>\"3d\"</code>, the z coordinate is conformal. A box with identical x, y, and z lengths in mercator units would be rendered as a cube. MercatorCoordinate.fromLngLat can be used to project a <code>LngLat</code> to a mercator coordinate."},{"location":"API/types/maplibregl.CustomRenderMethod/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/types/maplibregl.CustomRenderMethod/#defined-in","title":"Defined in","text":"<p>src/style/style_layer/custom_style_layer.ts:15</p>"},{"location":"API/types/maplibregl.DashEntry/","title":"Type alias: DashEntry","text":"<p>maplibregl.DashEntry</p> <p>\u01ac DashEntry: <code>Object</code></p> <p>A dash entry</p>"},{"location":"API/types/maplibregl.DashEntry/#type-declaration","title":"Type declaration","text":"Name Type <code>height</code> <code>number</code> <code>width</code> <code>number</code> <code>y</code> <code>number</code>"},{"location":"API/types/maplibregl.DashEntry/#defined-in","title":"Defined in","text":"<p>src/render/line_atlas.ts:8</p>"},{"location":"API/types/maplibregl.DistributiveKeys/","title":"Type alias: DistributiveKeys\\&lt;T&gt;","text":"<p>maplibregl.DistributiveKeys</p> <p>\u01ac DistributiveKeys\\&lt;<code>T</code>&gt;: <code>T</code> extends <code>T</code> ? keyof <code>T</code> : <code>never</code></p> <p>A helper for type to omit a property from a type</p>"},{"location":"API/types/maplibregl.DistributiveKeys/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/types/maplibregl.DistributiveKeys/#defined-in","title":"Defined in","text":"<p>src/util/vectortile_to_geojson.ts:7</p>"},{"location":"API/types/maplibregl.DistributiveOmit/","title":"Type alias: DistributiveOmit\\&lt;T, K&gt;","text":"<p>maplibregl.DistributiveOmit</p> <p>\u01ac DistributiveOmit\\&lt;<code>T</code>, <code>K</code>&gt;: <code>T</code> extends <code>unknown</code> ? <code>Omit</code>\\&lt;<code>T</code>, <code>K</code>&gt; : <code>never</code></p> <p>A helper for type to omit a property from a type</p>"},{"location":"API/types/maplibregl.DistributiveOmit/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> <code>T</code> <code>K</code> extends <code>DistributiveKeys</code>\\&lt;<code>T</code>&gt;"},{"location":"API/types/maplibregl.DistributiveOmit/#defined-in","title":"Defined in","text":"<p>src/util/vectortile_to_geojson.ts:11</p>"},{"location":"API/types/maplibregl.DragPanOptions/","title":"Type alias: DragPanOptions","text":"<p>maplibregl.DragPanOptions</p> <p>\u01ac DragPanOptions: <code>Object</code></p> <p>A DragPanHandler options object</p>"},{"location":"API/types/maplibregl.DragPanOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>deceleration?</code> <code>number</code> the maximum value of the drag velocity. <code>Default Value</code> <code>ts 1400</code> <code>easing?</code> (<code>t</code>: <code>number</code>) =&gt; <code>number</code> easing function applled to <code>map.panTo</code> when applying the drag. <code>Default Value</code> <code>ts bezier(0, 0, 0.3, 1)</code> <code>linearity?</code> <code>number</code> factor used to scale the drag velocity <code>Default Value</code> <code>ts 0</code> <code>maxSpeed?</code> <code>number</code> the rate at which the speed reduces after the pan ends. <code>Default Value</code> <code>ts 2500</code>"},{"location":"API/types/maplibregl.DragPanOptions/#defined-in","title":"Defined in","text":"<p>src/ui/handler/shim/drag_pan.ts:7</p>"},{"location":"API/types/maplibregl.ErrorCallback/","title":"Type alias: ErrorCallback","text":"<p>maplibregl.ErrorCallback</p> <p>\u01ac ErrorCallback: (<code>error?</code>: <code>Error</code> | <code>null</code>) =&gt; <code>void</code></p>"},{"location":"API/types/maplibregl.ErrorCallback/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>error?</code>): <code>void</code></p> <p>An error callback</p>"},{"location":"API/types/maplibregl.ErrorCallback/#parameters","title":"Parameters","text":"Name Type <code>error?</code> <code>Error</code> | <code>null</code>"},{"location":"API/types/maplibregl.ErrorCallback/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/types/maplibregl.ErrorCallback/#defined-in","title":"Defined in","text":"<p>src/source/rtl_text_plugin.ts:22</p>"},{"location":"API/types/maplibregl.ExpiryData/","title":"Type alias: ExpiryData","text":"<p>maplibregl.ExpiryData</p> <p>\u01ac ExpiryData: <code>Object</code></p> <p>A type used to store the tile's expiration date and cache control definition</p>"},{"location":"API/types/maplibregl.ExpiryData/#type-declaration","title":"Type declaration","text":"Name Type <code>cacheControl?</code> <code>string</code> | <code>null</code> <code>expires?</code> <code>Date</code> | <code>string</code> | <code>null</code>"},{"location":"API/types/maplibregl.ExpiryData/#defined-in","title":"Defined in","text":"<p>src/util/ajax.ts:301</p>"},{"location":"API/types/maplibregl.FeatureIdentifier/","title":"Type alias: FeatureIdentifier","text":"<p>maplibregl.FeatureIdentifier</p> <p>\u01ac FeatureIdentifier: <code>Object</code></p> <p>A feature identifier that is bound to a source</p>"},{"location":"API/types/maplibregl.FeatureIdentifier/#type-declaration","title":"Type declaration","text":"Name Type Description <code>id?</code> <code>string</code> | <code>number</code> Unique id of the feature. <code>source</code> <code>string</code> The id of the vector or GeoJSON source for the feature. <code>sourceLayer?</code> <code>string</code> For vector tile sources, <code>sourceLayer</code> is required."},{"location":"API/types/maplibregl.FeatureIdentifier/#defined-in","title":"Defined in","text":"<p>src/style/style.ts:91</p>"},{"location":"API/types/maplibregl.FitBoundsOptions/","title":"Type alias: FitBoundsOptions","text":"<p>maplibregl.FitBoundsOptions</p> <p>\u01ac FitBoundsOptions: <code>FlyToOptions</code> &amp; { <code>linear?</code>: <code>boolean</code> ; <code>maxZoom?</code>: <code>number</code> ; <code>offset?</code>: <code>PointLike</code>  }</p> <p>Options for Map#fitBounds method</p>"},{"location":"API/types/maplibregl.FitBoundsOptions/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:171</p>"},{"location":"API/types/maplibregl.FlyToOptions/","title":"Type alias: FlyToOptions","text":"<p>maplibregl.FlyToOptions</p> <p>\u01ac FlyToOptions: <code>AnimationOptions</code> &amp; <code>CameraOptions</code> &amp; { <code>curve?</code>: <code>number</code> ; <code>maxDuration?</code>: <code>number</code> ; <code>minZoom?</code>: <code>number</code> ; <code>padding?</code>: <code>number</code> | <code>RequireAtLeastOne</code>\\&lt;<code>PaddingOptions</code>&gt; ; <code>screenSpeed?</code>: <code>number</code> ; <code>speed?</code>: <code>number</code>  }</p> <p>The Map#flyTo options object</p>"},{"location":"API/types/maplibregl.FlyToOptions/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:122</p>"},{"location":"API/types/maplibregl.FullscreenOptions/","title":"Type alias: FullscreenOptions","text":"<p>maplibregl.FullscreenOptions</p> <p>\u01ac FullscreenOptions: <code>Object</code></p> <p>The FullscreenControl options</p>"},{"location":"API/types/maplibregl.FullscreenOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>container?</code> <code>HTMLElement</code> <code>container</code> is the compatible DOM element which should be made full screen. By default, the map container element will be made full screen."},{"location":"API/types/maplibregl.FullscreenOptions/#defined-in","title":"Defined in","text":"<p>src/ui/control/fullscreen_control.ts:12</p>"},{"location":"API/types/maplibregl.GeoJSONFeatureDiff/","title":"Type alias: GeoJSONFeatureDiff","text":"<p>maplibregl.GeoJSONFeatureDiff</p> <p>\u01ac GeoJSONFeatureDiff: <code>Object</code></p> <p>A geojson feature diff object</p>"},{"location":"API/types/maplibregl.GeoJSONFeatureDiff/#type-declaration","title":"Type declaration","text":"Name Type Description <code>addOrUpdateProperties?</code> { <code>key</code>: <code>string</code> ; <code>value</code>: <code>any</code>  }[] The properties to add or update along side their values <code>id</code> <code>GeoJSONFeatureId</code> The feature ID <code>newGeometry?</code> <code>GeoJSON.Geometry</code> If it's a new geometry, place it here <code>removeAllProperties?</code> <code>boolean</code> Setting to <code>true</code> will remove all preperties <code>removeProperties?</code> <code>string</code>[] The properties keys to remove"},{"location":"API/types/maplibregl.GeoJSONFeatureDiff/#defined-in","title":"Defined in","text":"<p>src/source/geojson_source_diff.ts:31</p>"},{"location":"API/types/maplibregl.GeoJSONFeatureId/","title":"Type alias: GeoJSONFeatureId","text":"<p>maplibregl.GeoJSONFeatureId</p> <p>\u01ac GeoJSONFeatureId: <code>number</code> | <code>string</code></p> <p>A way to indentify a feature, either by string or by number</p>"},{"location":"API/types/maplibregl.GeoJSONFeatureId/#defined-in","title":"Defined in","text":"<p>src/source/geojson_source_diff.ts:4</p>"},{"location":"API/types/maplibregl.GeoJSONSourceDiff/","title":"Type alias: GeoJSONSourceDiff","text":"<p>maplibregl.GeoJSONSourceDiff</p> <p>\u01ac GeoJSONSourceDiff: <code>Object</code></p> <p>The geojson source diff object</p>"},{"location":"API/types/maplibregl.GeoJSONSourceDiff/#type-declaration","title":"Type declaration","text":"Name Type Description <code>add?</code> <code>GeoJSON.Feature</code>[] An array of features to add <code>remove?</code> <code>GeoJSONFeatureId</code>[] An array of features IDs to remove <code>removeAll?</code> <code>boolean</code> When set to <code>true</code> it will remove all features <code>update?</code> <code>GeoJSONFeatureDiff</code>[] An array of update objects"},{"location":"API/types/maplibregl.GeoJSONSourceDiff/#defined-in","title":"Defined in","text":"<p>src/source/geojson_source_diff.ts:9</p>"},{"location":"API/types/maplibregl.GeolocateOptions/","title":"Type alias: GeolocateOptions","text":"<p>maplibregl.GeolocateOptions</p> <p>\u01ac GeolocateOptions: <code>Object</code></p> <p>The GeolocateControl options</p>"},{"location":"API/types/maplibregl.GeolocateOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>fitBoundsOptions?</code> <code>FitBoundsOptions</code> A options object to use when the map is panned and zoomed to the user's location. The default is to use a <code>maxZoom</code> of 15 to limit how far the map will zoom in for very accurate locations. <code>positionOptions?</code> <code>PositionOptions</code> A Geolocation API PositionOptions object. <code>Default Value</code> <code>{enableHighAccuracy: false, timeout: 6000}</code> <code>showAccuracyCircle?</code> <code>boolean</code> By default, if showUserLocation is <code>true</code>, a transparent circle will be drawn around the user location indicating the accuracy (95% confidence level) of the user's location. Set to <code>false</code> to disable. Always disabled when showUserLocation is <code>false</code>. <code>Default Value</code> <code>ts true</code> <code>showUserLocation?</code> <code>boolean</code> By default a dot will be shown on the map at the user's location. Set to <code>false</code> to disable. <code>Default Value</code> <code>ts true</code> <code>trackUserLocation?</code> <code>boolean</code> If <code>true</code> the Geolocate Control becomes a toggle button and when active the map will receive updates to the user's location as it changes. <code>Default Value</code> <code>ts false</code>"},{"location":"API/types/maplibregl.GeolocateOptions/#defined-in","title":"Defined in","text":"<p>src/ui/control/geolocate_control.ts:16</p>"},{"location":"API/types/maplibregl.GestureOptions/","title":"Type alias: GestureOptions","text":"<p>maplibregl.GestureOptions</p> <p>\u01ac GestureOptions: <code>Object</code></p> <p>An options object for the gesture settings</p> <p><code>Example</code></p> <pre><code>let options = {\n  windowsHelpText: \"Use Ctrl + scroll to zoom the map\",\n  macHelpText: \"Use \u2318 + scroll to zoom the map\",\n  mobileHelpText: \"Use two fingers to move the map\",\n}\n</code></pre>"},{"location":"API/types/maplibregl.GestureOptions/#type-declaration","title":"Type declaration","text":"Name Type <code>macHelpText?</code> <code>string</code> <code>mobileHelpText?</code> <code>string</code> <code>windowsHelpText?</code> <code>string</code>"},{"location":"API/types/maplibregl.GestureOptions/#defined-in","title":"Defined in","text":"<p>src/ui/map.ts:342</p>"},{"location":"API/types/maplibregl.GetImageCallback/","title":"Type alias: GetImageCallback","text":"<p>maplibregl.GetImageCallback</p> <p>\u01ac GetImageCallback: (<code>error?</code>: <code>Error</code> | <code>null</code>, <code>image?</code>: <code>HTMLImageElement</code> | <code>ImageBitmap</code> | <code>null</code>, <code>expiry?</code>: <code>ExpiryData</code> | <code>null</code>) =&gt; <code>void</code></p>"},{"location":"API/types/maplibregl.GetImageCallback/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>error?</code>, <code>image?</code>, <code>expiry?</code>): <code>void</code></p> <p>The callback that is being called after an image was fetched</p>"},{"location":"API/types/maplibregl.GetImageCallback/#parameters","title":"Parameters","text":"Name Type <code>error?</code> <code>Error</code> | <code>null</code> <code>image?</code> <code>HTMLImageElement</code> | <code>ImageBitmap</code> | <code>null</code> <code>expiry?</code> <code>ExpiryData</code> | <code>null</code>"},{"location":"API/types/maplibregl.GetImageCallback/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/types/maplibregl.GetImageCallback/#defined-in","title":"Defined in","text":"<p>src/util/image_request.ts:12</p>"},{"location":"API/types/maplibregl.GlyphPosition/","title":"Type alias: GlyphPosition","text":"<p>maplibregl.GlyphPosition</p> <p>\u01ac GlyphPosition: <code>Object</code></p> <p>The glyph's position</p>"},{"location":"API/types/maplibregl.GlyphPosition/#type-declaration","title":"Type declaration","text":"Name Type <code>metrics</code> <code>GlyphMetrics</code> <code>rect</code> <code>Rect</code>"},{"location":"API/types/maplibregl.GlyphPosition/#defined-in","title":"Defined in","text":"<p>src/render/glyph_atlas.ts:22</p>"},{"location":"API/types/maplibregl.GlyphPositions/","title":"Type alias: GlyphPositions","text":"<p>maplibregl.GlyphPositions</p> <p>\u01ac GlyphPositions: <code>Object</code></p> <p>The glyphs' positions</p>"},{"location":"API/types/maplibregl.GlyphPositions/#index-signature","title":"Index signature","text":"<p>\u25aa [_: <code>string</code>]: { <code>[_: number]</code>: <code>GlyphPosition</code>;  }</p>"},{"location":"API/types/maplibregl.GlyphPositions/#defined-in","title":"Defined in","text":"<p>src/render/glyph_atlas.ts:30</p>"},{"location":"API/types/maplibregl.GridKey/","title":"Type alias: GridKey","text":"<p>maplibregl.GridKey</p> <p>\u01ac GridKey: <code>Object</code></p> <p>A key for the grid</p>"},{"location":"API/types/maplibregl.GridKey/#type-declaration","title":"Type declaration","text":"Name Type <code>overlapMode?</code> <code>OverlapMode</code>"},{"location":"API/types/maplibregl.GridKey/#defined-in","title":"Defined in","text":"<p>src/symbol/grid_index.ts:32</p>"},{"location":"API/types/maplibregl.HandlerResult/","title":"Type alias: HandlerResult","text":"<p>maplibregl.HandlerResult</p> <p>\u01ac HandlerResult: <code>Object</code></p> <p>All handler methods that are called with events can optionally return a <code>HandlerResult</code>.</p>"},{"location":"API/types/maplibregl.HandlerResult/#type-declaration","title":"Type declaration","text":"Name Type Description <code>around?</code> <code>Point</code> | <code>null</code> the point to not move when changing the camera <code>bearingDelta?</code> <code>number</code> - <code>cameraAnimation?</code> (<code>map</code>: <code>Map</code>) =&gt; <code>any</code> A method that can fire a one-off easing by directly changing the map's camera. <code>needsRenderFrame?</code> <code>boolean</code> Makes the manager trigger a frame, allowing the handler to return multiple results over time (see scrollzoom). <code>noInertia?</code> <code>boolean</code> The camera changes won't get recorded for inertial zooming. <code>originalEvent?</code> <code>Event</code> The last three properties are needed by only one handler: scrollzoom. The DOM event to be used as the <code>originalEvent</code> on any camera change events. <code>panDelta?</code> <code>Point</code> - <code>pinchAround?</code> <code>Point</code> | <code>null</code> same as above, except for pinch actions, which are given higher priority <code>pitchDelta?</code> <code>number</code> - <code>zoomDelta?</code> <code>number</code> -"},{"location":"API/types/maplibregl.HandlerResult/#defined-in","title":"Defined in","text":"<p>src/ui/handler_manager.ts:76</p>"},{"location":"API/types/maplibregl.JumpToOptions/","title":"Type alias: JumpToOptions","text":"<p>maplibregl.JumpToOptions</p> <p>\u01ac JumpToOptions: <code>CameraOptions</code> &amp; { <code>padding?</code>: <code>PaddingOptions</code>  }</p> <p>The options object related to the Map#jumpTo method</p>"},{"location":"API/types/maplibregl.JumpToOptions/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:93</p>"},{"location":"API/types/maplibregl.Listener/","title":"Type alias: Listener","text":"<p>maplibregl.Listener</p> <p>\u01ac Listener: (<code>a</code>: <code>any</code>) =&gt; <code>any</code></p>"},{"location":"API/types/maplibregl.Listener/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>a</code>): <code>any</code></p> <p>A listener method used as a callback to events</p>"},{"location":"API/types/maplibregl.Listener/#parameters","title":"Parameters","text":"Name Type <code>a</code> <code>any</code>"},{"location":"API/types/maplibregl.Listener/#returns","title":"Returns","text":"<p><code>any</code></p>"},{"location":"API/types/maplibregl.Listener/#defined-in","title":"Defined in","text":"<p>src/util/evented.ts:6</p>"},{"location":"API/types/maplibregl.LngLatBoundsLike/","title":"Type alias: LngLatBoundsLike","text":"<p>maplibregl.LngLatBoundsLike</p> <p>\u01ac LngLatBoundsLike: <code>LngLatBounds</code> | [<code>LngLatLike</code>, <code>LngLatLike</code>] | [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>]</p> <p>A LngLatBounds object, an array of LngLatLike objects in [sw, ne] order, or an array of numbers in [west, south, east, north] order.</p> <p><code>Example</code></p> <pre><code>let v1 = new maplibregl.LngLatBounds(\n  new maplibregl.LngLat(-73.9876, 40.7661),\n  new maplibregl.LngLat(-73.9397, 40.8002)\n);\nlet v2 = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002])\nlet v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n</code></pre>"},{"location":"API/types/maplibregl.LngLatBoundsLike/#defined-in","title":"Defined in","text":"<p>src/geo/lng_lat_bounds.ts:20</p>"},{"location":"API/types/maplibregl.LngLatLike/","title":"Type alias: LngLatLike","text":"<p>maplibregl.LngLatLike</p> <p>\u01ac LngLatLike: <code>LngLat</code> | { <code>lat</code>: <code>number</code> ; <code>lng</code>: <code>number</code>  } | { <code>lat</code>: <code>number</code> ; <code>lon</code>: <code>number</code>  } | [<code>number</code>, <code>number</code>]</p> <p>A LngLat object, an array of two numbers representing longitude and latitude, or an object with <code>lng</code> and <code>lat</code> or <code>lon</code> and <code>lat</code> properties.</p> <p><code>Example</code></p> <pre><code>let v1 = new maplibregl.LngLat(-122.420679, 37.772537);\nlet v2 = [-122.420679, 37.772537];\nlet v3 = {lon: -122.420679, lat: 37.772537};\n</code></pre>"},{"location":"API/types/maplibregl.LngLatLike/#defined-in","title":"Defined in","text":"<p>src/geo/lng_lat.ts:23</p>"},{"location":"API/types/maplibregl.LogoOptions/","title":"Type alias: LogoOptions","text":"<p>maplibregl.LogoOptions</p> <p>\u01ac LogoOptions: <code>Object</code></p> <p>The LogoControl options object</p>"},{"location":"API/types/maplibregl.LogoOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>compact?</code> <code>boolean</code> If <code>true</code>, force a compact logo. If <code>false</code>, force the full logo. The default is a responsive logo that collapses when the map is less than 640 pixels wide."},{"location":"API/types/maplibregl.LogoOptions/#defined-in","title":"Defined in","text":"<p>src/ui/control/logo_control.ts:9</p>"},{"location":"API/types/maplibregl.MapContextEvent/","title":"Type alias: MapContextEvent","text":"<p>maplibregl.MapContextEvent</p> <p>\u01ac MapContextEvent: <code>Object</code></p> <p>An event related to the web gl context</p>"},{"location":"API/types/maplibregl.MapContextEvent/#type-declaration","title":"Type declaration","text":"Name Type <code>originalEvent</code> <code>WebGLContextEvent</code> <code>type</code> <code>\"webglcontextlost\"</code> | <code>\"webglcontextrestored\"</code>"},{"location":"API/types/maplibregl.MapContextEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:733</p>"},{"location":"API/types/maplibregl.MapDataEvent/","title":"Type alias: MapDataEvent","text":"<p>maplibregl.MapDataEvent</p> <p>\u01ac MapDataEvent: <code>Object</code></p> <p>A <code>MapDataEvent</code> object is emitted with the <code>data</code> and <code>dataloading</code> events. Possible values for <code>dataType</code>s are:</p> <ul> <li><code>'source'</code>: The non-tile data associated with any source</li> <li><code>'style'</code>: The style used by the map</li> </ul> <p>Possible values for <code>sourceDataType</code>s are:</p> <ul> <li><code>'metadata'</code>: indicates that any necessary source metadata has been loaded (such as TileJSON) and it is ok to start loading tiles</li> <li><code>'content'</code>: indicates the source data has changed (such as when source.setData() has been called on GeoJSONSource)</li> <li><code>'visibility'</code>: send when the source becomes used when at least one of its layers becomes visible in style sense (inside the layer's zoom range and with layout.visibility set to 'visible')</li> <li><code>'idle'</code>: indicates that no new source data has been fetched (but the source has done loading)</li> </ul> <p><code>Example</code></p> <pre><code>// The sourcedata event is an example of MapDataEvent.\n// Set up an event listener on the map.\nmap.on('sourcedata', function(e) {\n   if (e.isSourceLoaded) {\n       // Do something when the source has finished loading\n   }\n});\n</code></pre>"},{"location":"API/types/maplibregl.MapDataEvent/#type-declaration","title":"Type declaration","text":"Name Type Description <code>dataType</code> <code>string</code> The type of data that has changed. One of <code>'source'</code>, <code>'style'</code>. <code>sourceDataType</code> <code>MapSourceDataType</code> Included if the event has a <code>dataType</code> of <code>source</code> and the event signals that internal data has been received or changed. Possible values are <code>metadata</code>, <code>content</code>, <code>visibility</code> and <code>idle</code>. <code>type</code> <code>string</code> The event type."},{"location":"API/types/maplibregl.MapDataEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:704</p>"},{"location":"API/types/maplibregl.MapEventType/","title":"Type alias: MapEventType","text":"<p>maplibregl.MapEventType</p> <p>\u01ac MapEventType: <code>Object</code></p> <p><code>MapEventType</code> - a mapping between the event name and the event value. These events are used with the Map#on method. When using a <code>layerId</code> with Map#on method, please refer to MapLayerEventType. The following example can be used for all the events.</p> <p><code>Example</code></p> <pre><code>// Initialize the map\nlet map = new maplibregl.Map({ // map options });\n// Set an event listener\nmap.on('the-event-name', () =&gt; {\n  console.log('An event has occurred!');\n});\n</code></pre>"},{"location":"API/types/maplibregl.MapEventType/#type-declaration","title":"Type declaration","text":"Name Type Description <code>boxzoomcancel</code> <code>MapLibreZoomEvent</code> Fired when the user cancels a \"box zoom\" interaction, or when the bounding box does not meet the minimum size threshold. See BoxZoomHandler. <code>boxzoomend</code> <code>MapLibreZoomEvent</code> Fired when a \"box zoom\" interaction ends. See BoxZoomHandler. <code>boxzoomstart</code> <code>MapLibreZoomEvent</code> Fired when a \"box zoom\" interaction starts. See BoxZoomHandler. <code>click</code> <code>MapMouseEvent</code> Fired when a pointing device (usually a mouse) is pressed and released at the same point on the map. <code>See</code> - Measure distances - Center the map on a clicked symbol <code>contextmenu</code> <code>MapMouseEvent</code> Fired when the right button of the mouse is clicked or the context menu key is pressed within the map. <code>data</code> <code>MapDataEvent</code> Fired when any map data loads or changes. See MapDataEvent for more information. <code>See</code> Display HTML clusters with custom properties <code>dataabort</code> <code>MapDataEvent</code> Fired when a request for one of the map's sources' tiles or data is aborted. <code>dataloading</code> <code>MapDataEvent</code> Fired when any map data (style, source, tile, etc) begins loading or changing asynchronously. All <code>dataloading</code> events are followed by a <code>data</code>, <code>dataabort</code> or <code>error</code> event. <code>dblclick</code> <code>MapMouseEvent</code> Fired when a pointing device (usually a mouse) is pressed and released twice at the same point on the map in rapid succession. Note: Under normal conditions, this event will be preceded by two <code>click</code> events. <code>drag</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired repeatedly during a \"drag to pan\" interaction. See DragPanHandler. <code>dragend</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired when a \"drag to pan\" interaction ends. See DragPanHandler. <code>See</code> Create a draggable marker <code>dragstart</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired when a \"drag to pan\" interaction starts. See DragPanHandler. <code>error</code> <code>ErrorEvent</code> Fired when an error occurs. This is GL JS's primary error reporting mechanism. We use an event instead of <code>throw</code> to better accommodate asynchronous operations. If no listeners are bound to the <code>error</code> event, the error will be printed to the console. <code>idle</code> <code>MapLibreEvent</code> Fired after the last frame rendered before the map enters an \"idle\" state: - No camera transitions are in progress - All currently requested tiles have loaded - All fade/transition animations have completed <code>load</code> <code>MapLibreEvent</code> <code>load</code> Fired immediately after all necessary resources have been downloaded and the first visually complete rendering of the map has occurred. <code>See</code> - Draw GeoJSON points - Add live realtime data - Animate a point <code>mousedown</code> <code>MapMouseEvent</code> Fired when a pointing device (usually a mouse) is pressed within the map. <code>See</code> Create a draggable point <code>mousemove</code> <code>MapMouseEvent</code> Fired when a pointing device (usually a mouse) is moved while the cursor is inside the map. As you move the cursor across the map, the event will fire every time the cursor changes position within the map. <code>See</code> - Get coordinates of the mouse pointer - Highlight features under the mouse pointer - Display a popup on over <code>mouseout</code> <code>MapMouseEvent</code> Fired when a point device (usually a mouse) leaves the map's canvas. <code>mouseover</code> <code>MapMouseEvent</code> Fired when a pointing device (usually a mouse) is moved within the map. As you move the cursor across a web page containing a map, the event will fire each time it enters the map or any child elements. <code>See</code> - Get coordinates of the mouse pointer - Highlight features under the mouse pointer - Display a popup on hover <code>mouseup</code> <code>MapMouseEvent</code> Fired when a pointing device (usually a mouse) is released within the map. <code>See</code> Create a draggable point <code>move</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; Fired repeatedly during an animated transition from one view to another, as the result of either user interaction or methods such as Map#flyTo. <code>See</code> Display HTML clusters with custom properties <code>moveend</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; Fired just after the map completes a transition from one view to another, as the result of either user interaction or methods such as Map#jumpTo. <code>See</code> Display HTML clusters with custom properties <code>movestart</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; Fired just before the map begins a transition from one view to another, as the result of either user interaction or methods such as Map#jumpTo. <code>pitch</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired repeatedly during the map's pitch (tilt) animation between one state and another as the result of either user interaction or methods such as Map#flyTo. <code>pitchend</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired immediately after the map's pitch (tilt) finishes changing as the result of either user interaction or methods such as Map#flyTo. <code>pitchstart</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired whenever the map's pitch (tilt) begins a change as the result of either user interaction or methods such as Map#flyTo . <code>remove</code> <code>MapLibreEvent</code> Fired immediately after the map has been removed with Map#remove. <code>render</code> <code>MapLibreEvent</code> Fired whenever the map is drawn to the screen, as the result of - a change to the map's position, zoom, pitch, or bearing - a change to the map's style - a change to a GeoJSON source - the loading of a vector tile, GeoJSON file, glyph, or sprite <code>resize</code> <code>MapLibreEvent</code> Fired immediately after the map has been resized. <code>rotate</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired repeatedly during a \"drag to rotate\" interaction. See DragRotateHandler. <code>rotateend</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired when a \"drag to rotate\" interaction ends. See DragRotateHandler. <code>rotatestart</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>undefined</code>&gt; Fired when a \"drag to rotate\" interaction starts. See DragRotateHandler. <code>sourcedata</code> <code>MapSourceDataEvent</code> Fired when one of the map's sources loads or changes, including if a tile belonging to a source loads or changes. <code>sourcedataabort</code> <code>MapSourceDataEvent</code> Fired when a request for one of the map's sources' data is aborted. <code>sourcedataloading</code> <code>MapSourceDataEvent</code> Fired when one of the map's sources begins loading or changing asynchronously. All <code>sourcedataloading</code> events are followed by a <code>sourcedata</code>, <code>sourcedataabort</code> or <code>error</code> event. <code>styledata</code> <code>MapStyleDataEvent</code> Fired when the map's style loads or changes. <code>styledataloading</code> <code>MapStyleDataEvent</code> Fired when the map's style begins loading or changing asynchronously. All <code>styledataloading</code> events are followed by a <code>styledata</code> or <code>error</code> event. <code>styleimagemissing</code> <code>MapStyleImageMissingEvent</code> Fired when an icon or pattern needed by the style is missing. The missing image can be added with Map#addImage within this event listener callback to prevent the image from being skipped. This event can be used to dynamically generate icons and patterns. <code>See</code> Generate and add a missing icon to the map <code>terrain</code> <code>MapTerrainEvent</code> Fired when terrain is changed <code>tiledataloading</code> <code>MapDataEvent</code> - <code>touchcancel</code> <code>MapTouchEvent</code> Fired when a <code>touchcancel</code> event occurs within the map. <code>touchend</code> <code>MapTouchEvent</code> Fired when a <code>touchend</code> event occurs within the map. <code>See</code> Create a draggable point <code>touchmove</code> <code>MapTouchEvent</code> Fired when a <code>touchmove</code> event occurs within the map. <code>See</code> Create a draggable point <code>touchstart</code> <code>MapTouchEvent</code> Fired when a <code>touchstart</code> event occurs within the map. <code>See</code> Create a draggable point <code>webglcontextlost</code> <code>MapContextEvent</code> Fired when the WebGL context is lost. <code>webglcontextrestored</code> <code>MapContextEvent</code> Fired when the WebGL context is restored. <code>wheel</code> <code>MapWheelEvent</code> Fired when a <code>wheel</code> event occurs within the map. <code>zoom</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; Fired repeatedly during an animated transition from one zoom level to another, as the result of either user interaction or methods such as Map#flyTo. <code>zoomend</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; Fired just after the map completes a transition from one zoom level to another, as the result of either user interaction or methods such as Map#flyTo. <code>zoomstart</code> <code>MapLibreEvent</code>\\&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code> | <code>undefined</code>&gt; Fired just before the map begins a transition from one zoom level to another, as the result of either user interaction or methods such as Map#flyTo."},{"location":"API/types/maplibregl.MapEventType/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:148</p>"},{"location":"API/types/maplibregl.MapGeoJSONFeature/","title":"Type alias: MapGeoJSONFeature","text":"<p>maplibregl.MapGeoJSONFeature</p> <p>\u01ac MapGeoJSONFeature: <code>GeoJSONFeature</code> &amp; { <code>layer</code>: <code>DistributiveOmit</code>\\&lt;<code>LayerSpecification</code>, <code>\"source\"</code>&gt; &amp; { <code>source</code>: <code>string</code>  } ; <code>source</code>: <code>string</code> ; <code>sourceLayer?</code>: <code>string</code> ; <code>state</code>: { <code>[key: string]</code>: <code>any</code>;  }  }</p> <p>An extended geojson feature used by the events to return data to the listener</p>"},{"location":"API/types/maplibregl.MapGeoJSONFeature/#defined-in","title":"Defined in","text":"<p>src/util/vectortile_to_geojson.ts:18</p>"},{"location":"API/types/maplibregl.MapLayerEventType/","title":"Type alias: MapLayerEventType","text":"<p>maplibregl.MapLayerEventType</p> <p>\u01ac MapLayerEventType: <code>Object</code></p> <p><code>MapLayerEventType</code> - a mapping between the event name and the event. Note: These events are compatible with the optional <code>layerId</code> parameter. If <code>layerId</code> is included as the second argument in Map#on, the event listener will fire only when the event action contains a visible portion of the specified layer. The following example can be used for all the events.</p> <p><code>Example</code></p> <pre><code>// Initialize the map\nlet map = new maplibregl.Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('the-event-name', 'poi-label', function(e) {\n  console.log('An event has occurred on a visible portion of the poi-label layer');\n});\n</code></pre>"},{"location":"API/types/maplibregl.MapLayerEventType/#type-declaration","title":"Type declaration","text":"Name Type Description <code>click</code> <code>MapLayerMouseEvent</code> Fired when a pointing device (usually a mouse) is pressed and released contains a visible portion of the specified layer. <code>See</code> - Measure distances - Center the map on a clicked symbol <code>contextmenu</code> <code>MapLayerMouseEvent</code> Fired when the right button of the mouse is clicked or the context menu key is pressed within visible portion of the specified layer. <code>dblclick</code> <code>MapLayerMouseEvent</code> Fired when a pointing device (usually a mouse) is pressed and released twice contains a visible portion of the specified layer. Note: Under normal conditions, this event will be preceded by two <code>click</code> events. <code>mousedown</code> <code>MapLayerMouseEvent</code> Fired when a pointing device (usually a mouse) is pressed while inside a visible portion of the specified layer. <code>See</code> Create a draggable point <code>mouseenter</code> <code>MapLayerMouseEvent</code> Fired when a pointing device (usually a mouse) enters a visible portion of a specified layer from outside that layer or outside the map canvas. <code>See</code> - Center the map on a clicked symbol - Display a popup on click <code>mouseleave</code> <code>MapLayerMouseEvent</code> Fired when a pointing device (usually a mouse) leaves a visible portion of a specified layer, or leaves the map canvas. <code>See</code> - Highlight features under the mouse pointer - Display a popup on click <code>mousemove</code> <code>MapLayerMouseEvent</code> Fired when a pointing device (usually a mouse) is moved while the cursor is inside a visible portion of the specified layer. As you move the cursor across the layer, the event will fire every time the cursor changes position within that layer. <code>See</code> - Get coordinates of the mouse pointer - Highlight features under the mouse pointer - Display a popup on over <code>mouseout</code> <code>MapLayerMouseEvent</code> Fired when a point device (usually a mouse) leaves the visible portion of the specified layer. <code>mouseover</code> <code>MapLayerMouseEvent</code> Fired when a pointing device (usually a mouse) is moved inside a visible portion of the specified layer. <code>See</code> - Get coordinates of the mouse pointer - Highlight features under the mouse pointer - Display a popup on hover <code>mouseup</code> <code>MapLayerMouseEvent</code> Fired when a pointing device (usually a mouse) is released while inside a visible portion of the specified layer. <code>See</code> Create a draggable point <code>touchcancel</code> <code>MapLayerTouchEvent</code> Fired when a <code>touchstart</code> event occurs within the visible portion of the specified layer. <code>See</code> Create a draggable point <code>touchend</code> <code>MapLayerTouchEvent</code> Fired when a <code>touchend</code> event occurs within the visible portion of the specified layer. <code>See</code> Create a draggable point <code>touchstart</code> <code>MapLayerTouchEvent</code> Fired when a <code>touchstart</code> event occurs within the visible portion of the specified layer. <code>See</code> Create a draggable point"},{"location":"API/types/maplibregl.MapLayerEventType/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:49</p>"},{"location":"API/types/maplibregl.MapLayerMouseEvent/","title":"Type alias: MapLayerMouseEvent","text":"<p>maplibregl.MapLayerMouseEvent</p> <p>\u01ac MapLayerMouseEvent: <code>MapMouseEvent</code> &amp; { <code>features?</code>: <code>MapGeoJSONFeature</code>[]  }</p> <p>An event from the mouse relevant to a specific layer.</p>"},{"location":"API/types/maplibregl.MapLayerMouseEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:17</p>"},{"location":"API/types/maplibregl.MapLayerTouchEvent/","title":"Type alias: MapLayerTouchEvent","text":"<p>maplibregl.MapLayerTouchEvent</p> <p>\u01ac MapLayerTouchEvent: <code>MapTouchEvent</code> &amp; { <code>features?</code>: <code>MapGeoJSONFeature</code>[]  }</p> <p>An event from a touch device relevat to a specific layer.</p>"},{"location":"API/types/maplibregl.MapLayerTouchEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:24</p>"},{"location":"API/types/maplibregl.MapLibreEvent/","title":"Type alias: MapLibreEvent\\&lt;TOrig&gt;","text":"<p>maplibregl.MapLibreEvent</p> <p>\u01ac MapLibreEvent\\&lt;<code>TOrig</code>&gt;: <code>Object</code></p> <p>The base event for MapLibre</p>"},{"location":"API/types/maplibregl.MapLibreEvent/#type-parameters","title":"Type parameters","text":"Name Type <code>TOrig</code> <code>unknown</code>"},{"location":"API/types/maplibregl.MapLibreEvent/#type-declaration","title":"Type declaration","text":"Name Type <code>originalEvent</code> <code>TOrig</code> <code>target</code> <code>Map</code> <code>type</code> keyof <code>MapEventType</code> | keyof <code>MapLayerEventType</code>"},{"location":"API/types/maplibregl.MapLibreEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:421</p>"},{"location":"API/types/maplibregl.MapLibreZoomEvent/","title":"Type alias: MapLibreZoomEvent","text":"<p>maplibregl.MapLibreZoomEvent</p> <p>\u01ac MapLibreZoomEvent: <code>Object</code></p> <p>A <code>MapLibreZoomEvent</code> is the event type for the boxzoom-related map events emitted by the BoxZoomHandler.</p>"},{"location":"API/types/maplibregl.MapLibreZoomEvent/#type-declaration","title":"Type declaration","text":"Name Type Description <code>originalEvent</code> <code>MouseEvent</code> The DOM event that triggered the boxzoom event. Can be a <code>MouseEvent</code> or <code>KeyboardEvent</code> <code>target</code> <code>Map</code> The <code>Map</code> instance that triggered the event <code>type</code> <code>\"boxzoomstart\"</code> | <code>\"boxzoomend\"</code> | <code>\"boxzoomcancel\"</code> The type of boxzoom event. One of <code>boxzoomstart</code>, <code>boxzoomend</code> or <code>boxzoomcancel</code>"},{"location":"API/types/maplibregl.MapLibreZoomEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:661</p>"},{"location":"API/types/maplibregl.MapOptions/","title":"Type alias: MapOptions","text":"<p>maplibregl.MapOptions</p> <p>\u01ac MapOptions: <code>Object</code></p> <p>The Map options object.</p>"},{"location":"API/types/maplibregl.MapOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>antialias?</code> <code>boolean</code> If <code>true</code>, the gl context will be created with MSAA antialiasing, which can be useful for antialiasing custom layers. This is <code>false</code> by default as a performance optimization. <code>attributionControl?</code> <code>boolean</code> If <code>true</code>, an AttributionControl will be added to the map. <code>Default Value</code> <code>ts true</code> <code>bearing?</code> <code>number</code> The initial bearing (rotation) of the map, measured in degrees counter-clockwise from north. If <code>bearing</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>. <code>Default Value</code> <code>ts 0</code> <code>bearingSnap?</code> <code>number</code> The threshold, measured in degrees, that determines when the map's bearing will snap to north. For example, with a <code>bearingSnap</code> of 7, if the user rotates the map within 7 degrees of north, the map will automatically snap to exact north. <code>Default Value</code> <code>ts 7</code> <code>bounds?</code> <code>LngLatBoundsLike</code> The initial bounds of the map. If <code>bounds</code> is specified, it overrides <code>center</code> and <code>zoom</code> constructor options. <code>boxZoom?</code> <code>boolean</code> If <code>true</code>, the \"box zoom\" interaction is enabled (see BoxZoomHandler). <code>Default Value</code> <code>ts true</code> <code>center?</code> <code>LngLatLike</code> The initial geographical centerpoint of the map. If <code>center</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>[0, 0]</code> Note: MapLibre GL JS uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match GeoJSON. <code>Default Value</code> <code>ts [0, 0]</code> <code>clickTolerance?</code> <code>number</code> The max number of pixels a user can shift the mouse pointer during a click for it to be considered a valid click (as opposed to a mouse drag). <code>Default Value</code> <code>ts true</code> <code>collectResourceTiming?</code> <code>boolean</code> If <code>true</code>, Resource Timing API information will be collected for requests made by GeoJSON and Vector Tile web workers (this information is normally inaccessible from the main Javascript thread). Information will be returned in a <code>resourceTiming</code> property of relevant <code>data</code> events. <code>Default Value</code> <code>ts false</code> <code>container</code> <code>HTMLElement</code> | <code>string</code> The HTML element in which MapLibre GL JS will render the map, or the element's string <code>id</code>. The specified element must have no children. <code>cooperativeGestures?</code> <code>boolean</code> | <code>GestureOptions</code> If <code>true</code> or set to an options object, the map is only accessible on desktop while holding Command/Ctrl and only accessible on mobile with two fingers. Interacting with the map using normal gestures will trigger an informational screen. With this option enabled, \"drag to pitch\" requires a three-finger gesture. Cooperative gestures are disabled when a map enters fullscreen using FullscreenControl. <code>Default Value</code> <code>ts undefined</code> <code>crossSourceCollisions?</code> <code>boolean</code> If <code>true</code>, symbols from multiple sources can collide with each other during collision detection. If <code>false</code>, collision detection is run separately for the symbols in each source. <code>Default Value</code> <code>ts true</code> <code>customAttribution?</code> <code>string</code> | <code>string</code>[] Attribution text to show in an AttributionControl. Only applicable if <code>options.attributionControl</code> is <code>true</code>. <code>doubleClickZoom?</code> <code>boolean</code> If <code>true</code>, the \"double click to zoom\" interaction is enabled (see DoubleClickZoomHandler). <code>Default Value</code> <code>ts true</code> <code>dragPan?</code> <code>boolean</code> | <code>DragPanOptions</code> If <code>true</code>, the \"drag to pan\" interaction is enabled. An <code>Object</code> value is passed as options to DragPanHandler#enable. <code>Default Value</code> <code>ts true</code> <code>dragRotate?</code> <code>boolean</code> If <code>true</code>, the \"drag to rotate\" interaction is enabled (see DragRotateHandler). <code>Default Value</code> <code>ts true</code> <code>fadeDuration?</code> <code>number</code> Controls the duration of the fade-in/fade-out animation for label collisions after initial map load, in milliseconds. This setting affects all symbol layers. This setting does not affect the duration of runtime styling transitions or raster tile cross-fading. <code>Default Value</code> <code>ts 300</code> <code>failIfMajorPerformanceCaveat?</code> <code>boolean</code> If <code>true</code>, map creation will fail if the performance of MapLibre GL JS would be dramatically worse than expected (i.e. a software renderer would be used). <code>Default Value</code> <code>ts false</code> <code>fitBoundsOptions?</code> <code>FitBoundsOptions</code> A FitBoundsOptions options object to use only when fitting the initial <code>bounds</code> provided above. <code>hash?</code> <code>boolean</code> | <code>string</code> If <code>true</code>, the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL. For example, <code>http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60</code>. An additional string may optionally be provided to indicate a parameter-styled hash, e.g. http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&amp;foo=bar, where foo is a custom parameter and bar is an arbitrary hash distinct from the map hash. <code>Default Value</code> <code>ts false</code> <code>interactive?</code> <code>boolean</code> If <code>false</code>, no mouse, touch, or keyboard listeners will be attached to the map, so it will not respond to interaction. <code>Default Value</code> <code>ts true</code> <code>keyboard?</code> <code>boolean</code> If <code>true</code>, keyboard shortcuts are enabled (see KeyboardHandler). <code>Default Value</code> <code>ts true</code> <code>localIdeographFontFamily?</code> <code>string</code> Defines a CSS font-family for locally overriding generation of glyphs in the 'CJK Unified Ideographs', 'Hiragana', 'Katakana' and 'Hangul Syllables' ranges. In these ranges, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold). Set to <code>false</code>, to enable font settings from the map's style for these glyph ranges. The purpose of this option is to avoid bandwidth-intensive glyph server requests. (See Use locally generated ideographs.) <code>Default Value</code> <code>ts 'sans-serif'</code> <code>locale?</code> <code>any</code> A patch to apply to the default localization table for UI strings, e.g. control tooltips. The <code>locale</code> object maps namespaced UI string IDs to translated strings in the target language; see <code>src/ui/default_locale.js</code> for an example with all supported string IDs. The object may specify all UI strings (thereby adding support for a new translation) or only a subset of strings (thereby patching the default translation table). <code>Default Value</code> <code>ts null</code> <code>logoPosition?</code> <code>ControlPosition</code> A string representing the position of the MapLibre wordmark on the map. Valid options are <code>top-left</code>,<code>top-right</code>, <code>bottom-left</code>, or <code>bottom-right</code>. <code>Default Value</code> <code>ts 'bottom-left'</code> <code>maplibreLogo?</code> <code>boolean</code> If <code>true</code>, the MapLibre logo will be shown. <code>Default Value</code> <code>ts false</code> <code>maxBounds?</code> <code>LngLatBoundsLike</code> If set, the map will be constrained to the given bounds. <code>maxCanvasSize?</code> [<code>number</code>, <code>number</code>] The canvas' <code>width</code> and <code>height</code> max size. The values are passed as an array where the first element is max width and the second element is max height. You shouldn't set this above WebGl <code>MAX_TEXTURE_SIZE</code>. Defaults to [4096, 4096]. <code>maxPitch?</code> <code>number</code> | <code>null</code> The maximum pitch of the map (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. <code>Default Value</code> <code>ts 60</code> <code>maxTileCacheSize?</code> <code>number</code> The maximum number of tiles stored in the tile cache for a given source. If omitted, the cache will be dynamically sized based on the current viewport which can be set using <code>maxTileCacheZoomLevels</code> constructor options. <code>Default Value</code> <code>ts null</code> <code>maxTileCacheZoomLevels?</code> <code>number</code> The maximum number of zoom levels for which to store tiles for a given source. Tile cache dynamic size is calculated by multiplying <code>maxTileCacheZoomLevels</code> with the approximate number of tiles in the viewport for a given source. <code>Default Value</code> <code>ts 5</code> <code>maxZoom?</code> <code>number</code> | <code>null</code> The maximum zoom level of the map (0-24). <code>Default Value</code> <code>ts 22</code> <code>minPitch?</code> <code>number</code> | <code>null</code> The minimum pitch of the map (0-85). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. <code>Default Value</code> <code>ts 0</code> <code>minZoom?</code> <code>number</code> | <code>null</code> The minimum zoom level of the map (0-24). <code>Default Value</code> <code>ts 0</code> <code>pitch?</code> <code>number</code> The initial pitch (tilt) of the map, measured in degrees away from the plane of the screen (0-85). If <code>pitch</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>. Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. <code>Default Value</code> <code>ts 0</code> <code>pitchWithRotate?</code> <code>boolean</code> If <code>false</code>, the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled. <code>Default Value</code> <code>ts true</code> <code>pixelRatio?</code> <code>number</code> The pixel ratio. The canvas' <code>width</code> attribute will be <code>container.clientWidth * pixelRatio</code> and its <code>height</code> attribute will be <code>container.clientHeight * pixelRatio</code>. Defaults to <code>devicePixelRatio</code> if not specified. <code>preserveDrawingBuffer?</code> <code>boolean</code> If <code>true</code>, the map's canvas can be exported to a PNG using <code>map.getCanvas().toDataURL()</code>. This is <code>false</code> by default as a performance optimization. <code>Default Value</code> <code>ts false</code> <code>refreshExpiredTiles?</code> <code>boolean</code> If <code>false</code>, the map won't attempt to re-request tiles once they expire per their HTTP <code>cacheControl</code>/<code>expires</code> headers. <code>Default Value</code> <code>ts true</code> <code>renderWorldCopies?</code> <code>boolean</code> If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>: - When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude. - Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level. <code>Default Value</code> <code>ts true</code> <code>scrollZoom?</code> <code>boolean</code> | <code>AroundCenterOptions</code> If <code>true</code>, the \"scroll to zoom\" interaction is enabled. AroundCenterOptions are passed as options to ScrollZoomHandler#enable. <code>Default Value</code> <code>ts true</code> <code>style</code> <code>StyleSpecification</code> | <code>string</code> The map's MapLibre style. This must be a JSON object conforming to the schema described in the MapLibre Style Specification, or a URL to such JSON. <code>touchPitch?</code> <code>boolean</code> | <code>AroundCenterOptions</code> If <code>true</code>, the \"drag to pitch\" interaction is enabled. An <code>Object</code> value is passed as options to TwoFingersTouchPitchHandler#enable. <code>Default Value</code> <code>ts true</code> <code>touchZoomRotate?</code> <code>boolean</code> | <code>AroundCenterOptions</code> If <code>true</code>, the \"pinch to rotate and zoom\" interaction is enabled. An <code>Object</code> value is passed as options to TwoFingersTouchZoomRotateHandler#enable. <code>Default Value</code> <code>ts true</code> <code>trackResize?</code> <code>boolean</code> If <code>true</code>, the map will automatically resize when the browser window resizes. <code>Default Value</code> <code>ts true</code> <code>transformCameraUpdate?</code> <code>CameraUpdateTransformFunction</code> A callback run before the map's camera is moved due to user input or animation. The callback can be used to modify the new center, zoom, pitch and bearing. Expected to return an object containing center, zoom, pitch or bearing values to overwrite. <code>transformRequest?</code> <code>RequestTransformFunction</code> A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests. Expected to return an object with a <code>url</code> property and optionally <code>headers</code> and <code>credentials</code> properties. <code>validateStyle?</code> <code>boolean</code> If false, style validation will be skipped. Useful in production environment. <code>Default Value</code> <code>ts true</code> <code>zoom?</code> <code>number</code> The initial zoom level of the map. If <code>zoom</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>. <code>Default Value</code> <code>ts 0</code>"},{"location":"API/types/maplibregl.MapOptions/#defined-in","title":"Defined in","text":"<p>src/ui/map.ts:74</p>"},{"location":"API/types/maplibregl.MapSourceDataEvent/","title":"Type alias: MapSourceDataEvent","text":"<p>maplibregl.MapSourceDataEvent</p> <p>\u01ac MapSourceDataEvent: <code>MapLibreEvent</code> &amp; { <code>dataType</code>: <code>\"source\"</code> ; <code>isSourceLoaded</code>: <code>boolean</code> ; <code>source</code>: <code>SourceSpecification</code> ; <code>sourceDataType</code>: <code>MapSourceDataType</code> ; <code>sourceId</code>: <code>string</code> ; <code>tile</code>: <code>any</code>  }</p> <p>The source data event interface</p>"},{"location":"API/types/maplibregl.MapSourceDataEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:441</p>"},{"location":"API/types/maplibregl.MapSourceDataType/","title":"Type alias: MapSourceDataType","text":"<p>maplibregl.MapSourceDataType</p> <p>\u01ac MapSourceDataType: <code>\"content\"</code> | <code>\"metadata\"</code> | <code>\"visibility\"</code> | <code>\"idle\"</code></p> <p>The source event data type</p>"},{"location":"API/types/maplibregl.MapSourceDataType/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:29</p>"},{"location":"API/types/maplibregl.MapStyleDataEvent/","title":"Type alias: MapStyleDataEvent","text":"<p>maplibregl.MapStyleDataEvent</p> <p>\u01ac MapStyleDataEvent: <code>MapLibreEvent</code> &amp; { <code>dataType</code>: <code>\"style\"</code>  }</p> <p>The style data event</p>"},{"location":"API/types/maplibregl.MapStyleDataEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:432</p>"},{"location":"API/types/maplibregl.MapStyleImageMissingEvent/","title":"Type alias: MapStyleImageMissingEvent","text":"<p>maplibregl.MapStyleImageMissingEvent</p> <p>\u01ac MapStyleImageMissingEvent: <code>MapLibreEvent</code> &amp; { <code>id</code>: <code>string</code> ; <code>type</code>: <code>\"styleimagemissing\"</code>  }</p> <p>The style image missing event</p> <p><code>See</code></p> <p>Generate and add a missing icon to the map</p>"},{"location":"API/types/maplibregl.MapStyleImageMissingEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:745</p>"},{"location":"API/types/maplibregl.MapTerrainEvent/","title":"Type alias: MapTerrainEvent","text":"<p>maplibregl.MapTerrainEvent</p> <p>\u01ac MapTerrainEvent: <code>Object</code></p> <p>The terrain event</p>"},{"location":"API/types/maplibregl.MapTerrainEvent/#type-declaration","title":"Type declaration","text":"Name Type <code>type</code> <code>\"terrain\"</code>"},{"location":"API/types/maplibregl.MapTerrainEvent/#defined-in","title":"Defined in","text":"<p>src/ui/events.ts:724</p>"},{"location":"API/types/maplibregl.MarkerOptions/","title":"Type alias: MarkerOptions","text":"<p>maplibregl.MarkerOptions</p> <p>\u01ac MarkerOptions: <code>Object</code></p> <p>The Marker options object</p>"},{"location":"API/types/maplibregl.MarkerOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>anchor?</code> <code>PositionAnchor</code> A string indicating the part of the Marker that should be positioned closest to the coordinate set via Marker#setLngLat. Options are <code>'center'</code>, <code>'top'</code>, <code>'bottom'</code>, <code>'left'</code>, <code>'right'</code>, <code>'top-left'</code>, <code>'top-right'</code>, <code>'bottom-left'</code>, and <code>'bottom-right'</code>. <code>Default Value</code> <code>ts 'center'</code> <code>className?</code> <code>string</code> Space-separated CSS class names to add to marker element. <code>clickTolerance?</code> <code>number</code> The max number of pixels a user can shift the mouse pointer during a click on the marker for it to be considered a valid click (as opposed to a marker drag). The default is to inherit map's clickTolerance. <code>Default Value</code> <code>ts 0</code> <code>color?</code> <code>string</code> The color to use for the default marker if options.element is not provided. The default is light blue. <code>Default Value</code> <code>ts '#3FB1CE'</code> <code>draggable?</code> <code>boolean</code> A boolean indicating whether or not a marker is able to be dragged to a new position on the map. <code>Default Value</code> <code>ts false</code> <code>element?</code> <code>HTMLElement</code> DOM element to use as a marker. The default is a light blue, droplet-shaped SVG marker. <code>offset?</code> <code>PointLike</code> The offset in pixels as a PointLike object to apply relative to the element's center. Negatives indicate left and up. <code>pitchAlignment?</code> <code>Alignment</code> <code>map</code> aligns the <code>Marker</code> to the plane of the map. <code>viewport</code> aligns the <code>Marker</code> to the plane of the viewport. <code>auto</code> automatically matches the value of <code>rotationAlignment</code>. <code>Default Value</code> <code>ts 'auto'</code> <code>rotation?</code> <code>number</code> The rotation angle of the marker in degrees, relative to its respective <code>rotationAlignment</code> setting. A positive value will rotate the marker clockwise. <code>Default Value</code> <code>ts 0</code> <code>rotationAlignment?</code> <code>Alignment</code> <code>map</code> aligns the <code>Marker</code>'s rotation relative to the map, maintaining a bearing as the map rotates. <code>viewport</code> aligns the <code>Marker</code>'s rotation relative to the viewport, agnostic to map rotations. <code>auto</code> is equivalent to <code>viewport</code>. <code>Default Value</code> <code>ts 'auto'</code> <code>scale?</code> <code>number</code> The scale to use for the default marker if options.element is not provided. The default scale corresponds to a height of <code>41px</code> and a width of <code>27px</code>. <code>Default Value</code> <code>ts 1</code>"},{"location":"API/types/maplibregl.MarkerOptions/#defined-in","title":"Defined in","text":"<p>src/ui/marker.ts:22</p>"},{"location":"API/types/maplibregl.NavigationOptions/","title":"Type alias: NavigationOptions","text":"<p>maplibregl.NavigationOptions</p> <p>\u01ac NavigationOptions: <code>Object</code></p> <p>The NavigationControl options object</p>"},{"location":"API/types/maplibregl.NavigationOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>showCompass?</code> <code>boolean</code> If <code>true</code> the compass button is included. <code>showZoom?</code> <code>boolean</code> If <code>true</code> the zoom-in and zoom-out buttons are included. <code>visualizePitch?</code> <code>boolean</code> If <code>true</code> the pitch is visualized by rotating X-axis of compass."},{"location":"API/types/maplibregl.NavigationOptions/#defined-in","title":"Defined in","text":"<p>src/ui/control/navigation_control.ts:14</p>"},{"location":"API/types/maplibregl.Offset/","title":"Type alias: Offset","text":"<p>maplibregl.Offset</p> <p>\u01ac Offset: <code>number</code> | <code>PointLike</code> | { [_ in PositionAnchor]: PointLike }</p> <p>A pixel offset specified as: - a single number specifying a distance from the location - a PointLike specifying a constant offset - an object of Points specifying an offset for each anchor position Negative offsets indicate left and up.</p>"},{"location":"API/types/maplibregl.Offset/#defined-in","title":"Defined in","text":"<p>src/ui/popup.ts:30</p>"},{"location":"API/types/maplibregl.OverlapMode/","title":"Type alias: OverlapMode","text":"<p>maplibregl.OverlapMode</p> <p>\u01ac OverlapMode: <code>\"never\"</code> | <code>\"always\"</code> | <code>\"cooperative\"</code></p> <p>The overlap mode for properties like <code>icon-overlap</code>and <code>text-overlap</code></p>"},{"location":"API/types/maplibregl.OverlapMode/#defined-in","title":"Defined in","text":"<p>src/style/style_layer/overlap_mode.ts:8</p>"},{"location":"API/types/maplibregl.PaddingOptions/","title":"Type alias: PaddingOptions","text":"<p>maplibregl.PaddingOptions</p> <p>\u01ac PaddingOptions: <code>Object</code></p> <p>Options for setting padding on calls to methods such as Map#fitBounds, Map#fitScreenCoordinates, and Map#setPadding. Adjust these options to set the amount of padding in pixels added to the edges of the canvas. Set a uniform padding on all edges or individual values for each edge. All properties of this object must be non-negative integers.</p> <p><code>Example</code></p> <pre><code>let bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre> <p><code>Example</code></p> <pre><code>let bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: 20\n});\n</code></pre> <p><code>See</code></p> <ul> <li>Fit to the bounds of a LineString</li> <li>Fit a map to a bounding box</li> </ul>"},{"location":"API/types/maplibregl.PaddingOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>bottom</code> <code>number</code> Padding in pixels from the bottom of the map canvas. <code>left</code> <code>number</code> Padding in pixels from the right of the map canvas. <code>right</code> <code>number</code> Padding in pixels from the left of the map canvas. <code>top</code> <code>number</code> Padding in pixels from the top of the map canvas."},{"location":"API/types/maplibregl.PaddingOptions/#defined-in","title":"Defined in","text":"<p>src/geo/edge_insets.ts:129</p>"},{"location":"API/types/maplibregl.PointLike/","title":"Type alias: PointLike","text":"<p>maplibregl.PointLike</p> <p>\u01ac PointLike: <code>Point</code> | [<code>number</code>, <code>number</code>]</p> <p>A Point or an array of two numbers representing <code>x</code> and <code>y</code> screen coordinates in pixels.</p> <p><code>Example</code></p> <pre><code>let p1 = new Point(-77, 38); // a PointLike which is a Point\nlet p2 = [-77, 38]; // a PointLike which is an array of two numbers\n</code></pre>"},{"location":"API/types/maplibregl.PointLike/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:28</p>"},{"location":"API/types/maplibregl.PositionAnchor/","title":"Type alias: PositionAnchor","text":"<p>maplibregl.PositionAnchor</p> <p>\u01ac PositionAnchor: <code>\"center\"</code> | <code>\"top\"</code> | <code>\"bottom\"</code> | <code>\"left\"</code> | <code>\"right\"</code> | <code>\"top-left\"</code> | <code>\"top-right\"</code> | <code>\"bottom-left\"</code> | <code>\"bottom-right\"</code></p> <p>Where to position the anchor. Used by a popup and a marker.</p>"},{"location":"API/types/maplibregl.PositionAnchor/#defined-in","title":"Defined in","text":"<p>src/ui/anchor.ts:5</p>"},{"location":"API/types/maplibregl.PossiblyEvaluatedValue/","title":"Type alias: PossiblyEvaluatedValue\\&lt;T&gt;","text":"<p>maplibregl.PossiblyEvaluatedValue</p> <p>\u01ac PossiblyEvaluatedValue\\&lt;<code>T</code>&gt;: { <code>kind</code>: <code>\"constant\"</code> ; <code>value</code>: <code>T</code>  } | <code>SourceExpression</code> | <code>CompositeExpression</code></p> <p>\"Possibly evaluated value\" is an intermediate stage in the evaluation chain for both paint and layout property values. The purpose of this stage is to optimize away unnecessary recalculations for data-driven properties. Code which uses data-driven property values must assume that the value is dependent on feature data, and request that it be evaluated for each feature. But when that property value is in fact a constant or camera function, the calculation will not actually depend on the feature, and we can benefit from returning the prior result of having done the evaluation once, ahead of time, in an intermediate step whose inputs are just the value and \"global\" parameters such as current zoom level.</p> <p><code>PossiblyEvaluatedValue</code> represents the three possible outcomes of this step: if the input value was a constant or camera expression, then the \"possibly evaluated\" result is a constant value. Otherwise, the input value was either a source or composite expression, and we must defer final evaluation until supplied a feature. We separate the source and composite cases because they are handled differently when generating GL attributes, buffers, and uniforms.</p> <p>Note that <code>PossiblyEvaluatedValue</code> (and <code>PossiblyEvaluatedPropertyValue</code>, below) are not used for properties that do not allow data-driven values. For such properties, we know that the \"possibly evaluated\" result is always a constant scalar value. See below.</p>"},{"location":"API/types/maplibregl.PossiblyEvaluatedValue/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/types/maplibregl.PossiblyEvaluatedValue/#defined-in","title":"Defined in","text":"<p>src/style/properties.ts:377</p>"},{"location":"API/types/maplibregl.QueryRenderedFeaturesOptions/","title":"Type alias: QueryRenderedFeaturesOptions","text":"<p>maplibregl.QueryRenderedFeaturesOptions</p> <p>\u01ac QueryRenderedFeaturesOptions: <code>Object</code></p> <p>Options to pass to query the map for the rendered features</p>"},{"location":"API/types/maplibregl.QueryRenderedFeaturesOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>availableImages?</code> <code>string</code>[] An array of string representing the available images <code>filter?</code> <code>FilterSpecification</code> A filter to limit query results. <code>layers?</code> <code>string</code>[] An array of style layer IDs for the query to inspect. Only features within these layers will be returned. If this parameter is undefined, all layers will be checked. <code>validate?</code> <code>boolean</code> Whether to check if the [options.filter] conforms to the MapLibre Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."},{"location":"API/types/maplibregl.QueryRenderedFeaturesOptions/#defined-in","title":"Defined in","text":"<p>src/source/query_features.ts:14</p>"},{"location":"API/types/maplibregl.QuerySourceFeatureOptions/","title":"Type alias: QuerySourceFeatureOptions","text":"<p>maplibregl.QuerySourceFeatureOptions</p> <p>\u01ac QuerySourceFeatureOptions: <code>Object</code></p> <p>The options object related to the Map#queryRenderedFeatures method</p>"},{"location":"API/types/maplibregl.QuerySourceFeatureOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>filter?</code> <code>FilterSpecification</code> A filter to limit query results. <code>sourceLayer?</code> <code>string</code> The name of the source layer to query. For vector tile sources, this parameter is required. For GeoJSON sources, it is ignored. <code>validate?</code> <code>boolean</code> Whether to check if the [parameters.filter] conforms to the MapLibre Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function. <code>Default Value</code> <code>ts true</code>"},{"location":"API/types/maplibregl.QuerySourceFeatureOptions/#defined-in","title":"Defined in","text":"<p>src/source/query_features.ts:37</p>"},{"location":"API/types/maplibregl.Rect/","title":"Type alias: Rect","text":"<p>maplibregl.Rect</p> <p>\u01ac Rect: <code>Object</code></p> <p>A rectangle type with postion, width and height.</p>"},{"location":"API/types/maplibregl.Rect/#type-declaration","title":"Type declaration","text":"Name Type <code>h</code> <code>number</code> <code>w</code> <code>number</code> <code>x</code> <code>number</code> <code>y</code> <code>number</code>"},{"location":"API/types/maplibregl.Rect/#defined-in","title":"Defined in","text":"<p>src/render/glyph_atlas.ts:12</p>"},{"location":"API/types/maplibregl.RequestParameters/","title":"Type alias: RequestParameters","text":"<p>maplibregl.RequestParameters</p> <p>\u01ac RequestParameters: <code>Object</code></p> <p>A <code>RequestParameters</code> object to be returned from Map.options.transformRequest callbacks.</p> <p><code>Example</code></p> <pre><code>// use transformRequest to modify requests that begin with `http://myHost`\ntransformRequest: function(url, resourceType) {\n if (resourceType === 'Source' &amp;&amp; url.indexOf('http://myHost') &gt; -1) {\n   return {\n     url: url.replace('http', 'https'),\n     headers: { 'my-custom-header': true },\n     credentials: 'include'  // Include cookies for cross-origin requests\n   }\n  }\n}\n</code></pre>"},{"location":"API/types/maplibregl.RequestParameters/#type-declaration","title":"Type declaration","text":"Name Type Description <code>body?</code> <code>string</code> Request body. <code>cache?</code> <code>RequestCache</code> Parameters supported only by browser fetch API. Property of the Request interface contains the cache mode of the request. It controls how the request will interact with the browser's HTTP cache. (https://developer.mozilla.org/en-US/docs/Web/API/Request/cache) <code>collectResourceTiming?</code> <code>boolean</code> If <code>true</code>, Resource Timing API information will be collected for these transformed requests and returned in a resourceTiming property of relevant data events. <code>credentials?</code> <code>\"same-origin\"</code> | <code>\"include\"</code> <code>'same-origin'\\|'include'</code> Use 'include' to send cookies with cross-origin requests. <code>headers?</code> <code>any</code> The headers to be sent with the request. <code>method?</code> <code>\"GET\"</code> | <code>\"POST\"</code> | <code>\"PUT\"</code> Request method <code>'GET' \\| 'POST' \\| 'PUT'</code>. <code>type?</code> <code>\"string\"</code> | <code>\"json\"</code> | <code>\"arrayBuffer\"</code> | <code>\"image\"</code> Response body type to be returned <code>'string' \\| 'json' \\| 'arrayBuffer'</code>. <code>url</code> <code>string</code> The URL to be requested."},{"location":"API/types/maplibregl.RequestParameters/#defined-in","title":"Defined in","text":"<p>src/util/ajax.ts:23</p>"},{"location":"API/types/maplibregl.RequestTransformFunction/","title":"Type alias: RequestTransformFunction","text":"<p>maplibregl.RequestTransformFunction</p> <p>\u01ac RequestTransformFunction: (<code>url</code>: <code>string</code>, <code>resourceType?</code>: <code>ResourceType</code>) =&gt; <code>RequestParameters</code> | <code>undefined</code></p>"},{"location":"API/types/maplibregl.RequestTransformFunction/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>url</code>, <code>resourceType?</code>): <code>RequestParameters</code> | <code>undefined</code></p> <p>This function is used to tranform a request. It is used just before executing the relevant request.</p>"},{"location":"API/types/maplibregl.RequestTransformFunction/#parameters","title":"Parameters","text":"Name Type <code>url</code> <code>string</code> <code>resourceType?</code> <code>ResourceType</code>"},{"location":"API/types/maplibregl.RequestTransformFunction/#returns","title":"Returns","text":"<p><code>RequestParameters</code> | <code>undefined</code></p>"},{"location":"API/types/maplibregl.RequestTransformFunction/#defined-in","title":"Defined in","text":"<p>src/util/request_manager.ts:21</p>"},{"location":"API/types/maplibregl.RequireAtLeastOne/","title":"Type alias: RequireAtLeastOne\\&lt;T&gt;","text":"<p>maplibregl.RequireAtLeastOne</p> <p>\u01ac RequireAtLeastOne\\&lt;<code>T</code>&gt;: { [K in keyof T]-?: Required\\&lt;Pick\\&lt;T, K&gt;&gt; &amp; Partial\\&lt;Pick\\&lt;T, Exclude\\&lt;keyof T, K&gt;&gt;&gt; }[keyof <code>T</code>]</p> <p>A helper to allow require of at least one propery</p>"},{"location":"API/types/maplibregl.RequireAtLeastOne/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/types/maplibregl.RequireAtLeastOne/#defined-in","title":"Defined in","text":"<p>src/ui/camera.ts:33</p>"},{"location":"API/types/maplibregl.ResponseCallback/","title":"Type alias: ResponseCallback\\&lt;T&gt;","text":"<p>maplibregl.ResponseCallback</p> <p>\u01ac ResponseCallback\\&lt;<code>T</code>&gt;: (<code>error?</code>: <code>Error</code> | <code>null</code>, <code>data?</code>: <code>T</code> | <code>null</code>, <code>cacheControl?</code>: <code>string</code> | <code>null</code>, <code>expires?</code>: <code>string</code> | <code>null</code>) =&gt; <code>void</code></p>"},{"location":"API/types/maplibregl.ResponseCallback/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"API/types/maplibregl.ResponseCallback/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>error?</code>, <code>data?</code>, <code>cacheControl?</code>, <code>expires?</code>): <code>void</code></p> <p>The response callback used in various places</p>"},{"location":"API/types/maplibregl.ResponseCallback/#parameters","title":"Parameters","text":"Name Type <code>error?</code> <code>Error</code> | <code>null</code> <code>data?</code> <code>T</code> | <code>null</code> <code>cacheControl?</code> <code>string</code> | <code>null</code> <code>expires?</code> <code>string</code> | <code>null</code>"},{"location":"API/types/maplibregl.ResponseCallback/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/types/maplibregl.ResponseCallback/#defined-in","title":"Defined in","text":"<p>src/util/ajax.ts:61</p>"},{"location":"API/types/maplibregl.ScaleOptions/","title":"Type alias: ScaleOptions","text":"<p>maplibregl.ScaleOptions</p> <p>\u01ac ScaleOptions: <code>Object</code></p> <p>The ScaleControl options object</p>"},{"location":"API/types/maplibregl.ScaleOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>maxWidth?</code> <code>number</code> The maximum length of the scale control in pixels. <code>Default Value</code> <code>ts 100</code> <code>unit?</code> <code>Unit</code> Unit of the distance (<code>'imperial'</code>, <code>'metric'</code> or <code>'nautical'</code>). <code>Default Value</code> <code>ts 'metric'</code>"},{"location":"API/types/maplibregl.ScaleOptions/#defined-in","title":"Defined in","text":"<p>src/ui/control/scale_control.ts:15</p>"},{"location":"API/types/maplibregl.SerializedStructArray/","title":"Type alias: SerializedStructArray","text":"<p>maplibregl.SerializedStructArray</p> <p>\u01ac SerializedStructArray: <code>Object</code></p> <p>An array that can be desialized</p>"},{"location":"API/types/maplibregl.SerializedStructArray/#type-declaration","title":"Type declaration","text":"Name Type <code>arrayBuffer</code> <code>ArrayBuffer</code> <code>length</code> <code>number</code>"},{"location":"API/types/maplibregl.SerializedStructArray/#defined-in","title":"Defined in","text":"<p>src/util/struct_array.ts:72</p>"},{"location":"API/types/maplibregl.SetClusterOptions/","title":"Type alias: SetClusterOptions","text":"<p>maplibregl.SetClusterOptions</p> <p>\u01ac SetClusterOptions: <code>Object</code></p> <p>The cluster options to set</p>"},{"location":"API/types/maplibregl.SetClusterOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>cluster?</code> <code>boolean</code> Whether or not to cluster <code>clusterMaxZoom?</code> <code>number</code> The cluster's max zoom <code>clusterRadius?</code> <code>number</code> The cluster's radius"},{"location":"API/types/maplibregl.SetClusterOptions/#defined-in","title":"Defined in","text":"<p>src/source/geojson_source.ts:52</p>"},{"location":"API/types/maplibregl.SourceClass/","title":"Type alias: SourceClass","text":"<p>maplibregl.SourceClass</p> <p>\u01ac SourceClass: (<code>id</code>: <code>string</code>, <code>specification</code>: <code>SourceSpecification</code> | <code>CanvasSourceSpecification</code>, <code>dispatcher</code>: <code>Dispatcher</code>, <code>eventedParent</code>: <code>Evented</code>) =&gt; <code>Source</code> &amp; <code>SourceStatics</code></p> <p>A general definition of a Source class for factory usage</p>"},{"location":"API/types/maplibregl.SourceClass/#defined-in","title":"Defined in","text":"<p>src/source/source.ts:86</p>"},{"location":"API/types/maplibregl.SourceStatics/","title":"Type alias: SourceStatics","text":"<p>maplibregl.SourceStatics</p> <p>\u01ac SourceStatics: <code>Object</code></p> <p>A supporting type to the source definition</p>"},{"location":"API/types/maplibregl.SourceStatics/#type-declaration","title":"Type declaration","text":"Name Type <code>workerSourceURL?</code> <code>URL</code>"},{"location":"API/types/maplibregl.SourceStatics/#defined-in","title":"Defined in","text":"<p>src/source/source.ts:75</p>"},{"location":"API/types/maplibregl.SpriteOnDemandStyleImage/","title":"Type alias: SpriteOnDemandStyleImage","text":"<p>maplibregl.SpriteOnDemandStyleImage</p> <p>\u01ac SpriteOnDemandStyleImage: <code>Object</code></p> <p>The sprite data</p>"},{"location":"API/types/maplibregl.SpriteOnDemandStyleImage/#type-declaration","title":"Type declaration","text":"Name Type <code>context</code> <code>CanvasRenderingContext2D</code> <code>height</code> <code>number</code> <code>width</code> <code>number</code> <code>x</code> <code>number</code> <code>y</code> <code>number</code>"},{"location":"API/types/maplibregl.SpriteOnDemandStyleImage/#defined-in","title":"Defined in","text":"<p>src/style/style_image.ts:8</p>"},{"location":"API/types/maplibregl.StyleImage/","title":"Type alias: StyleImage","text":"<p>maplibregl.StyleImage</p> <p>\u01ac StyleImage: <code>StyleImageData</code> &amp; <code>StyleImageMetadata</code></p> <p>the style's image, including data and metedata</p>"},{"location":"API/types/maplibregl.StyleImage/#defined-in","title":"Defined in","text":"<p>src/style/style_image.ts:56</p>"},{"location":"API/types/maplibregl.StyleImageData/","title":"Type alias: StyleImageData","text":"<p>maplibregl.StyleImageData</p> <p>\u01ac StyleImageData: <code>Object</code></p> <p>The style's image metadata</p>"},{"location":"API/types/maplibregl.StyleImageData/#type-declaration","title":"Type declaration","text":"Name Type <code>data</code> <code>RGBAImage</code> <code>hasRenderCallback?</code> <code>boolean</code> <code>spriteData?</code> <code>SpriteOnDemandStyleImage</code> <code>userImage?</code> <code>StyleImageInterface</code> <code>version?</code> <code>number</code>"},{"location":"API/types/maplibregl.StyleImageData/#defined-in","title":"Defined in","text":"<p>src/style/style_image.ts:19</p>"},{"location":"API/types/maplibregl.StyleImageMetadata/","title":"Type alias: StyleImageMetadata","text":"<p>maplibregl.StyleImageMetadata</p> <p>\u01ac StyleImageMetadata: <code>Object</code></p> <p>The style's image metadata</p>"},{"location":"API/types/maplibregl.StyleImageMetadata/#type-declaration","title":"Type declaration","text":"Name Type Description <code>content?</code> [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>] If <code>icon-text-fit</code> is used in a layer with this image, this option defines the part of the image that can be covered by the content in <code>text-field</code>. <code>pixelRatio</code> <code>number</code> The ratio of pixels in the image to physical pixels on the screen <code>sdf</code> <code>boolean</code> Whether the image should be interpreted as an SDF image <code>stretchX?</code> [<code>number</code>, <code>number</code>][] If <code>icon-text-fit</code> is used in a layer with this image, this option defines the part(s) of the image that can be stretched horizontally. <code>stretchY?</code> [<code>number</code>, <code>number</code>][] If <code>icon-text-fit</code> is used in a layer with this image, this option defines the part(s) of the image that can be stretched vertically."},{"location":"API/types/maplibregl.StyleImageMetadata/#defined-in","title":"Defined in","text":"<p>src/style/style_image.ts:30</p>"},{"location":"API/types/maplibregl.StyleOptions/","title":"Type alias: StyleOptions","text":"<p>maplibregl.StyleOptions</p> <p>\u01ac StyleOptions: <code>Object</code></p> <p>The options object related to the Map's style related methods</p>"},{"location":"API/types/maplibregl.StyleOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>localIdeographFontFamily?</code> <code>string</code> Defines a CSS font-family for locally overriding generation of glyphs in the 'CJK Unified Ideographs', 'Hiragana', 'Katakana' and 'Hangul Syllables' ranges. In these ranges, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold). Set to <code>false</code>, to enable font settings from the map's style for these glyph ranges. Forces a full update. <code>validate?</code> <code>boolean</code> If false, style validation will be skipped. Useful in production environment."},{"location":"API/types/maplibregl.StyleOptions/#defined-in","title":"Defined in","text":"<p>src/style/style.ts:109</p>"},{"location":"API/types/maplibregl.StyleSetterOptions/","title":"Type alias: StyleSetterOptions","text":"<p>maplibregl.StyleSetterOptions</p> <p>\u01ac StyleSetterOptions: <code>Object</code></p> <p>Supporting type to add validation to another style related type</p>"},{"location":"API/types/maplibregl.StyleSetterOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>validate?</code> <code>boolean</code> Whether to check if the filter conforms to the MapLibre Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function."},{"location":"API/types/maplibregl.StyleSetterOptions/#defined-in","title":"Defined in","text":"<p>src/style/style.ts:127</p>"},{"location":"API/types/maplibregl.StyleSwapOptions/","title":"Type alias: StyleSwapOptions","text":"<p>maplibregl.StyleSwapOptions</p> <p>\u01ac StyleSwapOptions: <code>Object</code></p> <p>The options object related to the Map's style related methods</p>"},{"location":"API/types/maplibregl.StyleSwapOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>diff?</code> <code>boolean</code> If false, force a 'full' update, removing the current style and building the given one instead of attempting a diff-based update. <code>transformStyle?</code> <code>TransformStyleFunction</code> TransformStyleFunction is a convenience function that allows to modify a style after it is fetched but before it is committed to the map state. Refer to TransformStyleFunction."},{"location":"API/types/maplibregl.StyleSwapOptions/#defined-in","title":"Defined in","text":"<p>src/style/style.ts:181</p>"},{"location":"API/types/maplibregl.SymbolQuad/","title":"Type alias: SymbolQuad","text":"<p>maplibregl.SymbolQuad</p> <p>\u01ac SymbolQuad: <code>Object</code></p> <p>A textured quad for rendering a single icon or glyph.</p> <p>The zoom range the glyph can be shown is defined by minScale and maxScale.</p> <p><code>Param</code></p> <p>The offset of the top left corner from the anchor.</p> <p><code>Param</code></p> <p>The offset of the top right corner from the anchor.</p> <p><code>Param</code></p> <p>The offset of the bottom left corner from the anchor.</p> <p><code>Param</code></p> <p>The offset of the bottom right corner from the anchor.</p> <p><code>Param</code></p> <p>The texture coordinates.</p>"},{"location":"API/types/maplibregl.SymbolQuad/#type-declaration","title":"Type declaration","text":"Name Type <code>bl</code> <code>Point</code> <code>br</code> <code>Point</code> <code>glyphOffset</code> [<code>number</code>, <code>number</code>] <code>isSDF</code> <code>boolean</code> <code>minFontScaleX</code> <code>number</code> <code>minFontScaleY</code> <code>number</code> <code>pixelOffsetBR</code> <code>Point</code> <code>pixelOffsetTL</code> <code>Point</code> <code>sectionIndex</code> <code>number</code> <code>tex</code> { <code>h</code>: <code>number</code> ; <code>w</code>: <code>number</code> ; <code>x</code>: <code>number</code> ; <code>y</code>: <code>number</code>  } <code>tex.h</code> <code>number</code> <code>tex.w</code> <code>number</code> <code>tex.x</code> <code>number</code> <code>tex.y</code> <code>number</code> <code>tl</code> <code>Point</code> <code>tr</code> <code>Point</code> <code>writingMode</code> <code>any</code> | <code>void</code>"},{"location":"API/types/maplibregl.SymbolQuad/#defined-in","title":"Defined in","text":"<p>src/symbol/quads.ts:26</p>"},{"location":"API/types/maplibregl.TileState/","title":"Type alias: TileState","text":"<p>maplibregl.TileState</p> <p>\u01ac TileState: <code>\"loading\"</code> | <code>\"loaded\"</code> | <code>\"reloading\"</code> | <code>\"unloaded\"</code> | <code>\"errored\"</code> | <code>\"expired\"</code></p> <p>The tile's state, can be: - <code>loading</code> Tile data is in the process of loading. - <code>loaded</code> Tile data has been loaded. Tile can be rendered. - <code>reloading</code> Tile data has been loaded and is being updated. Tile can be rendered. - <code>unloaded</code> Tile data has been deleted. - <code>errored</code> Tile data was not loaded because of an error. - <code>expired</code> Tile data was previously loaded, but has expired per its HTTP headers and is in the process of refreshing.</p>"},{"location":"API/types/maplibregl.TileState/#defined-in","title":"Defined in","text":"<p>src/source/tile.ts:47</p>"},{"location":"API/types/maplibregl.Transferable/","title":"Type alias: Transferable","text":"<p>maplibregl.Transferable</p> <p>\u01ac Transferable: <code>ArrayBuffer</code> | <code>MessagePort</code> | <code>ImageBitmap</code></p> <p>An object with is transferable between main and worker thread</p>"},{"location":"API/types/maplibregl.Transferable/#defined-in","title":"Defined in","text":"<p>src/types/transferable.ts:4</p>"},{"location":"API/types/maplibregl.TransformStyleFunction/","title":"Type alias: TransformStyleFunction","text":"<p>maplibregl.TransformStyleFunction</p> <p>\u01ac TransformStyleFunction: (<code>previous</code>: <code>StyleSpecification</code> | <code>undefined</code>, <code>next</code>: <code>StyleSpecification</code>) =&gt; <code>StyleSpecification</code></p>"},{"location":"API/types/maplibregl.TransformStyleFunction/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>previous</code>, <code>next</code>): <code>StyleSpecification</code></p> <p>Part of Map#setStyle options, transformStyle is a convenience function that allows to modify a style after it is fetched but before it is committed to the map state this function exposes previous and next styles, it can be commonly used to support a range of functionalities like:      when previous style carries certain 'state' that needs to be carried over to a new style gracefully      when a desired style is a certain combination of previous and incoming style      when an incoming style requires modification based on external state</p>"},{"location":"API/types/maplibregl.TransformStyleFunction/#parameters","title":"Parameters","text":"Name Type <code>previous</code> <code>StyleSpecification</code> | <code>undefined</code> <code>next</code> <code>StyleSpecification</code>"},{"location":"API/types/maplibregl.TransformStyleFunction/#returns","title":"Returns","text":"<p><code>StyleSpecification</code></p> <p>resulting style that will to be applied to the map</p> <p><code>Example</code></p> <pre><code>map.setStyle('https://demotiles.maplibre.org/style.json', {\n  transformStyle: (previousStyle, nextStyle) =&gt; ({\n      ...nextStyle,\n      sources: {\n          ...nextStyle.sources,\n          // copy a source from previous style\n          'osm': previousStyle.sources.osm\n      },\n      layers: [\n          // background layer\n          nextStyle.layers[0],\n          // copy a layer from previous style\n          previousStyle.layers[0],\n          // other layers from the next style\n          ...nextStyle.layers.slice(1).map(layer =&gt; {\n              // hide the layers we don't need from demotiles style\n              if (layer.id.startsWith('geolines')) {\n                  layer.layout = {...layer.layout || {}, visibility: 'none'};\n              // filter out US polygons\n              } else if (layer.id.startsWith('coastline') || layer.id.startsWith('countries')) {\n                  layer.filter = ['!=', ['get', 'ADM0_A3'], 'USA'];\n              }\n              return layer;\n          })\n      ]\n  })\n});\n</code></pre>"},{"location":"API/types/maplibregl.TransformStyleFunction/#defined-in","title":"Defined in","text":"<p>src/style/style.ts:176</p>"},{"location":"API/types/maplibregl.Unit/","title":"Type alias: Unit","text":"<p>maplibregl.Unit</p> <p>\u01ac Unit: <code>\"imperial\"</code> | <code>\"metric\"</code> | <code>\"nautical\"</code></p> <p>The unit type for length to use for the ScaleControl</p>"},{"location":"API/types/maplibregl.Unit/#defined-in","title":"Defined in","text":"<p>src/ui/control/scale_control.ts:10</p>"},{"location":"API/types/maplibregl.UpdateImageOptions/","title":"Type alias: UpdateImageOptions","text":"<p>maplibregl.UpdateImageOptions</p> <p>\u01ac UpdateImageOptions: <code>Object</code></p> <p>The options object for the ImageSource#updateImage method</p>"},{"location":"API/types/maplibregl.UpdateImageOptions/#type-declaration","title":"Type declaration","text":"Name Type Description <code>coordinates?</code> <code>Coordinates</code> The image coordinates <code>url</code> <code>string</code> Required image URL."},{"location":"API/types/maplibregl.UpdateImageOptions/#defined-in","title":"Defined in","text":"<p>src/source/image_source.ts:36</p>"},{"location":"examples/","title":"Overview","text":""},{"location":"examples/#display-buildings-in-3d","title":"Display buildings in 3D","text":"<p>Use extrusions to display buildings' height in 3D.</p>"},{"location":"examples/#extrude-polygons-for-3d-indoor-mapping","title":"Extrude polygons for 3D indoor mapping","text":"<p>Create a 3D indoor map with the fill-extrude-height paint property.</p>"},{"location":"examples/#3d-terrain","title":"3D Terrain","text":"<p>Go beyond hillshade and show elevation in actual 3D.</p>"},{"location":"examples/#add-a-3d-model-with-babylonjs","title":"Add a 3D model with babylon.js","text":"<p>Use a custom style layer with babylon.js to add a 3D model to the map.</p>"},{"location":"examples/#add-a-3d-model-with-threejs","title":"Add a 3D model with three.js","text":"<p>Use a custom style layer with three.js to add a 3D model to the map.</p>"},{"location":"examples/#add-a-default-marker","title":"Add a default marker","text":"<p>Add a default marker to the map.</p>"},{"location":"examples/#add-an-animated-icon-to-the-map","title":"Add an animated icon to the map","text":"<p>Add an animated icon to the map that was generated at runtime with the Canvas API.</p>"},{"location":"examples/#add-a-generated-icon-to-the-map","title":"Add a generated icon to the map","text":"<p>Add an icon to the map that was generated at runtime.</p>"},{"location":"examples/#generate-and-add-a-missing-icon-to-the-map","title":"Generate and add a missing icon to the map","text":"<p>Dynamically generate a missing icon at runtime and add it to the map.</p>"},{"location":"examples/#add-a-stretchable-image-to-the-map","title":"Add a stretchable image to the map","text":"<p>Use a stretchable image as a background for text.</p>"},{"location":"examples/#add-an-icon-to-the-map","title":"Add an icon to the map","text":"<p>Add an icon to the map from an external URL and use it in a symbol layer.</p>"},{"location":"examples/#animate-a-line","title":"Animate a line","text":"<p>Animate a line by updating a GeoJSON source on each frame.</p>"},{"location":"examples/#animate-map-camera-around-a-point","title":"Animate map camera around a point","text":"<p>Animate the map camera around a point.</p>"},{"location":"examples/#animate-a-series-of-images","title":"Animate a series of images","text":"<p>Use a series of image sources to create an animation.</p>"},{"location":"examples/#animate-a-marker","title":"Animate a marker","text":"<p>Animate the position of a marker by updating its location on each frame.</p>"},{"location":"examples/#animate-a-point","title":"Animate a point","text":"<p>Animate the position of a point by updating a GeoJSON source on each frame.</p>"},{"location":"examples/#animate-a-point-along-a-route","title":"Animate a point along a route","text":"<p>Use Turf to smoothly animate a point along the distance of a line.</p>"},{"location":"examples/#change-the-default-position-for-attribution","title":"Change the default position for attribution","text":"<p>Place attribution in the top-left position when initializing a map.</p>"},{"location":"examples/#customize-camera-animations","title":"Customize camera animations","text":"<p>Customize camera animations using AnimationOptions.</p>"},{"location":"examples/#add-a-canvas-source","title":"Add a canvas source","text":"<p>Add a canvas source to the map.</p>"},{"location":"examples/#center-the-map-on-a-clicked-symbol","title":"Center the map on a clicked symbol","text":"<p>Use events and flyTo to center the map on a symbol.</p>"},{"location":"examples/#change-building-color-based-on-zoom-level","title":"Change building color based on zoom level","text":"<p>Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.</p>"},{"location":"examples/#change-the-case-of-labels","title":"Change the case of labels","text":"<p>Use the upcase and downcase expressions to change the case of labels.</p>"},{"location":"examples/#check-if-maplibre-gl-js-is-supported","title":"Check if MapLibre GL JS is supported","text":"<p>Check for MapLibre GL browser support.</p>"},{"location":"examples/#display-html-clusters-with-custom-properties","title":"Display HTML clusters with custom properties","text":"<p>Extend clustering with HTML markers and custom property expressions. </p>"},{"location":"examples/#create-and-style-clusters","title":"Create and style clusters","text":"<p>Use MapLibre GL JS' built-in functions to visualize points as clusters.</p>"},{"location":"examples/#change-a-layers-color-with-buttons","title":"Change a layer's color with buttons","text":"<p>Use setPaintProperty to change a layer's fill color.</p>"},{"location":"examples/#add-contour-lines","title":"Add Contour Lines","text":"<p>Add contour lines to your map from a raster-dem source.</p>"},{"location":"examples/#cooperative-gestures","title":"Cooperative gestures","text":"<p>Enable cooperative gestures with a specific language. See how it behaves in fullscreen mode.</p>"},{"location":"examples/#add-custom-icons-with-markers","title":"Add custom icons with Markers","text":"<p>Add custom marker icons to your map.</p>"},{"location":"examples/#add-a-custom-style-layer","title":"Add a custom style layer","text":"<p>Use a custom style layer to render custom WebGL content.</p>"},{"location":"examples/#style-lines-with-a-data-driven-property","title":"Style lines with a data-driven property","text":"<p>Create a visualization with a data expression for line-color.</p>"},{"location":"examples/#disable-map-rotation","title":"Disable map rotation","text":"<p>Prevent users from rotating a map.</p>"},{"location":"examples/#disable-scroll-zoom","title":"Disable scroll zoom","text":"<p>Prevent scroll from zooming a map.</p>"},{"location":"examples/#display-and-style-rich-text-labels","title":"Display and style rich text labels","text":"<p>Use the format expression to display country labels in both English and in the local language.</p>"},{"location":"examples/#create-a-draggable-marker","title":"Create a draggable Marker","text":"<p>Drag the marker to a new location on a map and populate its coordinates in a display.</p>"},{"location":"examples/#create-a-draggable-point","title":"Create a draggable point","text":"<p>Drag the point to a new location on a map and populate its coordinates in a display.</p>"},{"location":"examples/#use-a-fallback-image","title":"Use a fallback image","text":"<p>Use a coalesce expression to display another image when a requested image is not available.</p>"},{"location":"examples/#add-a-pattern-to-a-polygon","title":"Add a pattern to a polygon","text":"<p>Use fill-pattern to draw a polygon from a repeating image pattern.</p>"},{"location":"examples/#filter-symbols-by-text-input","title":"Filter symbols by text input","text":"<p>Filter symbols by icon name by typing in a text input.</p>"},{"location":"examples/#filter-symbols-by-toggling-a-list","title":"Filter symbols by toggling a list","text":"<p>Filter a set of symbols based on a property value in the data.</p>"},{"location":"examples/#fit-a-map-to-a-bounding-box","title":"Fit a map to a bounding box","text":"<p>Fit the map to a specific area, regardless of the pixel size of the map.</p>"},{"location":"examples/#slowly-fly-to-a-location","title":"Slowly fly to a location","text":"<p>Use flyTo with flyOptions to slowly zoom to a location.</p>"},{"location":"examples/#fly-to-a-location","title":"Fly to a location","text":"<p>Use flyTo to smoothly interpolate between locations.</p>"},{"location":"examples/#view-a-fullscreen-map","title":"View a fullscreen map","text":"<p>Toggle between current view and fullscreen mode. Does not work on iPhones because a pseudo-fullscreen is used, and the code is embedded in an iframe, which prevents the map from scaling.</p>"},{"location":"examples/#navigate-the-map-with-game-like-controls","title":"Navigate the map with game-like controls","text":"<p>Use the keyboard's arrow keys to move around the map with game-like controls.</p>"},{"location":"examples/#geocode-with-nominatim","title":"Geocode with Nominatim","text":"<p>Geocode with Nominatim and the maplibre-gl-geocoder plugin.</p>"},{"location":"examples/#add-a-new-layer-below-labels","title":"Add a new layer below labels","text":"<p>Use the second argument of addLayer to add a layer below labels.</p>"},{"location":"examples/#add-a-geojson-line","title":"Add a GeoJSON line","text":"<p>Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.</p>"},{"location":"examples/#draw-geojson-points","title":"Draw GeoJSON points","text":"<p>Draw points from a GeoJSON collection to a map.</p>"},{"location":"examples/#add-a-geojson-polygon","title":"Add a GeoJSON polygon","text":"<p>Style a polygon with the fill layer type.</p>"},{"location":"examples/#create-a-heatmap-layer","title":"Create a heatmap layer","text":"<p>Visualize earthquake frequency by location using a heatmap layer.</p>"},{"location":"examples/#create-a-hover-effect","title":"Create a hover effect","text":"<p>Use events and feature states to create a per feature hover effect.</p>"},{"location":"examples/#display-a-non-interactive-map","title":"Display a non-interactive map","text":"<p>Disable interactivity to create a static map.</p>"},{"location":"examples/#jump-to-a-series-of-locations","title":"Jump to a series of locations","text":"<p>Use the jumpTo function to showcase multiple locations.</p>"},{"location":"examples/#change-a-maps-language","title":"Change a map's language","text":"<p>Use setLayoutProperty to switch languages dynamically.</p>"},{"location":"examples/#display-line-that-crosses-180th-meridian","title":"Display line that crosses 180th meridian","text":"<p>Draw a line across the 180th meridian using a GeoJSON source.</p>"},{"location":"examples/#create-a-gradient-line-using-an-expression","title":"Create a gradient line using an expression","text":"<p>Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.</p>"},{"location":"examples/#add-live-realtime-data","title":"Add live realtime data","text":"<p>Use realtime GeoJSON data streams to move a symbol on your map.</p>"},{"location":"examples/#update-a-feature-in-realtime","title":"Update a feature in realtime","text":"<p>Change an existing feature on your map in real-time by updating its data.</p>"},{"location":"examples/#view-local-geojson-experimental","title":"View local GeoJSON (experimental)","text":"<p>View local GeoJSON with experimental File System Access API.</p>"},{"location":"examples/#view-local-geojson","title":"View local GeoJSON","text":"<p>View local GeoJSON without server upload.</p>"},{"location":"examples/#use-locally-generated-ideographs","title":"Use locally generated ideographs","text":"<p>Set localIdeographFontFamily to override the font used for displaying CJK (Chinese, Japanese and Korean) characters, ignoring the map style. This setting must be a CSS font rule specifying fallbacks of on-device fonts. Set localIdeographFontFamily to false to use server-provided fonts, which is much slower.</p>"},{"location":"examples/#locate-the-user","title":"Locate the user","text":"<p>Geolocate the user and then track their current location on the map using the GeolocateControl.</p>"},{"location":"examples/#add-a-raster-tile-source","title":"Add a raster tile source","text":"<p>Add a third-party raster source to the map.</p>"},{"location":"examples/#show-drawn-polygon-area","title":"Show drawn polygon area","text":"<p>Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.</p>"},{"location":"examples/#add-support-for-right-to-left-scripts","title":"Add support for right-to-left scripts","text":"<p>Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.</p>"},{"location":"examples/#measure-distances","title":"Measure distances","text":"<p>Click points on a map to create lines that measure distanced using turf.length.</p>"},{"location":"examples/#get-coordinates-of-the-mouse-pointer","title":"Get coordinates of the mouse pointer","text":"<p>Show mouse position on hover with pixel and latitude and longitude coordinates.</p>"},{"location":"examples/#add-multiple-geometries-from-one-geojson-source","title":"Add multiple geometries from one GeoJSON source","text":"<p>Add a polygon and circle layer from the same GeoJSON source.</p>"},{"location":"examples/#display-map-navigation-controls","title":"Display map navigation controls","text":"<p>Add zoom and rotation controls to the map.</p>"},{"location":"examples/#offset-the-vanishing-point-using-padding","title":"Offset the vanishing point using padding","text":"<p>Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.</p>"},{"location":"examples/#show-polygon-information-on-click","title":"Show polygon information on click","text":"<p>When a user clicks a polygon, show a popup containing more information.</p>"},{"location":"examples/#display-a-popup-on-click","title":"Display a popup on click","text":"<p>When a user clicks a symbol, show a popup containing more information.</p>"},{"location":"examples/#display-a-popup-on-hover","title":"Display a popup on hover","text":"<p>When a user hovers over a custom marker, show a popup containing more information.</p>"},{"location":"examples/#display-a-popup","title":"Display a popup","text":"<p>Add a popup to the map.</p>"},{"location":"examples/#get-features-under-the-mouse-pointer","title":"Get features under the mouse pointer","text":"<p>Use queryRenderedFeatures to show properties of hovered-over map elements.</p>"},{"location":"examples/#render-world-copies","title":"Render world copies","text":"<p>Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.</p>"},{"location":"examples/#restrict-map-panning-to-an-area","title":"Restrict map panning to an area","text":"<p>Prevent a map from being panned to a different place by setting maxBounds.</p>"},{"location":"examples/#display-a-satellite-map","title":"Display a satellite map","text":"<p>Display a satellite raster baselayer.</p>"},{"location":"examples/#fly-to-a-location-based-on-scroll-position","title":"Fly to a location based on scroll position","text":"<p>Scroll down through the story and the map will fly to the chapter's location.</p>"},{"location":"examples/#set-pitch-and-bearing","title":"Set pitch and bearing","text":"<p>Initialize a map with pitch and bearing camera options.</p>"},{"location":"examples/#attach-a-popup-to-a-marker-instance","title":"Attach a popup to a marker instance","text":"<p>Attach a popup to a marker and display it on click.</p>"},{"location":"examples/#display-a-map","title":"Display a map","text":"<p>Initialize a map in an HTML element with MapLibre GL JS.</p>"},{"location":"examples/#create-a-time-slider","title":"Create a time slider","text":"<p>Visualize earthquakes with a range slider.</p>"},{"location":"examples/#toggle-interactions","title":"Toggle interactions","text":"<p>Enable or disable UI handlers on a map.</p>"},{"location":"examples/#variable-label-placement","title":"Variable label placement","text":"<p>Use text-variable-anchor to allow high priority labels to shift position to stay on the map.</p>"},{"location":"examples/#variable-label-placement-with-offset","title":"Variable label placement with offset","text":"<p>Use text-variable-anchor-offset to allow high priority labels to shift position to stay on the map.</p>"},{"location":"examples/#add-a-vector-tile-source","title":"Add a vector tile source","text":"<p>Add a vector source to a map.</p>"},{"location":"examples/#add-a-video","title":"Add a video","text":"<p>Display a video on top of a satellite raster baselayer.</p>"},{"location":"examples/#visualize-population-density","title":"Visualize population density","text":"<p>Use a variable binding expression to calculate and display population density.</p>"},{"location":"examples/#add-a-wms-source","title":"Add a WMS source","text":"<p>Add an external Web Map Service raster layer to the map using addSource's tiles option.</p>"},{"location":"examples/#fit-to-the-bounds-of-a-linestring","title":"Fit to the bounds of a LineString","text":"<p>Get the bounds of a LineString.</p>"},{"location":"examples/3d-buildings/","title":"Display buildings in 3D","text":"<p>Use extrusions to display buildings' height in 3D.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Display buildings in 3D&lt;/title&gt;\n  &lt;meta property=\"og:description\" content=\"Use extrusions to display buildings' height in 3D.\" /&gt;\n  &lt;meta charset='utf-8'&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n  &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n  &lt;style&gt;\n      body { margin: 0; padding: 0; }\n      html, body, #map { height: 100%; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  const MAPTILER_KEY = 'get_your_own_OpIi9ZULNHzrESv6T2vL';\n  const map = new maplibregl.Map({\n      style: `https://api.maptiler.com/maps/basic-v2/style.json?key=${MAPTILER_KEY}`,\n      center: [-74.0066, 40.7135],\n      zoom: 15.5,\n      pitch: 45,\n      bearing: -17.6,\n      container: 'map',\n      antialias: true\n  });\n\n  // The 'building' layer in the streets vector source contains building-height\n  // data from OpenStreetMap.\n  map.on('load', () =&gt; {\n      // Insert the layer beneath any symbol layer.\n      const layers = map.getStyle().layers;\n\n      let labelLayerId;\n      for (let i = 0; i &lt; layers.length; i++) {\n          if (layers[i].type === 'symbol' &amp;&amp; layers[i].layout['text-field']) {\n              labelLayerId = layers[i].id;\n              break;\n          }\n      }\n\n      map.addSource('openmaptiles', {\n          url: `https://api.maptiler.com/tiles/v3/tiles.json?key=${MAPTILER_KEY}`,\n          type: 'vector',\n      });\n\n      map.addLayer(\n          {\n              'id': '3d-buildings',\n              'source': 'openmaptiles',\n              'source-layer': 'building',\n              'type': 'fill-extrusion',\n              'minzoom': 15,\n              'paint': {\n                  'fill-extrusion-color': [\n                      'interpolate',\n                      ['linear'],\n                      ['get', 'render_height'], 0, 'lightgray', 200, 'royalblue', 400, 'lightblue'\n                  ],\n                  'fill-extrusion-height': [\n                      'interpolate',\n                      ['linear'],\n                      ['zoom'],\n                      15,\n                      0,\n                      16,\n                      ['get', 'render_height']\n                  ],\n                  'fill-extrusion-base': ['case',\n                      ['&gt;=', ['get', 'zoom'], 16],\n                      ['get', 'render_min_height'], 0\n                  ]\n              }\n          },\n          labelLayerId\n      );\n  });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/3d-extrusion-floorplan/","title":"Extrude polygons for 3D indoor mapping","text":"<p>Create a 3D indoor map with the fill-extrude-height paint property.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Extrude polygons for 3D indoor mapping&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Create a 3D indoor map with the fill-extrude-height paint property.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: {\n            'id': 'raster',\n            'version': 8,\n            'name': 'Raster tiles',\n            'center': [0, 0],\n            'zoom': 0,\n            'sources': {\n                'raster-tiles': {\n                    'type': 'raster',\n                    'tiles': ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    'tileSize': 256,\n                    'minzoom': 0,\n                    'maxzoom': 19\n                }\n            },\n            'layers': [\n                {\n                    'id': 'background',\n                    'type': 'background',\n                    'paint': {\n                        'background-color': '#e0dfdf'\n                    }\n                },\n                {\n                    'id': 'simple-tiles',\n                    'type': 'raster',\n                    'source': 'raster-tiles'\n                }\n            ]\n        },\n        center: [-87.61694, 41.86625],\n        zoom: 15.99,\n        pitch: 40,\n        bearing: 20,\n        antialias: true\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('floorplan', {\n            // GeoJSON Data source used in vector tiles, documented at\n            // https://gist.github.com/ryanbaumann/a7d970386ce59d11c16278b90dde094d\n            'type': 'geojson',\n            'data': 'https://maplibre.org/maplibre-gl-js/docs/assets/indoor-3d-map.geojson'\n        });\n        map.addLayer({\n            'id': 'room-extrusion',\n            'type': 'fill-extrusion',\n            'source': 'floorplan',\n            'paint': {\n                // See the MapLibre Style Specification for details on data expressions.\n                // https://maplibre.org/maplibre-style-spec/expressions/\n\n                // Get the fill-extrusion-color from the source 'color' property.\n                'fill-extrusion-color': ['get', 'color'],\n\n                // Get fill-extrusion-height from the source 'height' property.\n                'fill-extrusion-height': ['get', 'height'],\n\n                // Get fill-extrusion-base from the source 'base_height' property.\n                'fill-extrusion-base': ['get', 'base_height'],\n\n                // Make extrusions slightly opaque for see through indoor walls.\n                'fill-extrusion-opacity': 0.5\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/3d-terrain/","title":"3D Terrain","text":"<p>Go beyond hillshade and show elevation in actual 3D.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;3D Terrain&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Go beyond hillshade and show elevation in actual 3D.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 12,\n        center: [11.39085, 47.27574],\n        pitch: 52,\n        hash: true,\n        style: {\n            version: 8,\n            sources: {\n                osm: {\n                    type: 'raster',\n                    tiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    tileSize: 256,\n                    attribution: '&amp;copy; OpenStreetMap Contributors',\n                    maxzoom: 19\n                },\n                // Use a different source for terrain and hillshade layers, to improve render quality\n                terrainSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                },\n                hillshadeSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                }\n            },\n            layers: [\n                {\n                    id: 'osm',\n                    type: 'raster',\n                    source: 'osm'\n                },\n                {\n                    id: 'hills',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    layout: {visibility: 'visible'},\n                    paint: {'hillshade-shadow-color': '#473B24'}\n                }\n            ],\n            terrain: {\n                source: 'terrainSource',\n                exaggeration: 1\n            }\n        },\n        maxZoom: 18,\n        maxPitch: 85\n    }));\n\n    map.addControl(\n        new maplibregl.NavigationControl({\n            visualizePitch: true,\n            showZoom: true,\n            showCompass: true\n        })\n    );\n\n    map.addControl(\n        new maplibregl.TerrainControl({\n            source: 'terrainSource',\n            exaggeration: 1\n        })\n    );\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-3d-model-babylon/","title":"Add a 3D model with babylon.js","text":"<p>Use a custom style layer with babylon.js to add a 3D model to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a 3D model with babylon.js&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom style layer with babylon.js to add a 3D model to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"https://unpkg.com/babylonjs@5.42.2/babylon.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/babylonjs-loaders@5.42.2/babylonjs.loaders.min.js\"&gt;&lt;/script&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const BABYLON = window.BABYLON;\n\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        zoom: 18,\n        center: [148.9819, -35.3981],\n        pitch: 60,\n        antialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased\n    }));\n\n    // World matrix parameters\n    const worldOrigin = [148.9819, -35.39847];\n    const worldAltitude = 0;\n\n    // Maplibre.js default coordinate system (no rotations)\n    // +x east, -y north, +z up\n    //var worldRotate = [0, 0, 0];\n\n    // Babylon.js default coordinate system\n    // +x east, +y up, +z north\n    const worldRotate = [Math.PI / 2, 0, 0];\n\n    // Calculate mercator coordinates and scale\n    const worldOriginMercator = maplibregl.MercatorCoordinate.fromLngLat(\n        worldOrigin,\n        worldAltitude\n    );\n    const worldScale = worldOriginMercator.meterInMercatorCoordinateUnits();\n\n    // Calculate world matrix\n    const worldMatrix = BABYLON.Matrix.Compose(\n        new BABYLON.Vector3(worldScale, worldScale, worldScale),\n        BABYLON.Quaternion.FromEulerAngles(\n            worldRotate[0],\n            worldRotate[1],\n            worldRotate[2]\n        ),\n        new BABYLON.Vector3(\n            worldOriginMercator.x,\n            worldOriginMercator.y,\n            worldOriginMercator.z\n        )\n    );\n\n    // configuration of the custom layer for a 3D model per the CustomLayerInterface\n    const customLayer = {\n        id: '3d-model',\n        type: 'custom',\n        renderingMode: '3d',\n        onAdd (map, gl) {\n            this.engine = new BABYLON.Engine(\n                gl,\n                true,\n                {\n                    useHighPrecisionMatrix: true // Important to prevent jitter at mercator scale\n                },\n                true\n            );\n            this.scene = new BABYLON.Scene(this.engine);\n            this.scene.autoClear = false;\n            this.scene.detachControl();\n\n            this.scene.beforeRender = () =&gt; {\n                this.engine.wipeCaches(true);\n            };\n\n            // create simple camera (will have its project matrix manually calculated)\n            this.camera = new BABYLON.Camera(\n                'Camera',\n                new BABYLON.Vector3(0, 0, 0),\n                this.scene\n            );\n\n            // create simple light\n            const light = new BABYLON.HemisphericLight(\n                'light1',\n                new BABYLON.Vector3(0, 0, 100),\n                this.scene\n            );\n            light.intensity = 0.7;\n\n            // Add debug axes viewer, positioned at origin, 10 meter axis lengths\n            new BABYLON.AxesViewer(this.scene, 10);\n\n            // load GLTF model in to the scene\n            BABYLON.SceneLoader.LoadAssetContainerAsync(\n                'https://maplibre.org/maplibre-gl-js/docs/assets/34M_17/34M_17.gltf',\n                '',\n                this.scene\n            ).then((modelContainer) =&gt; {\n                modelContainer.addAllToScene();\n\n                const rootMesh = modelContainer.createRootMesh();\n\n                // If using maplibre.js coordinate system (+z up)\n                //rootMesh.rotation.x = Math.PI/2\n\n                // Create a second mesh\n                const rootMesh2 = rootMesh.clone();\n\n                // Position in babylon.js coordinate system\n                rootMesh2.position.x = 25; // +east, meters\n                rootMesh2.position.z = 25; // +north, meters\n            });\n\n            this.map = map;\n        },\n        render (gl, matrix) {\n            const cameraMatrix = BABYLON.Matrix.FromArray(matrix);\n\n            // world-view-projection matrix\n            const wvpMatrix = worldMatrix.multiply(cameraMatrix);\n\n            this.camera.freezeProjectionMatrix(wvpMatrix);\n\n            this.scene.render(false);\n            this.map.triggerRepaint();\n        }\n    };\n\n    map.on('style.load', () =&gt; {\n        map.addLayer(customLayer);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-3d-model/","title":"Add a 3D model with three.js","text":"<p>Use a custom style layer with three.js to add a 3D model to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a 3D model with three.js&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom style layer with three.js to add a 3D model to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"https://unpkg.com/three@0.147.0/build/three.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/three@0.147.0/examples/js/loaders/GLTFLoader.js\"&gt;&lt;/script&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        zoom: 18,\n        center: [148.9819, -35.3981],\n        pitch: 60,\n        antialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased\n    }));\n\n    // parameters to ensure the model is georeferenced correctly on the map\n    const modelOrigin = [148.9819, -35.39847];\n    const modelAltitude = 0;\n    const modelRotate = [Math.PI / 2, 0, 0];\n\n    const modelAsMercatorCoordinate = maplibregl.MercatorCoordinate.fromLngLat(\n        modelOrigin,\n        modelAltitude\n    );\n\n    // transformation parameters to position, rotate and scale the 3D model onto the map\n    const modelTransform = {\n        translateX: modelAsMercatorCoordinate.x,\n        translateY: modelAsMercatorCoordinate.y,\n        translateZ: modelAsMercatorCoordinate.z,\n        rotateX: modelRotate[0],\n        rotateY: modelRotate[1],\n        rotateZ: modelRotate[2],\n        /* Since our 3D model is in real world meters, a scale transform needs to be\n        * applied since the CustomLayerInterface expects units in MercatorCoordinates.\n        */\n        scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\n    };\n\n    const THREE = window.THREE;\n\n    // configuration of the custom layer for a 3D model per the CustomLayerInterface\n    const customLayer = {\n        id: '3d-model',\n        type: 'custom',\n        renderingMode: '3d',\n        onAdd (map, gl) {\n            this.camera = new THREE.Camera();\n            this.scene = new THREE.Scene();\n\n            // create two three.js lights to illuminate the model\n            const directionalLight = new THREE.DirectionalLight(0xffffff);\n            directionalLight.position.set(0, -70, 100).normalize();\n            this.scene.add(directionalLight);\n\n            const directionalLight2 = new THREE.DirectionalLight(0xffffff);\n            directionalLight2.position.set(0, 70, 100).normalize();\n            this.scene.add(directionalLight2);\n\n            // use the three.js GLTF loader to add the 3D model to the three.js scene\n            const loader = new THREE.GLTFLoader();\n            loader.load(\n                'https://maplibre.org/maplibre-gl-js/docs/assets/34M_17/34M_17.gltf',\n                (gltf) =&gt; {\n                    this.scene.add(gltf.scene);\n                }\n            );\n            this.map = map;\n\n            // use the MapLibre GL JS map canvas for three.js\n            this.renderer = new THREE.WebGLRenderer({\n                canvas: map.getCanvas(),\n                context: gl,\n                antialias: true\n            });\n\n            this.renderer.autoClear = false;\n        },\n        render (gl, matrix) {\n            const rotationX = new THREE.Matrix4().makeRotationAxis(\n                new THREE.Vector3(1, 0, 0),\n                modelTransform.rotateX\n            );\n            const rotationY = new THREE.Matrix4().makeRotationAxis(\n                new THREE.Vector3(0, 1, 0),\n                modelTransform.rotateY\n            );\n            const rotationZ = new THREE.Matrix4().makeRotationAxis(\n                new THREE.Vector3(0, 0, 1),\n                modelTransform.rotateZ\n            );\n\n            const m = new THREE.Matrix4().fromArray(matrix);\n            const l = new THREE.Matrix4()\n                .makeTranslation(\n                    modelTransform.translateX,\n                    modelTransform.translateY,\n                    modelTransform.translateZ\n                )\n                .scale(\n                    new THREE.Vector3(\n                        modelTransform.scale,\n                        -modelTransform.scale,\n                        modelTransform.scale\n                    )\n                )\n                .multiply(rotationX)\n                .multiply(rotationY)\n                .multiply(rotationZ);\n\n            this.camera.projectionMatrix = m.multiply(l);\n            this.renderer.resetState();\n            this.renderer.render(this.scene, this.camera);\n            this.map.triggerRepaint();\n        }\n    };\n\n    map.on('style.load', () =&gt; {\n        map.addLayer(customLayer);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-marker/","title":"Add a default marker","text":"<p>Add a default marker to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a default marker&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a default marker to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [12.550343, 55.665957],\n        zoom: 8\n    });\n\n    const marker = new maplibregl.Marker()\n        .setLngLat([12.550343, 55.665957])\n        .addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image-animated/","title":"Add an animated icon to the map","text":"<p>Add an animated icon to the map that was generated at runtime with the Canvas API.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add an animated icon to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an animated icon to the map that was generated at runtime with the Canvas API.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n    });\n\n    const size = 200;\n\n    // implementation of StyleImageInterface to draw a pulsing dot icon on the map\n    // Search for StyleImageInterface in https://maplibre.org/maplibre-gl-js/docs/API/\n    const pulsingDot = {\n        width: size,\n        height: size,\n        data: new Uint8Array(size * size * 4),\n\n        // get rendering context for the map canvas when layer is added to the map\n        onAdd () {\n            const canvas = document.createElement('canvas');\n            canvas.width = this.width;\n            canvas.height = this.height;\n            this.context = canvas.getContext('2d');\n        },\n\n        // called once before every frame where the icon will be used\n        render () {\n            const duration = 1000;\n            const t = (performance.now() % duration) / duration;\n\n            const radius = (size / 2) * 0.3;\n            const outerRadius = (size / 2) * 0.7 * t + radius;\n            const context = this.context;\n\n            // draw outer circle\n            context.clearRect(0, 0, this.width, this.height);\n            context.beginPath();\n            context.arc(\n                this.width / 2,\n                this.height / 2,\n                outerRadius,\n                0,\n                Math.PI * 2\n            );\n            context.fillStyle = `rgba(255, 200, 200,${1 - t})`;\n            context.fill();\n\n            // draw inner circle\n            context.beginPath();\n            context.arc(\n                this.width / 2,\n                this.height / 2,\n                radius,\n                0,\n                Math.PI * 2\n            );\n            context.fillStyle = 'rgba(255, 100, 100, 1)';\n            context.strokeStyle = 'white';\n            context.lineWidth = 2 + 4 * (1 - t);\n            context.fill();\n            context.stroke();\n\n            // update this image's data with data from the canvas\n            this.data = context.getImageData(\n                0,\n                0,\n                this.width,\n                this.height\n            ).data;\n\n            // continuously repaint the map, resulting in the smooth animation of the dot\n            map.triggerRepaint();\n\n            // return `true` to let the map know that the image was updated\n            return true;\n        }\n    };\n\n    map.on('load', () =&gt; {\n        map.addImage('pulsing-dot', pulsingDot, {pixelRatio: 2});\n\n        map.addSource('points', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, 0]\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'points',\n            'layout': {\n                'icon-image': 'pulsing-dot'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image-generated/","title":"Add a generated icon to the map","text":"<p>Add an icon to the map that was generated at runtime.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a generated icon to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an icon to the map that was generated at runtime.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n    });\n\n    map.on('load', () =&gt; {\n        const width = 64; // The image will be 64 pixels square\n        const bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.\n        const data = new Uint8Array(width * width * bytesPerPixel);\n\n        for (let x = 0; x &lt; width; x++) {\n            for (let y = 0; y &lt; width; y++) {\n                const offset = (y * width + x) * bytesPerPixel;\n                data[offset + 0] = (y / width) * 255; // red\n                data[offset + 1] = (x / width) * 255; // green\n                data[offset + 2] = 128; // blue\n                data[offset + 3] = 255; // alpha\n            }\n        }\n\n        map.addImage('gradient', {width, height: width, data});\n\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, 0]\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'point',\n            'layout': {\n                'icon-image': 'gradient'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image-missing-generated/","title":"Generate and add a missing icon to the map","text":"<p>Dynamically generate a missing icon at runtime and add it to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Generate and add a missing icon to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Dynamically generate a missing icon at runtime and add it to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n    });\n\n    map.on('styleimagemissing', (e) =&gt; {\n        const id = e.id; // id of the missing image\n\n        // check if this missing icon is one this function can generate\n        const prefix = 'square-rgb-';\n        if (id.indexOf(prefix) !== 0) return;\n\n        // extract the color from the id\n        const rgb = id.replace(prefix, '').split(',').map(Number);\n\n        const width = 64; // The image will be 64 pixels square\n        const bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.\n        const data = new Uint8Array(width * width * bytesPerPixel);\n\n        for (let x = 0; x &lt; width; x++) {\n            for (let y = 0; y &lt; width; y++) {\n                const offset = (y * width + x) * bytesPerPixel;\n                data[offset + 0] = rgb[0]; // red\n                data[offset + 1] = rgb[1]; // green\n                data[offset + 2] = rgb[2]; // blue\n                data[offset + 3] = 255; // alpha\n            }\n        }\n\n        map.addImage(id, {width, height: width, data});\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('points', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, 0]\n                        },\n                        'properties': {\n                            'color': '255,0,0'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [50, 0]\n                        },\n                        'properties': {\n                            'color': '255,209,28'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-50, 0]\n                        },\n                        'properties': {\n                            'color': '242,127,32'\n                        }\n                    }\n                ]\n            }\n        });\n\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'points',\n            'layout': {\n                'icon-image': ['concat', 'square-rgb-', ['get', 'color']]\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image-stretchable/","title":"Add a stretchable image to the map","text":"<p>Use a stretchable image as a background for text.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a stretchable image to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a stretchable image as a background for text.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        zoom: 0.1\n    });\n\n    const images = {\n        'popup': 'https://maplibre.org/maplibre-gl-js/docs/assets/popup.png',\n        'popup-debug':\n            'https://maplibre.org/maplibre-gl-js/docs/assets/popup_debug.png'\n    };\n\n    loadImages(images, (loadedImages) =&gt; {\n        map.on('load', () =&gt; {\n            map.addImage('popup-debug', loadedImages['popup-debug'], {\n                // The two (blue) columns of pixels that can be stretched horizontally:\n                //   - the pixels between x: 25 and x: 55 can be stretched\n                //   - the pixels between x: 85 and x: 115 can be stretched.\n                stretchX: [\n                    [25, 55],\n                    [85, 115]\n                ],\n                // The one (red) row of pixels that can be stretched vertically:\n                //   - the pixels between y: 25 and y: 100 can be stretched\n                stretchY: [[25, 100]],\n                // This part of the image that can contain text ([x1, y1, x2, y2]):\n                content: [25, 25, 115, 100],\n                // This is a high-dpi image:\n                pixelRatio: 2\n            });\n            map.addImage('popup', loadedImages['popup'], {\n                stretchX: [\n                    [25, 55],\n                    [85, 115]\n                ],\n                stretchY: [[25, 100]],\n                content: [25, 25, 115, 100],\n                pixelRatio: 2\n            });\n\n            map.addSource('points', {\n                'type': 'geojson',\n                'data': {\n                    'type': 'FeatureCollection',\n                    'features': [\n                        {\n                            'type': 'Feature',\n                            'geometry': {\n                                'type': 'Point',\n                                'coordinates': [40, -30]\n                            },\n                            'properties': {\n                                'image-name': 'popup-debug',\n                                'name': 'Line 1\\nLine 2\\nLine 3'\n                            }\n                        },\n                        {\n                            'type': 'Feature',\n                            'geometry': {\n                                'type': 'Point',\n                                'coordinates': [40, 30]\n                            },\n                            'properties': {\n                                'image-name': 'popup',\n                                'name': 'Line 1\\nLine 2\\nLine 3'\n                            }\n                        },\n                        {\n                            'type': 'Feature',\n                            'geometry': {\n                                'type': 'Point',\n                                'coordinates': [-40, -30]\n                            },\n                            'properties': {\n                                'image-name': 'popup-debug',\n                                'name': 'One longer line'\n                            }\n                        },\n                        {\n                            'type': 'Feature',\n                            'geometry': {\n                                'type': 'Point',\n                                'coordinates': [-40, 30]\n                            },\n                            'properties': {\n                                'image-name': 'popup',\n                                'name': 'One longer line'\n                            }\n                        }\n                    ]\n                }\n            });\n            map.addLayer({\n                'id': 'points',\n                'type': 'symbol',\n                'source': 'points',\n                'layout': {\n                    'text-field': ['get', 'name'],\n                    'icon-text-fit': 'both',\n                    'icon-image': ['get', 'image-name'],\n                    'icon-overlap': 'always',\n                    'text-overlap': 'always'\n                }\n            });\n\n            // the original, unstretched image for comparison\n            map.addSource('original', {\n                'type': 'geojson',\n                'data': {\n                    'type': 'FeatureCollection',\n                    'features': [\n                        {\n                            'type': 'Feature',\n                            'geometry': {\n                                'type': 'Point',\n                                'coordinates': [0, -70]\n                            }\n                        }\n                    ]\n                }\n            });\n            map.addLayer({\n                'id': 'original',\n                'type': 'symbol',\n                'source': 'original',\n                'layout': {\n                    'text-field': 'unstretched image',\n                    'icon-image': 'popup-debug',\n                    'icon-overlap': 'always',\n                    'text-overlap': 'always'\n                }\n            });\n        });\n    });\n\n    function loadImages(urls, callback) {\n        const results = {};\n        for (const name in urls) {\n            map.loadImage(urls[name], makeCallback(name));\n        }\n\n        function makeCallback(name) {\n            return function (err, image) {\n                results[name] = err ? null : image;\n\n                // if all images are loaded, call the callback\n                if (Object.keys(results).length === Object.keys(urls).length) {\n                    callback(results);\n                }\n            };\n        }\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-image/","title":"Add an icon to the map","text":"<p>Add an icon to the map from an external URL and use it in a symbol layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add an icon to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an icon to the map from an external URL and use it in a symbol layer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n    });\n\n    map.on('load', () =&gt; {\n        map.loadImage(\n            'https://upload.wikimedia.org/wikipedia/commons/7/7c/201408_cat.png',\n            (error, image) =&gt; {\n                if (error) throw error;\n                map.addImage('cat', image);\n                map.addSource('point', {\n                    'type': 'geojson',\n                    'data': {\n                        'type': 'FeatureCollection',\n                        'features': [\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [0, 0]\n                                }\n                            }\n                        ]\n                    }\n                });\n                map.addLayer({\n                    'id': 'points',\n                    'type': 'symbol',\n                    'source': 'point',\n                    'layout': {\n                        'icon-image': 'cat',\n                        'icon-size': 0.25\n                    }\n                });\n            }\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-a-line/","title":"Animate a line","text":"<p>Animate a line by updating a GeoJSON source on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a line&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate a line by updating a GeoJSON source on each frame.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    button {\n        position: absolute;\n        margin: 20px;\n    }\n\n    #pause::after {\n        content: 'Pause';\n    }\n\n    #pause.pause::after {\n        content: 'Play';\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"pause\"&gt;&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [0, 0],\n        zoom: 0.5\n    });\n\n    // Create a GeoJSON source with an empty lineString.\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': [[0, 0]]\n                }\n            }\n        ]\n    };\n\n    const speedFactor = 30; // number of frames per longitude degree\n    let animation; // to store and cancel the animation\n    let startTime = 0;\n    let progress = 0; // progress = timestamp - startTime\n    let resetTime = false; // indicator of whether time reset is needed for the animation\n    const pauseButton = document.getElementById('pause');\n\n    map.on('load', () =&gt; {\n        map.addSource('line', {\n            'type': 'geojson',\n            'data': geojson\n        });\n\n        // add the line which will be modified in the animation\n        map.addLayer({\n            'id': 'line-animation',\n            'type': 'line',\n            'source': 'line',\n            'layout': {\n                'line-cap': 'round',\n                'line-join': 'round'\n            },\n            'paint': {\n                'line-color': '#ed6498',\n                'line-width': 5,\n                'line-opacity': 0.8\n            }\n        });\n\n        startTime = performance.now();\n\n        animateLine();\n\n        // click the button to pause or play\n        pauseButton.addEventListener('click', () =&gt; {\n            pauseButton.classList.toggle('pause');\n            if (pauseButton.classList.contains('pause')) {\n                cancelAnimationFrame(animation);\n            } else {\n                resetTime = true;\n                animateLine();\n            }\n        });\n\n        // reset startTime and progress once the tab loses or gains focus\n        // requestAnimationFrame also pauses on hidden tabs by default\n        document.addEventListener('visibilitychange', () =&gt; {\n            resetTime = true;\n        });\n\n        // animated in a circle as a sine wave along the map.\n        function animateLine(timestamp) {\n            if (resetTime) {\n                // resume previous progress\n                startTime = performance.now() - progress;\n                resetTime = false;\n            } else {\n                progress = timestamp - startTime;\n            }\n\n            // restart if it finishes a loop\n            if (progress &gt; speedFactor * 360) {\n                startTime = timestamp;\n                geojson.features[0].geometry.coordinates = [];\n            } else {\n                const x = progress / speedFactor;\n                // draw a sine wave with some math.\n                const y = Math.sin((x * Math.PI) / 90) * 40;\n                // append new coordinates to the lineString\n                geojson.features[0].geometry.coordinates.push([x, y]);\n                // then update the map\n                map.getSource('line').setData(geojson);\n            }\n            // Request the next frame of the animation.\n            animation = requestAnimationFrame(animateLine);\n        }\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-camera-around-point/","title":"Animate map camera around a point","text":"<p>Animate the map camera around a point.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate map camera around a point&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate the map camera around a point.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-87.62712, 41.89033],\n        zoom: 15.5,\n        pitch: 45\n    });\n\n    function rotateCamera(timestamp) {\n        // clamp the rotation between 0 -360 degrees\n        // Divide timestamp by 100 to slow rotation to ~10 degrees / sec\n        map.rotateTo((timestamp / 100) % 360, {duration: 0});\n        // Request the next frame of the animation.\n        requestAnimationFrame(rotateCamera);\n    }\n\n    map.on('load', () =&gt; {\n        // Start the animation.\n        rotateCamera(0);\n\n        // Add 3d buildings and remove label layers to enhance the map\n        const layers = map.getStyle().layers;\n        for (let i = 0; i &lt; layers.length; i++) {\n            if (layers[i].type === 'symbol' &amp;&amp; layers[i].layout['text-field']) {\n                // remove text labels\n                map.removeLayer(layers[i].id);\n            }\n        }\n\n        map.addLayer({\n            'id': '3d-buildings',\n            'source': 'composite',\n            'source-layer': 'building',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': 15,\n            'paint': {\n                'fill-extrusion-color': '#aaa',\n\n                // use an 'interpolate' expression to add a smooth transition effect to the\n                // buildings as the user zooms in\n                'fill-extrusion-height': [\n                    'interpolate',\n                    ['linear'],\n                    ['zoom'],\n                    15,\n                    0,\n                    15.05,\n                    ['get', 'height']\n                ],\n                'fill-extrusion-base': [\n                    'interpolate',\n                    ['linear'],\n                    ['zoom'],\n                    15,\n                    0,\n                    15.05,\n                    ['get', 'min_height']\n                ],\n                'fill-extrusion-opacity': 0.6\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-images/","title":"Animate a series of images","text":"<p>Use a series of image sources to create an animation.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a series of images&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a series of image sources to create an animation.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        maxZoom: 5.99,\n        minZoom: 4,\n        zoom: 5,\n        center: [-75.789, 41.874]\n    });\n\n    const frameCount = 5;\n    let currentImage = 0;\n\n    function getPath() {\n        return (\n            `https://maplibre.org/maplibre-gl-js/docs/assets/radar${\n                currentImage\n            }.gif`\n        );\n    }\n\n    map.on('load', () =&gt; {\n        map.addSource('radar', {\n            type: 'image',\n            url: getPath(),\n            coordinates: [\n                [-80.425, 46.437],\n                [-71.516, 46.437],\n                [-71.516, 37.936],\n                [-80.425, 37.936]\n            ]\n        });\n        map.addLayer({\n            id: 'radar-layer',\n            'type': 'raster',\n            'source': 'radar',\n            'paint': {\n                'raster-fade-duration': 0\n            }\n        });\n\n        setInterval(() =&gt; {\n            currentImage = (currentImage + 1) % frameCount;\n            map.getSource('radar').updateImage({url: getPath()});\n        }, 200);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-marker/","title":"Animate a marker","text":"<p>Animate the position of a marker by updating its location on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a marker&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate the position of a marker by updating its location on each frame.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [0, 0],\n        zoom: 2\n    });\n\n    const marker = new maplibregl.Marker();\n\n    function animateMarker(timestamp) {\n        const radius = 20;\n\n        // Update the data to a new position based on the animation timestamp. The\n        // divisor in the expression `timestamp / 1000` controls the animation speed.\n        marker.setLngLat([\n            Math.cos(timestamp / 1000) * radius,\n            Math.sin(timestamp / 1000) * radius\n        ]);\n\n        // Ensure it's added to the map. This is safe to call if it's already added.\n        marker.addTo(map);\n\n        // Request the next frame of the animation.\n        requestAnimationFrame(animateMarker);\n    }\n\n    // Start the animation.\n    requestAnimationFrame(animateMarker);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-point-along-line/","title":"Animate a point","text":"<p>Animate the position of a point by updating a GeoJSON source on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a point&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate the position of a point by updating a GeoJSON source on each frame.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [0, 0],\n        zoom: 2\n    });\n\n    const radius = 20;\n\n    function pointOnCircle(angle) {\n        return {\n            'type': 'Point',\n            'coordinates': [Math.cos(angle) * radius, Math.sin(angle) * radius]\n        };\n    }\n\n    map.on('load', () =&gt; {\n        // Add a source and layer displaying a point which will be animated in a circle.\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': pointOnCircle(0)\n        });\n\n        map.addLayer({\n            'id': 'point',\n            'source': 'point',\n            'type': 'circle',\n            'paint': {\n                'circle-radius': 10,\n                'circle-color': '#007cbf'\n            }\n        });\n\n        function animateMarker(timestamp) {\n            // Update the data to a new position based on the animation timestamp. The\n            // divisor in the expression `timestamp / 1000` controls the animation speed.\n            map.getSource('point').setData(pointOnCircle(timestamp / 1000));\n\n            // Request the next frame of the animation.\n            requestAnimationFrame(animateMarker);\n        }\n\n        // Start the animation.\n        animateMarker(0);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-point-along-route/","title":"Animate a point along a route","text":"<p>Use Turf to smoothly animate a point along the distance of a line.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a point along a route&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use Turf to smoothly animate a point along the distance of a line.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .overlay {\n        position: absolute;\n        top: 10px;\n        left: 10px;\n    }\n\n    .overlay button {\n        font: 600 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        background-color: #3386c0;\n        color: #fff;\n        display: inline-block;\n        margin: 0;\n        padding: 10px 20px;\n        border: none;\n        cursor: pointer;\n        border-radius: 3px;\n    }\n\n    .overlay button:hover {\n        background-color: #4ea0da;\n    }\n&lt;/style&gt;\n&lt;script\n    src=\"https://www.unpkg.com/turf@2.0.0/turf.min.js\"\n    charset=\"utf-8\"\n&gt;&lt;/script&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"overlay\"&gt;\n    &lt;button id=\"replay\"&gt;Replay&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-96, 37.8],\n        zoom: 3\n    });\n\n    // San Francisco\n    const origin = [-122.414, 37.776];\n\n    // Washington DC\n    const destination = [-77.032, 38.913];\n\n    // A simple line from origin to destination.\n    const route = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': [origin, destination]\n                }\n            }\n        ]\n    };\n\n    // A single point that animates along the route.\n    // Coordinates are initially set to origin.\n    const point = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': origin\n                }\n            }\n        ]\n    };\n\n    // Calculate the distance in kilometers between route start/end point.\n    const lineDistance = turf.lineDistance(route.features[0], 'kilometers');\n\n    const arc = [];\n\n    // Number of steps to use in the arc and animation, more steps means\n    // a smoother arc and animation, but too many steps will result in a\n    // low frame rate\n    const steps = 500;\n\n    // Draw an arc between the `origin` &amp; `destination` of the two points\n    for (let i = 0; i &lt; lineDistance; i += lineDistance / steps) {\n        const segment = turf.along(route.features[0], i, 'kilometers');\n        arc.push(segment.geometry.coordinates);\n    }\n\n    // Update the route with calculated arc coordinates\n    route.features[0].geometry.coordinates = arc;\n\n    // Used to increment the value of the point measurement against the route.\n    let counter = 0;\n\n    map.on('load', () =&gt; {\n        // Add a source and layer displaying a point which will be animated in a circle.\n        map.addSource('route', {\n            'type': 'geojson',\n            'data': route\n        });\n\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': point\n        });\n\n        map.addLayer({\n            'id': 'route',\n            'source': 'route',\n            'type': 'line',\n            'paint': {\n                'line-width': 2,\n                'line-color': '#007cbf'\n            }\n        });\n\n        map.addLayer({\n            'id': 'point',\n            'source': 'point',\n            'type': 'symbol',\n            'layout': {\n                'icon-image': 'airport_15',\n                'icon-rotate': ['get', 'bearing'],\n                'icon-rotation-alignment': 'map',\n                'icon-overlap': 'always',\n                'icon-ignore-placement': true\n            }\n        });\n\n        function animate() {\n            // Update point geometry to a new position based on counter denoting\n            // the index to access the arc.\n            point.features[0].geometry.coordinates =\n                route.features[0].geometry.coordinates[counter];\n\n            // Calculate the bearing to ensure the icon is rotated to match the route arc\n            // The bearing is calculate between the current point and the next point, except\n            // at the end of the arc use the previous point and the current point\n            point.features[0].properties.bearing = turf.bearing(\n                turf.point(\n                    route.features[0].geometry.coordinates[\n                        counter &gt;= steps ? counter - 1 : counter\n                    ]\n                ),\n                turf.point(\n                    route.features[0].geometry.coordinates[\n                        counter &gt;= steps ? counter : counter + 1\n                    ]\n                )\n            );\n\n            // Update the source with this new data.\n            map.getSource('point').setData(point);\n\n            // Request the next frame of animation so long the end has not been reached.\n            if (counter &lt; steps) {\n                requestAnimationFrame(animate);\n            }\n\n            counter = counter + 1;\n        }\n\n        document\n            .getElementById('replay')\n            .addEventListener('click', () =&gt; {\n                // Set the coordinates of the original point back to origin\n                point.features[0].geometry.coordinates = origin;\n\n                // Update the source layer\n                map.getSource('point').setData(point);\n\n                // Reset the counter\n                counter = 0;\n\n                // Restart the animation.\n                animate(counter);\n            });\n\n        // Start the animation.\n        animate(counter);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/attribution-position/","title":"Change the default position for attribution","text":"<p>Place attribution in the top-left position when initializing a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change the default position for attribution&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Place attribution in the top-left position when initializing a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.04, 38.907],\n        zoom: 11.15,\n        attributionControl: false\n    });\n    map.addControl(new maplibregl.AttributionControl(), 'top-left');\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/camera-animation/","title":"Customize camera animations","text":"<p>Customize camera animations using AnimationOptions.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Customize camera animations&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Customize camera animations using AnimationOptions.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .map-overlay {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        position: absolute;\n        width: 200px;\n        top: 0;\n        left: 0;\n        padding: 10px;\n    }\n\n    .map-overlay .map-overlay-inner {\n        background-color: #fff;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n        border-radius: 3px;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n\n    .map-overlay-inner fieldset {\n        border: none;\n        padding: 0;\n        margin: 0 0 10px;\n    }\n\n    .map-overlay-inner fieldset:last-child {\n        margin: 0;\n    }\n\n    .map-overlay-inner select {\n        width: 100%;\n    }\n\n    .map-overlay-inner p {\n        margin: 0;\n    }\n\n    .map-overlay-inner label {\n        display: block;\n        font-weight: bold;\n    }\n\n    .map-overlay-inner button {\n        background-color: cornflowerblue;\n        color: white;\n        border-radius: 5px;\n        display: inline-block;\n        height: 20px;\n        border: none;\n        cursor: pointer;\n    }\n\n    .map-overlay-inner button:focus {\n        outline: none;\n    }\n\n    .map-overlay-inner button:hover {\n        background-color: blue;\n        box-shadow: inset 0 0 0 3px rgba(0, 0, 0, 0.1);\n        -webkit-transition: background-color 500ms linear;\n        -ms-transition: background-color 500ms linear;\n        transition: background-color 500ms linear;\n    }\n\n    .offset &gt; label,\n    .offset &gt; input {\n        display: inline;\n    }\n\n    #animateLabel {\n        display: inline-block;\n        min-width: 20px;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"map-overlay top\"&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;fieldset&gt;\n            &lt;label&gt;Select easing function&lt;/label&gt;\n            &lt;select id=\"easing\" name=\"easing\"&gt;\n                &lt;option value=\"easeInCubic\"&gt;Ease In Cubic&lt;/option&gt;\n                &lt;option value=\"easeOutQuint\"&gt;Ease Out Quint&lt;/option&gt;\n                &lt;option value=\"easeInOutCirc\"&gt;Ease In/Out Circ&lt;/option&gt;\n                &lt;option value=\"easeOutBounce\"&gt;Ease Out Bounce&lt;/option&gt;\n            &lt;/select&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset&gt;\n            &lt;label for=\"duration\"&gt;Set animation duration&lt;/label&gt;\n            &lt;p id=\"durationValue\"&gt;&lt;/p&gt;\n            &lt;input\n                type=\"range\"\n                id=\"duration\"\n                name=\"duration\"\n                min=\"0\"\n                max=\"10000\"\n                step=\"500\"\n                value=\"1000\"\n            /&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset&gt;\n            &lt;label&gt;Animate camera motion&lt;/label&gt;\n            &lt;label for=\"animate\" id=\"animateLabel\"&gt;Yes&lt;/label&gt;\n            &lt;input type=\"checkbox\" id=\"animate\" name=\"animate\" checked /&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset class=\"offset\"&gt;\n            &lt;label for=\"offset-x\"&gt;Offset-X&lt;/label&gt;\n            &lt;input\n                type=\"number\"\n                id=\"offset-x\"\n                name=\"offset-x\"\n                min=\"-200\"\n                max=\"200\"\n                step=\"50\"\n                value=\"0\"\n            /&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset class=\"offset\"&gt;\n            &lt;label for=\"offset-y\"&gt;Offset-Y&lt;/label&gt;\n            &lt;input\n                type=\"number\"\n                id=\"offset-y\"\n                name=\"offset-y\"\n                min=\"-200\"\n                max=\"200\"\n                step=\"50\"\n                value=\"0\"\n            /&gt;\n            &lt;p&gt;Offsets can be negative&lt;/p&gt;\n        &lt;/fieldset&gt;\n        &lt;button type=\"button\" id=\"animateButton\" name=\"test-animation\"&gt;\n            Test Animation\n        &lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    // declare various easing functions.\n    // easing functions mathematically describe\n    // how fast a value changes during an animation.\n    // each function takes a parameter t that represents\n    // the progress of the animation.\n    // t is in a range of 0 to 1 where 0 is the initial\n    // state and 1 is the completed state.\n    const easingFunctions = {\n    // start slow and gradually increase speed\n        easeInCubic (t) {\n            return t * t * t;\n        },\n        // start fast with a long, slow wind-down\n        easeOutQuint (t) {\n            return 1 - Math.pow(1 - t, 5);\n        },\n        // slow start and finish with fast middle\n        easeInOutCirc (t) {\n            return t &lt; 0.5 ?\n                (1 - Math.sqrt(1 - Math.pow(2 * t, 2))) / 2 :\n                (Math.sqrt(1 - Math.pow(-2 * t + 2, 2)) + 1) / 2;\n        },\n        // fast start with a \"bounce\" at the end\n        easeOutBounce (t) {\n            const n1 = 7.5625;\n            const d1 = 2.75;\n\n            if (t &lt; 1 / d1) {\n                return n1 * t * t;\n            } else if (t &lt; 2 / d1) {\n                return n1 * (t -= 1.5 / d1) * t + 0.75;\n            } else if (t &lt; 2.5 / d1) {\n                return n1 * (t -= 2.25 / d1) * t + 0.9375;\n            } else {\n                return n1 * (t -= 2.625 / d1) * t + 0.984375;\n            }\n        }\n    };\n\n    // set up some helpful UX on the form\n    const durationValueSpan = document.getElementById('durationValue');\n    const durationInput = document.getElementById('duration');\n    durationValueSpan.innerHTML = `${durationInput.value / 1000} seconds`;\n    durationInput.addEventListener('change', (e) =&gt; {\n        durationValueSpan.innerHTML = `${e.target.value / 1000} seconds`;\n    });\n\n    const animateLabel = document.getElementById('animateLabel');\n    const animateValue = document.getElementById('animate');\n    animateValue.addEventListener('change', (e) =&gt; {\n        animateLabel.innerHTML = e.target.checked ? 'Yes' : 'No';\n    });\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-95, 40],\n        zoom: 3\n    });\n\n    map.on('load', () =&gt; {\n        // add a layer to display the map's center point\n        map.addSource('center', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Point',\n                'coordinates': [-94, 40]\n            }\n        });\n        map.addLayer({\n            'id': 'center',\n            'type': 'symbol',\n            'source': 'center',\n            'layout': {\n                'icon-image': 'marker_15',\n                'text-field': 'Center: [-94, 40]',\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-offset': [0, 0.6],\n                'text-anchor': 'top'\n            }\n        });\n\n        const animateButton = document.getElementById('animateButton');\n        animateButton.addEventListener('click', () =&gt; {\n            const easingInput = document.getElementById('easing');\n            const easingFn =\n            easingFunctions[\n                easingInput.options[easingInput.selectedIndex].value\n            ];\n            const duration = parseInt(durationInput.value, 10);\n            const animate = animateValue.checked;\n            const offsetX = parseInt(\n                document.getElementById('offset-x').value,\n                10\n            );\n            const offsetY = parseInt(\n                document.getElementById('offset-y').value,\n                10\n            );\n\n            const animationOptions = {\n                duration,\n                easing: easingFn,\n                offset: [offsetX, offsetY],\n                animate,\n                essential: true // animation will happen even if user has `prefers-reduced-motion` setting on\n            };\n\n            // Create a random location to fly to by offsetting the map's\n            // initial center point by up to 10 degrees.\n            const center = [\n                -95 + (Math.random() - 0.5) * 20,\n                40 + (Math.random() - 0.5) * 20\n            ];\n\n            // merge animationOptions with other flyTo options\n            animationOptions.center = center;\n\n            map.flyTo(animationOptions);\n            // update 'center' source and layer to show our new map center\n            // compare this center point to where the camera ends up when an offset is applied\n            map.getSource('center').setData({\n                'type': 'Point',\n                'coordinates': center\n            });\n            map.setLayoutProperty(\n                'center',\n                'text-field',\n                `Center: [${\n                    center[0].toFixed(1)\n                }, ${\n                    center[1].toFixed(1)\n                }]`\n            );\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/canvas-source/","title":"Add a canvas source","text":"<p>Add a canvas source to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a canvas source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a canvas source to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;canvas id=\"canvasID\" width=\"400\" height=\"400\"&gt;Canvas not supported&lt;/canvas&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    //Animation from https://javascript.tutorials24x7.com/blog/how-to-draw-animated-circles-in-html5-canvas\n    const canvas = document.getElementById('canvasID');\n    const ctx = canvas.getContext('2d');\n    canvas.style.display = 'none';\n    const circles = [];\n    const radius = 20;\n\n    function Circle(x, y, dx, dy, radius, color) {\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n\n        this.radius = radius;\n\n        this.draw = function () {\n            ctx.beginPath();\n            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n            ctx.strokeStyle = color;\n            ctx.stroke();\n        };\n\n        this.update = function () {\n            if (this.x + this.radius &gt; 400 || this.x - this.radius &lt; 0) {\n                this.dx = -this.dx;\n            }\n\n            if (this.y + this.radius &gt; 400 || this.y - this.radius &lt; 0) {\n                this.dy = -this.dy;\n            }\n\n            this.x += this.dx;\n            this.y += this.dy;\n\n            this.draw();\n        };\n    }\n\n    for (let i = 0; i &lt; 5; i++) {\n        const color = `#${(0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6)}`;\n        const x = Math.random() * (400 - radius * 2) + radius;\n        const y = Math.random() * (400 - radius * 2) + radius;\n\n        const dx = (Math.random() - 0.5) * 2;\n        const dy = (Math.random() - 0.5) * 2;\n\n        circles.push(new Circle(x, y, dx, dy, radius, color));\n    }\n\n    function animate() {\n        requestAnimationFrame(animate);\n        ctx.clearRect(0, 0, 400, 400);\n\n        for (let r = 0; r &lt; 5; r++) {\n            circles[r].update();\n        }\n    }\n\n    animate();\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 5,\n        minZoom: 4,\n        center: [95.899147, 18.088694],\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('canvas-source', {\n            type: 'canvas',\n            canvas: 'canvasID',\n            coordinates: [\n                [91.4461, 21.5006],\n                [100.3541, 21.5006],\n                [100.3541, 13.9706],\n                [91.4461, 13.9706]\n            ],\n            // Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\n            animate: true\n        });\n\n        map.addLayer({\n            id: 'canvas-layer',\n            type: 'raster',\n            source: 'canvas-source'\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/center-on-symbol/","title":"Center the map on a clicked symbol","text":"<p>Use events and flyTo to center the map on a symbol.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Center the map on a clicked symbol&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use events and flyTo to center the map on a symbol.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-90.96, -0.47],\n        zoom: 7.5\n    });\n\n    map.on('load', () =&gt; {\n        // Add an image to use as a custom marker\n        map.loadImage(\n            'https://maplibre.org/maplibre-gl-js/docs/assets/custom_marker.png',\n            (error, image) =&gt; {\n                if (error) throw error;\n                map.addImage('custom-marker', image);\n                // Add a GeoJSON source with 3 points.\n                map.addSource('points', {\n                    'type': 'geojson',\n                    'data': {\n                        'type': 'FeatureCollection',\n                        'features': [\n                            {\n                                'type': 'Feature',\n                                'properties': {},\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [\n                                        -91.395263671875,\n                                        -0.9145729757782163\n                                    ]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {},\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [\n                                        -90.32958984375,\n                                        -0.6344474832838974\n                                    ]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {},\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [\n                                        -91.34033203125,\n                                        0.01647949196029245\n                                    ]\n                                }\n                            }\n                        ]\n                    }\n                });\n\n                // Add a symbol layer\n                map.addLayer({\n                    'id': 'symbols',\n                    'type': 'symbol',\n                    'source': 'points',\n                    'layout': {\n                        'icon-image': 'custom-marker'\n                    }\n                });\n            }\n        );\n\n        // Center the map on the coordinates of any clicked symbol from the 'symbols' layer.\n        map.on('click', 'symbols', (e) =&gt; {\n            map.flyTo({\n                center: e.features[0].geometry.coordinates\n            });\n        });\n\n        // Change the cursor to a pointer when the it enters a feature in the 'symbols' layer.\n        map.on('mouseenter', 'symbols', () =&gt; {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n\n        // Change it back to a pointer when it leaves.\n        map.on('mouseleave', 'symbols', () =&gt; {\n            map.getCanvas().style.cursor = '';\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-building-color-based-on-zoom-level/","title":"Change building color based on zoom level","text":"<p>Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change building color based on zoom level&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #zoom {\n        display: block;\n        position: relative;\n        margin: 20px auto;\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"zoom\"&gt;Zoom to buildings&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-90.73414, 14.55524],\n        zoom: 13\n    });\n\n    map.on('load', () =&gt; {\n        map.setPaintProperty('building', 'fill-color', [\n            'interpolate',\n            ['exponential', 0.5],\n            ['zoom'],\n            15,\n            '#e2714b',\n            22,\n            '#eee695'\n        ]);\n\n        map.setPaintProperty('building', 'fill-opacity', [\n            'interpolate',\n            ['exponential', 0.5],\n            ['zoom'],\n            15,\n            0,\n            22,\n            1\n        ]);\n    });\n\n    document.getElementById('zoom').addEventListener('click', () =&gt; {\n        map.zoomTo(19, {duration: 9000});\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-case-of-labels/","title":"Change the case of labels","text":"<p>Use the upcase and downcase expressions to change the case of labels.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change the case of labels&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the upcase and downcase expressions to change the case of labels.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // stylesheet location\n        center: [-116.231, 43.604], // starting position [lng, lat]\n        zoom: 11 // starting zoom\n    });\n\n    map.on('load', () =&gt; {\n        // data from opendata.cityofboise.org/\n        map.addSource('off-leash-areas', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/boise.geojson'\n        });\n        map.addLayer({\n            'id': 'off-leash-areas',\n            'type': 'symbol',\n            'source': 'off-leash-areas',\n            'layout': {\n                'icon-image': 'dog-park-11',\n                'text-field': [\n                    'format',\n                    ['upcase', ['get', 'FacilityName']],\n                    {'font-scale': 0.8},\n                    '\\n',\n                    {},\n                    ['downcase', ['get', 'Comments']],\n                    {'font-scale': 0.6}\n                ],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-offset': [0, 0.6],\n                'text-anchor': 'top'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/check-for-support/","title":"Check if MapLibre GL JS is supported","text":"<p>Check for MapLibre GL browser support.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Check if MapLibre GL JS is supported&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Check for MapLibre GL browser support.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    function isWebglSupported() {\n        if (window.WebGLRenderingContext) {\n            const canvas = document.createElement('canvas');\n            try {\n                // Note that { failIfMajorPerformanceCaveat: true } can be passed as a second argument\n                // to canvas.getContext(), causing the check to fail if hardware rendering is not available. See\n                // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n                // for more details.\n                const context = canvas.getContext('webgl2') || canvas.getContext('webgl');\n                if (context &amp;&amp; typeof context.getParameter == 'function') {\n                    return true;\n                }\n            } catch (e) {\n                // WebGL is supported, but disabled\n            }\n            return false;\n        }\n        // WebGL not supported\n        return false;\n    }\n    if (!isWebglSupported()) {\n        alert('Your browser does not support MapLibre GL');\n    } else {\n        const map = new maplibregl.Map({\n            container: 'map',\n            style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n            center: [-74.5, 40],\n            zoom: 9\n        });\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/cluster-html/","title":"Display HTML clusters with custom properties","text":"<p>Extend clustering with HTML markers and custom property expressions. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display HTML clusters with custom properties&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Extend clustering with HTML markers and custom property expressions. \" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 0.3,\n        center: [0, 20],\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n    });\n\n    map.addControl(new maplibregl.NavigationControl());\n\n    // filters for classifying earthquakes into five categories based on magnitude\n    const mag1 = ['&lt;', ['get', 'mag'], 2];\n    const mag2 = ['all', ['&gt;=', ['get', 'mag'], 2], ['&lt;', ['get', 'mag'], 3]];\n    const mag3 = ['all', ['&gt;=', ['get', 'mag'], 3], ['&lt;', ['get', 'mag'], 4]];\n    const mag4 = ['all', ['&gt;=', ['get', 'mag'], 4], ['&lt;', ['get', 'mag'], 5]];\n    const mag5 = ['&gt;=', ['get', 'mag'], 5];\n\n    // colors to use for the categories\n    const colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c'];\n\n    map.on('load', () =&gt; {\n        // add a clustered GeoJSON source for a sample set of earthquakes\n        map.addSource('earthquakes', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson',\n            'cluster': true,\n            'clusterRadius': 80,\n            'clusterProperties': {\n                // keep separate counts for each magnitude category in a cluster\n                'mag1': ['+', ['case', mag1, 1, 0]],\n                'mag2': ['+', ['case', mag2, 1, 0]],\n                'mag3': ['+', ['case', mag3, 1, 0]],\n                'mag4': ['+', ['case', mag4, 1, 0]],\n                'mag5': ['+', ['case', mag5, 1, 0]]\n            }\n        });\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\n        map.addLayer({\n            'id': 'earthquake_circle',\n            'type': 'circle',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'paint': {\n                'circle-color': [\n                    'case',\n                    mag1,\n                    colors[0],\n                    mag2,\n                    colors[1],\n                    mag3,\n                    colors[2],\n                    mag4,\n                    colors[3],\n                    colors[4]\n                ],\n                'circle-opacity': 0.6,\n                'circle-radius': 12\n            }\n        });\n        map.addLayer({\n            'id': 'earthquake_label',\n            'type': 'symbol',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'layout': {\n                'text-field': [\n                    'number-format',\n                    ['get', 'mag'],\n                    {'min-fraction-digits': 1, 'max-fraction-digits': 1}\n                ],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-size': 10\n            },\n            'paint': {\n                'text-color': [\n                    'case',\n                    ['&lt;', ['get', 'mag'], 3],\n                    'black',\n                    'white'\n                ]\n            }\n        });\n\n        // objects for caching and keeping track of HTML marker objects (for performance)\n        const markers = {};\n        let markersOnScreen = {};\n\n        function updateMarkers() {\n            const newMarkers = {};\n            const features = map.querySourceFeatures('earthquakes');\n\n            // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\n            // and add it to the map if it's not there already\n            for (let i = 0; i &lt; features.length; i++) {\n                const coords = features[i].geometry.coordinates;\n                const props = features[i].properties;\n                if (!props.cluster) continue;\n                const id = props.cluster_id;\n\n                let marker = markers[id];\n                if (!marker) {\n                    const el = createDonutChart(props);\n                    marker = markers[id] = new maplibregl.Marker({\n                        element: el\n                    }).setLngLat(coords);\n                }\n                newMarkers[id] = marker;\n\n                if (!markersOnScreen[id]) marker.addTo(map);\n            }\n            // for every marker we've added previously, remove those that are no longer visible\n            for (id in markersOnScreen) {\n                if (!newMarkers[id]) markersOnScreen[id].remove();\n            }\n            markersOnScreen = newMarkers;\n        }\n\n        // after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend\n        map.on('data', (e) =&gt; {\n            if (e.sourceId !== 'earthquakes' || !e.isSourceLoaded) return;\n\n            map.on('move', updateMarkers);\n            map.on('moveend', updateMarkers);\n            updateMarkers();\n        });\n    });\n\n    // code for creating an SVG donut chart from feature properties\n    function createDonutChart(props) {\n        const offsets = [];\n        const counts = [\n            props.mag1,\n            props.mag2,\n            props.mag3,\n            props.mag4,\n            props.mag5\n        ];\n        let total = 0;\n        for (let i = 0; i &lt; counts.length; i++) {\n            offsets.push(total);\n            total += counts[i];\n        }\n        const fontSize =\n        total &gt;= 1000 ? 22 : total &gt;= 100 ? 20 : total &gt;= 10 ? 18 : 16;\n        const r = total &gt;= 1000 ? 50 : total &gt;= 100 ? 32 : total &gt;= 10 ? 24 : 18;\n        const r0 = Math.round(r * 0.6);\n        const w = r * 2;\n\n        let html =\n            `&lt;div&gt;&lt;svg width=\"${\n                w\n            }\" height=\"${\n                w\n            }\" viewbox=\"0 0 ${\n                w\n            } ${\n                w\n            }\" text-anchor=\"middle\" style=\"font: ${\n                fontSize\n            }px sans-serif; display: block\"&gt;`;\n\n        for (i = 0; i &lt; counts.length; i++) {\n            html += donutSegment(\n                offsets[i] / total,\n                (offsets[i] + counts[i]) / total,\n                r,\n                r0,\n                colors[i]\n            );\n        }\n        html +=\n            `&lt;circle cx=\"${\n                r\n            }\" cy=\"${\n                r\n            }\" r=\"${\n                r0\n            }\" fill=\"white\" /&gt;&lt;text dominant-baseline=\"central\" transform=\"translate(${\n                r\n            }, ${\n                r\n            })\"&gt;${\n                total.toLocaleString()\n            }&lt;/text&gt;&lt;/svg&gt;&lt;/div&gt;`;\n\n        const el = document.createElement('div');\n        el.innerHTML = html;\n        return el.firstChild;\n    }\n\n    function donutSegment(start, end, r, r0, color) {\n        if (end - start === 1) end -= 0.00001;\n        const a0 = 2 * Math.PI * (start - 0.25);\n        const a1 = 2 * Math.PI * (end - 0.25);\n        const x0 = Math.cos(a0),\n            y0 = Math.sin(a0);\n        const x1 = Math.cos(a1),\n            y1 = Math.sin(a1);\n        const largeArc = end - start &gt; 0.5 ? 1 : 0;\n\n        return [\n            '&lt;path d=\"M',\n            r + r0 * x0,\n            r + r0 * y0,\n            'L',\n            r + r * x0,\n            r + r * y0,\n            'A',\n            r,\n            r,\n            0,\n            largeArc,\n            1,\n            r + r * x1,\n            r + r * y1,\n            'L',\n            r + r0 * x1,\n            r + r0 * y1,\n            'A',\n            r0,\n            r0,\n            0,\n            largeArc,\n            0,\n            r + r0 * x0,\n            r + r0 * y0,\n            `\" fill=\"${color}\" /&gt;`\n        ].join(' ');\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/cluster/","title":"Create and style clusters","text":"<p>Use MapLibre GL JS' built-in functions to visualize points as clusters.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create and style clusters&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use MapLibre GL JS' built-in functions to visualize points as clusters.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-103.59179687498357, 40.66995747013945],\n        zoom: 3\n    });\n\n    map.on('load', () =&gt; {\n        // Add a new source from our GeoJSON data and\n        // set the 'cluster' option to true. GL-JS will\n        // add the point_count property to your source data.\n        map.addSource('earthquakes', {\n            type: 'geojson',\n            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n            data: 'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson',\n            cluster: true,\n            clusterMaxZoom: 14, // Max zoom to cluster points on\n            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({\n            id: 'clusters',\n            type: 'circle',\n            source: 'earthquakes',\n            filter: ['has', 'point_count'],\n            paint: {\n                // Use step expressions (https://maplibre.org/maplibre-style-spec/#expressions-step)\n                // with three steps to implement three types of circles:\n                //   * Blue, 20px circles when point count is less than 100\n                //   * Yellow, 30px circles when point count is between 100 and 750\n                //   * Pink, 40px circles when point count is greater than or equal to 750\n                'circle-color': [\n                    'step',\n                    ['get', 'point_count'],\n                    '#51bbd6',\n                    100,\n                    '#f1f075',\n                    750,\n                    '#f28cb1'\n                ],\n                'circle-radius': [\n                    'step',\n                    ['get', 'point_count'],\n                    20,\n                    100,\n                    30,\n                    750,\n                    40\n                ]\n            }\n        });\n\n        map.addLayer({\n            id: 'cluster-count',\n            type: 'symbol',\n            source: 'earthquakes',\n            filter: ['has', 'point_count'],\n            layout: {\n                'text-field': '{point_count_abbreviated}',\n                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                'text-size': 12\n            }\n        });\n\n        map.addLayer({\n            id: 'unclustered-point',\n            type: 'circle',\n            source: 'earthquakes',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n                'circle-color': '#11b4da',\n                'circle-radius': 4,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#fff'\n            }\n        });\n\n        // inspect a cluster on click\n        map.on('click', 'clusters', (e) =&gt; {\n            const features = map.queryRenderedFeatures(e.point, {\n                layers: ['clusters']\n            });\n            const clusterId = features[0].properties.cluster_id;\n            map.getSource('earthquakes').getClusterExpansionZoom(\n                clusterId,\n                (err, zoom) =&gt; {\n                    if (err) return;\n\n                    map.easeTo({\n                        center: features[0].geometry.coordinates,\n                        zoom\n                    });\n                }\n            );\n        });\n\n        // When a click event occurs on a feature in\n        // the unclustered-point layer, open a popup at\n        // the location of the feature, with\n        // description HTML from its properties.\n        map.on('click', 'unclustered-point', (e) =&gt; {\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            const mag = e.features[0].properties.mag;\n            let tsunami;\n\n            if (e.features[0].properties.tsunami === 1) {\n                tsunami = 'yes';\n            } else {\n                tsunami = 'no';\n            }\n\n            // Ensure that if the map is zoomed out such that\n            // multiple copies of the feature are visible, the\n            // popup appears over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\n                coordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n            }\n\n            new maplibregl.Popup()\n                .setLngLat(coordinates)\n                .setHTML(\n                    `magnitude: ${mag}&lt;br&gt;Was there a tsunami?: ${tsunami}`\n                )\n                .addTo(map);\n        });\n\n        map.on('mouseenter', 'clusters', () =&gt; {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'clusters', () =&gt; {\n            map.getCanvas().style.cursor = '';\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/color-switcher/","title":"Change a layer's color with buttons","text":"<p>Use setPaintProperty to change a layer's fill color.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change a layer's color with buttons&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use setPaintProperty to change a layer's fill color.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .map-overlay {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        position: absolute;\n        width: 200px;\n        top: 0;\n        left: 0;\n        padding: 10px;\n    }\n\n    .map-overlay .map-overlay-inner {\n        background-color: #fff;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n        border-radius: 3px;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n\n    .map-overlay-inner fieldset {\n        border: none;\n        padding: 0;\n        margin: 0 0 10px;\n    }\n\n    .map-overlay-inner fieldset:last-child {\n        margin: 0;\n    }\n\n    .map-overlay-inner select {\n        width: 100%;\n    }\n\n    .map-overlay-inner label {\n        display: block;\n        font-weight: bold;\n        margin: 0 0 5px;\n    }\n\n    .map-overlay-inner button {\n        display: inline-block;\n        width: 36px;\n        height: 20px;\n        border: none;\n        cursor: pointer;\n    }\n\n    .map-overlay-inner button:focus {\n        outline: none;\n    }\n\n    .map-overlay-inner button:hover {\n        box-shadow: inset 0 0 0 3px rgba(0, 0, 0, 0.1);\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"map-overlay top\"&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;fieldset&gt;\n            &lt;label&gt;Select layer&lt;/label&gt;\n            &lt;select id=\"layer\" name=\"layer\"&gt;\n                &lt;option value=\"water\"&gt;Water&lt;/option&gt;\n                &lt;option value=\"building-3d\"&gt;Buildings&lt;/option&gt;\n            &lt;/select&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset&gt;\n            &lt;label&gt;Choose a color&lt;/label&gt;\n            &lt;div id=\"swatches\"&gt;&lt;/div&gt;\n        &lt;/fieldset&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [12.338, 45.4385],\n        zoom: 17.4\n    });\n\n    const swatches = document.getElementById('swatches');\n    const layer = document.getElementById('layer');\n    const colors = [\n        '#ffffcc',\n        '#a1dab4',\n        '#41b6c4',\n        '#2c7fb8',\n        '#253494',\n        '#fed976',\n        '#feb24c',\n        '#fd8d3c',\n        '#f03b20',\n        '#bd0026'\n    ];\n\n    colors.forEach((color) =&gt; {\n        const swatch = document.createElement('button');\n        swatch.style.backgroundColor = color;\n        swatch.addEventListener('click', () =&gt; {\n            map.setPaintProperty(\n                layer.value,\n                layer.value === 'water' ? 'fill-color' : 'fill-extrusion-color',\n                color\n            );\n        });\n        swatches.appendChild(swatch);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/contour-lines/","title":"Add Contour Lines","text":"<p>Add contour lines to your map from a raster-dem source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add Contour Lines&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add contour lines to your map from a raster-dem source.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script src=\"https://unpkg.com/maplibre-contour@0.0.4/dist/index.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    const demSource = new mlcontour.DemSource({\n        url: 'https://demotiles.maplibre.org/terrain-tiles/{z}/{x}/{y}.png',\n        encoding: 'mapbox',\n        maxzoom: 12,\n        // offload contour line computation to a web worker\n        worker: true\n    });\n\n    // calls maplibregl.addProtocol to register a dynamic vector tile provider that\n    // downloads raster-dem tiles, computes contour lines, and encodes as a vector\n    // tile for each tile request from maplibre\n    demSource.setupMaplibre(maplibregl);\n\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 13,\n        center: [11.3229, 47.2738],\n        hash: true,\n        style: {\n            version: 8,\n            glyphs: 'https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf',\n            sources: {\n                hillshadeSource: {\n                    type: 'raster-dem',\n                    // share cached raster-dem tiles with the contour source\n                    tiles: [demSource.sharedDemProtocolUrl],\n                    tileSize: 512,\n                    maxzoom: 12\n                },\n                contourSourceFeet: {\n                    type: 'vector',\n                    tiles: [\n                        demSource.contourProtocolUrl({\n                        // meters to feet\n                            multiplier: 3.28084,\n                            overzoom: 1,\n                            thresholds: {\n                            // zoom: [minor, major]\n                                11: [200, 1000],\n                                12: [100, 500],\n                                13: [100, 500],\n                                14: [50, 200],\n                                15: [20, 100]\n                            },\n                            elevationKey: 'ele',\n                            levelKey: 'level',\n                            contourLayer: 'contours'\n                        })\n                    ],\n                    maxzoom: 15\n                }\n            },\n            layers: [\n                {\n                    id: 'hills',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    layout: {visibility: 'visible'},\n                    paint: {'hillshade-exaggeration': 0.25}\n                },\n                {\n                    id: 'contours',\n                    type: 'line',\n                    source: 'contourSourceFeet',\n                    'source-layer': 'contours',\n                    paint: {\n                        'line-opacity': 0.5,\n                        // \"major\" contours have level=1, \"minor\" have level=0\n                        'line-width': ['match', ['get', 'level'], 1, 1, 0.5]\n                    }\n                },\n                {\n                    id: 'contour-text',\n                    type: 'symbol',\n                    source: 'contourSourceFeet',\n                    'source-layer': 'contours',\n                    filter: ['&gt;', ['get', 'level'], 0],\n                    paint: {\n                        'text-halo-color': 'white',\n                        'text-halo-width': 1\n                    },\n                    layout: {\n                        'symbol-placement': 'line',\n                        'text-size': 10,\n                        'text-field': [\n                            'concat',\n                            ['number-format', ['get', 'ele'], {}],\n                            '\\''\n                        ],\n                        'text-font': ['Noto Sans Bold']\n                    }\n                }\n            ]\n        }\n    }));\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/cooperative-gestures/","title":"Cooperative gestures","text":"<p>Enable cooperative gestures with a specific language. See how it behaves in fullscreen mode.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Cooperative gestures&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Enable cooperative gestures with a specific language. See how it behaves in fullscreen mode.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-74.5, 40],\n        cooperativeGestures: {\n            windowsHelpText: 'Utilice Ctrl + desplazamiento para hacer zoom en el mapa.',\n            macHelpText: 'Use \u2318 + desplazamiento para hacer zoom en el mapa.',\n            mobileHelpText: 'Usa dos dedos para mover el mapa.',\n        },\n        zoom: 4\n    });\n    map.addControl(new maplibregl.FullscreenControl());\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/custom-marker-icons/","title":"Add custom icons with Markers","text":"<p>Add custom marker icons to your map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add custom icons with Markers&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add custom marker icons to your map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .marker {\n        display: block;\n        border: none;\n        border-radius: 50%;\n        cursor: pointer;\n        padding: 0;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'message': 'Foo',\n                    'iconSize': [60, 60]\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-66.324462890625, -16.024695711685304]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'message': 'Bar',\n                    'iconSize': [50, 50]\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-61.2158203125, -15.97189158092897]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'message': 'Baz',\n                    'iconSize': [40, 40]\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-63.29223632812499, -18.28151823530889]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-65.017, -16.457],\n        zoom: 5\n    });\n\n    // add markers to map\n    geojson.features.forEach((marker) =&gt; {\n        // create a DOM element for the marker\n        const el = document.createElement('div');\n        el.className = 'marker';\n        el.style.backgroundImage =\n            `url(https://placekitten.com/g/${\n                marker.properties.iconSize.join('/')\n            }/)`;\n        el.style.width = `${marker.properties.iconSize[0]}px`;\n        el.style.height = `${marker.properties.iconSize[1]}px`;\n\n        el.addEventListener('click', () =&gt; {\n            window.alert(marker.properties.message);\n        });\n\n        // add marker to map\n        new maplibregl.Marker({element: el})\n            .setLngLat(marker.geometry.coordinates)\n            .addTo(map);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/custom-style-layer/","title":"Add a custom style layer","text":"<p>Use a custom style layer to render custom WebGL content.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a custom style layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom style layer to render custom WebGL content.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 3,\n        center: [7.5, 58],\n        style: 'https://demotiles.maplibre.org/style.json',\n        antialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased\n    });\n\n    // create a custom style layer to implement the WebGL content\n    const highlightLayer = {\n        id: 'highlight',\n        type: 'custom',\n\n        // method called when the layer is added to the map\n        // Search for StyleImageInterface in https://maplibre.org/maplibre-gl-js/docs/API/\n        onAdd (map, gl) {\n        // create GLSL source for vertex shader\n            const vertexSource = `#version 300 es\n\n            uniform mat4 u_matrix;\n            in vec2 a_pos;\n            void main() {\n                gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n            }`;\n\n            // create GLSL source for fragment shader\n            const fragmentSource = `#version 300 es\n\n            out highp vec4 fragColor;\n            void main() {\n                fragColor = vec4(1.0, 0.0, 0.0, 0.5);\n            }`;\n\n            // create a vertex shader\n            const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n            gl.shaderSource(vertexShader, vertexSource);\n            gl.compileShader(vertexShader);\n\n            // create a fragment shader\n            const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n            gl.shaderSource(fragmentShader, fragmentSource);\n            gl.compileShader(fragmentShader);\n\n            // link the two shaders into a WebGL program\n            this.program = gl.createProgram();\n            gl.attachShader(this.program, vertexShader);\n            gl.attachShader(this.program, fragmentShader);\n            gl.linkProgram(this.program);\n\n            this.aPos = gl.getAttribLocation(this.program, 'a_pos');\n\n            // define vertices of the triangle to be rendered in the custom style layer\n            const helsinki = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 25.004,\n                lat: 60.239\n            });\n            const berlin = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 13.403,\n                lat: 52.562\n            });\n            const kyiv = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 30.498,\n                lat: 50.541\n            });\n\n            // create and initialize a WebGLBuffer to store vertex and color data\n            this.buffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n            gl.bufferData(\n                gl.ARRAY_BUFFER,\n                new Float32Array([\n                    helsinki.x,\n                    helsinki.y,\n                    berlin.x,\n                    berlin.y,\n                    kyiv.x,\n                    kyiv.y\n                ]),\n                gl.STATIC_DRAW\n            );\n        },\n\n        // method fired on each animation frame\n        render (gl, matrix) {\n            gl.useProgram(this.program);\n            gl.uniformMatrix4fv(\n                gl.getUniformLocation(this.program, 'u_matrix'),\n                false,\n                matrix\n            );\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n            gl.enableVertexAttribArray(this.aPos);\n            gl.vertexAttribPointer(this.aPos, 2, gl.FLOAT, false, 0, 0);\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 3);\n        }\n    };\n\n    // add the custom style layer to the map\n    map.on('load', () =&gt; {\n        map.addLayer(highlightLayer, 'crimea-fill');\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/data-driven-lines/","title":"Style lines with a data-driven property","text":"<p>Create a visualization with a data expression for line-color.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Style lines with a data-driven property&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Create a visualization with a data expression for line-color.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-122.48383155304096, 37.82882682974591],\n        zoom: 16\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('lines', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'color': '#F7455D' // red\n                        },\n                        'geometry': {\n                            'type': 'LineString',\n                            'coordinates': [\n                                [-122.4833858013153, 37.829607404976734],\n                                [-122.4830961227417, 37.82932776098012],\n                                [-122.4830746650696, 37.82932776098012],\n                                [-122.48218417167662, 37.82889558180985],\n                                [-122.48218417167662, 37.82890193740421],\n                                [-122.48221099376678, 37.82868372835086],\n                                [-122.4822163581848, 37.82868372835086],\n                                [-122.48205006122589, 37.82801003030873]\n                            ]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'color': '#33C9EB' // blue\n                        },\n                        'geometry': {\n                            'type': 'LineString',\n                            'coordinates': [\n                                [-122.48393028974533, 37.829471820141016],\n                                [-122.48395174741744, 37.82940826466351],\n                                [-122.48395174741744, 37.829412501697064],\n                                [-122.48423874378203, 37.829357420242125],\n                                [-122.48422533273697, 37.829361657278575],\n                                [-122.48459815979002, 37.8293425906126],\n                                [-122.48458743095398, 37.8293447091313],\n                                [-122.4847564101219, 37.82932776098012],\n                                [-122.48474299907684, 37.829331998018276],\n                                [-122.4849334359169, 37.829298101706186],\n                                [-122.48492807149889, 37.82930022022615],\n                                [-122.48509705066681, 37.82920488676767],\n                                [-122.48509168624878, 37.82920912381288],\n                                [-122.48520433902739, 37.82905870855876],\n                                [-122.48519897460936, 37.82905870855876],\n                                [-122.4854403734207, 37.828594749716714],\n                                [-122.48543500900269, 37.82860534241688],\n                                [-122.48571664094925, 37.82808206121068],\n                                [-122.48570591211319, 37.82809689109353],\n                                [-122.4858346581459, 37.82797189627337],\n                                [-122.48582661151886, 37.82797825194729],\n                                [-122.4859634041786, 37.82788503534145],\n                                [-122.48595803976059, 37.82788927246246],\n                                [-122.48605459928514, 37.82786596829394]\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'lines',\n            'type': 'line',\n            'source': 'lines',\n            'paint': {\n                'line-width': 3,\n                // Use a get expression (https://maplibre.org/maplibre-style-spec/expressions/#get)\n                // to set the line-color to a feature property value.\n                'line-color': ['get', 'color']\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/disable-rotation/","title":"Disable map rotation","text":"<p>Prevent users from rotating a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Disable map rotation&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Prevent users from rotating a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', //stylesheet location\n        center: [-122.65, 45.52], // starting position\n        zoom: 9 // starting zoom\n    });\n\n    // disable map rotation using right click + drag\n    map.dragRotate.disable();\n\n    // disable map rotation using touch rotation gesture\n    map.touchZoomRotate.disableRotation();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/disable-scroll-zoom/","title":"Disable scroll zoom","text":"<p>Prevent scroll from zooming a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Disable scroll zoom&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Prevent scroll from zooming a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', //stylesheet location\n        center: [-122.65, 45.52], // starting position\n        zoom: 9 // starting zoom\n    });\n\n    // disable map zoom when using scroll\n    map.scrollZoom.disable();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-and-style-rich-text-labels/","title":"Display and style rich text labels","text":"<p>Use the format expression to display country labels in both English and in the local language.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display and style rich text labels&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the format expression to display country labels in both English and in the local language.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    maplibregl.setRTLTextPlugin(\n        'https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'\n    );\n\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // stylesheet location\n        center: [9.49, 49.01], // starting position [lng, lat]\n        zoom: 4 // starting zoom\n    });\n\n    map.on('load', () =&gt; {\n        map.setLayoutProperty('label_country', 'text-field', [\n            'format',\n            ['get', 'name_en'],\n            {'font-scale': 1.2},\n            '\\n',\n            {},\n            ['get', 'name'],\n            {\n                'font-scale': 0.8,\n                'text-font': [\n                    'literal',\n                    ['DIN Offc Pro Italic', 'Arial Unicode MS Regular']\n                ]\n            }\n        ]);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/drag-a-marker/","title":"Create a draggable Marker","text":"<p>Drag the marker to a new location on a map and populate its coordinates in a display.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a draggable Marker&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Drag the marker to a new location on a map and populate its coordinates in a display.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .coordinates {\n        background: rgba(0, 0, 0, 0.5);\n        color: #fff;\n        position: absolute;\n        bottom: 40px;\n        left: 10px;\n        padding: 5px 10px;\n        margin: 0;\n        font-size: 11px;\n        line-height: 18px;\n        border-radius: 3px;\n        display: none;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"coordinates\" class=\"coordinates\"&gt;&lt;/pre&gt;\n\n&lt;script&gt;\n    const coordinates = document.getElementById('coordinates');\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [0, 0],\n        zoom: 2\n    });\n\n    const marker = new maplibregl.Marker({draggable: true})\n        .setLngLat([0, 0])\n        .addTo(map);\n\n    function onDragEnd() {\n        const lngLat = marker.getLngLat();\n        coordinates.style.display = 'block';\n        coordinates.innerHTML =\n            `Longitude: ${lngLat.lng}&lt;br /&gt;Latitude: ${lngLat.lat}`;\n    }\n\n    marker.on('dragend', onDragEnd);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/drag-a-point/","title":"Create a draggable point","text":"<p>Drag the point to a new location on a map and populate its coordinates in a display.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a draggable point&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Drag the point to a new location on a map and populate its coordinates in a display.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .coordinates {\n        background: rgba(0, 0, 0, 0.5);\n        color: #fff;\n        position: absolute;\n        bottom: 40px;\n        left: 10px;\n        padding: 5px 10px;\n        margin: 0;\n        font-size: 11px;\n        line-height: 18px;\n        border-radius: 3px;\n        display: none;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"coordinates\" class=\"coordinates\"&gt;&lt;/pre&gt;\n\n&lt;script&gt;\n    const coordinates = document.getElementById('coordinates');\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [0, 0],\n        zoom: 2\n    });\n\n    const canvas = map.getCanvasContainer();\n\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [0, 0]\n                }\n            }\n        ]\n    };\n\n    function onMove(e) {\n        const coords = e.lngLat;\n\n        // Set a UI indicator for dragging.\n        canvas.style.cursor = 'grabbing';\n\n        // Update the Point feature in `geojson` coordinates\n        // and call setData to the source layer `point` on it.\n        geojson.features[0].geometry.coordinates = [coords.lng, coords.lat];\n        map.getSource('point').setData(geojson);\n    }\n\n    function onUp(e) {\n        const coords = e.lngLat;\n\n        // Print the coordinates of where the point had\n        // finished being dragged to on the map.\n        coordinates.style.display = 'block';\n        coordinates.innerHTML =\n            `Longitude: ${coords.lng}&lt;br /&gt;Latitude: ${coords.lat}`;\n        canvas.style.cursor = '';\n\n        // Unbind mouse/touch events\n        map.off('mousemove', onMove);\n        map.off('touchmove', onMove);\n    }\n\n    map.on('load', () =&gt; {\n        // Add a single point to the map\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': geojson\n        });\n\n        map.addLayer({\n            'id': 'point',\n            'type': 'circle',\n            'source': 'point',\n            'paint': {\n                'circle-radius': 10,\n                'circle-color': '#3887be'\n            }\n        });\n\n        // When the cursor enters a feature in the point layer, prepare for dragging.\n        map.on('mouseenter', 'point', () =&gt; {\n            map.setPaintProperty('point', 'circle-color', '#3bb2d0');\n            canvas.style.cursor = 'move';\n        });\n\n        map.on('mouseleave', 'point', () =&gt; {\n            map.setPaintProperty('point', 'circle-color', '#3887be');\n            canvas.style.cursor = '';\n        });\n\n        map.on('mousedown', 'point', (e) =&gt; {\n            // Prevent the default map drag behavior.\n            e.preventDefault();\n\n            canvas.style.cursor = 'grab';\n\n            map.on('mousemove', onMove);\n            map.once('mouseup', onUp);\n        });\n\n        map.on('touchstart', 'point', (e) =&gt; {\n            if (e.points.length !== 1) return;\n\n            // Prevent the default map drag behavior.\n            e.preventDefault();\n\n            map.on('touchmove', onMove);\n            map.once('touchend', onUp);\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fallback-image/","title":"Use a fallback image","text":"<p>Use a coalesce expression to display another image when a requested image is not available.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Use a fallback image&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a coalesce expression to display another image when a requested image is not available.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77, 38.75],\n        zoom: 5\n    });\n    map.on('load', () =&gt; {\n        map.addSource('points', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [\n                                -77.03238901390978, 38.913188059745586\n                            ]\n                        },\n                        'properties': {\n                            'title': 'Washington DC',\n                            'icon': 'monument'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-79.9959, 40.4406]\n                        },\n                        'properties': {\n                            'title': 'Pittsburgh',\n                            'icon': 'bridges'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-76.2859, 36.8508]\n                        },\n                        'properties': {\n                            'title': 'Norfolk',\n                            'icon': 'harbor'\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'points',\n            'layout': {\n                'icon-image': [\n                    'coalesce',\n                    ['image', ['concat', ['get', 'icon'], '_15']],\n                    ['image', 'marker_15']\n                ],\n                'text-field': ['get', 'title'],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-offset': [0, 0.6],\n                'text-anchor': 'top'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fill-pattern/","title":"Add a pattern to a polygon","text":"<p>Use fill-pattern to draw a polygon from a repeating image pattern.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a pattern to a polygon&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use fill-pattern to draw a polygon from a repeating image pattern.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        zoom: 1\n    });\n\n    map.on('load', () =&gt; {\n        // Add GeoJSON data\n        map.addSource('source', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Polygon',\n                    'coordinates': [\n                        [\n                            [-30, -25],\n                            [-30, 35],\n                            [30, 35],\n                            [30, -25],\n                            [-30, -25]\n                        ]\n                    ]\n                }\n            }\n        });\n\n        // Load an image to use as the pattern\n        map.loadImage(\n            'https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/64px-Cat_silhouette.svg.png',\n            (err, image) =&gt; {\n                // Throw an error if something went wrong\n                if (err) throw err;\n\n                // Declare the image\n                map.addImage('pattern', image);\n\n                // Use it\n                map.addLayer({\n                    'id': 'pattern-layer',\n                    'type': 'fill',\n                    'source': 'source',\n                    'paint': {\n                        'fill-pattern': 'pattern'\n                    }\n                });\n            }\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/filter-markers-by-input/","title":"Filter symbols by text input","text":"<p>Filter symbols by icon name by typing in a text input.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Filter symbols by text input&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Filter symbols by icon name by typing in a text input.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .filter-ctrl {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        z-index: 1;\n    }\n\n    .filter-ctrl input[type='text'] {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        width: 100%;\n        border: 0;\n        background-color: #fff;\n        margin: 0;\n        color: rgba(0, 0, 0, 0.5);\n        padding: 10px;\n        box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n        border-radius: 3px;\n        width: 180px;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"filter-ctrl\"&gt;\n    &lt;input\n        id=\"filter-input\"\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Filter by name\"\n    /&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const places = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.038659, 38.931567]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.003168, 38.894651]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'bar'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.090372, 38.881189]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'bicycle'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.052477, 38.943951]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.031706, 38.914581]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.020945, 38.878241]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.007481, 38.876516]\n                }\n            }\n        ]\n    };\n\n    const layerIDs = []; // Will contain a list used to filter against.\n    const filterInput = document.getElementById('filter-input');\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        // Add a GeoJSON source containing place coordinates and information.\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': places\n        });\n\n        places.features.forEach((feature) =&gt; {\n            const symbol = feature.properties['icon'];\n            const layerID = `poi-${symbol}`;\n\n            // Add a layer for this symbol type if it hasn't been added already.\n            if (!map.getLayer(layerID)) {\n                map.addLayer({\n                    'id': layerID,\n                    'type': 'symbol',\n                    'source': 'places',\n                    'layout': {\n                        'icon-image': `${symbol}_15`,\n                        'icon-overlap': 'always',\n                        'text-field': symbol,\n                        'text-font': [\n                            'Open Sans Bold',\n                            'Arial Unicode MS Bold'\n                        ],\n                        'text-size': 11,\n                        'text-transform': 'uppercase',\n                        'text-letter-spacing': 0.05,\n                        'text-offset': [0, 1.5]\n                    },\n                    'paint': {\n                        'text-color': '#202',\n                        'text-halo-color': '#fff',\n                        'text-halo-width': 2\n                    },\n                    'filter': ['==', 'icon', symbol]\n                });\n\n                layerIDs.push(layerID);\n            }\n        });\n\n        filterInput.addEventListener('keyup', (e) =&gt; {\n            // If the input value matches a layerID set\n            // it's visibility to 'visible' or else hide it.\n            const value = e.target.value.trim().toLowerCase();\n            layerIDs.forEach((layerID) =&gt; {\n                map.setLayoutProperty(\n                    layerID,\n                    'visibility',\n                    layerID.indexOf(value) &gt; -1 ? 'visible' : 'none'\n                );\n            });\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/filter-markers/","title":"Filter symbols by toggling a list","text":"<p>Filter a set of symbols based on a property value in the data.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Filter symbols by toggling a list&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Filter a set of symbols based on a property value in the data.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .filter-group {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        font-weight: 600;\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        z-index: 1;\n        border-radius: 3px;\n        width: 120px;\n        color: #fff;\n    }\n\n    .filter-group input[type='checkbox']:first-child + label {\n        border-radius: 3px 3px 0 0;\n    }\n\n    .filter-group label:last-child {\n        border-radius: 0 0 3px 3px;\n        border: none;\n    }\n\n    .filter-group input[type='checkbox'] {\n        display: none;\n    }\n\n    .filter-group input[type='checkbox'] + label {\n        background-color: #3386c0;\n        display: block;\n        cursor: pointer;\n        padding: 10px;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n    }\n\n    .filter-group input[type='checkbox'] + label {\n        background-color: #3386c0;\n        text-transform: capitalize;\n    }\n\n    .filter-group input[type='checkbox'] + label:hover,\n    .filter-group input[type='checkbox']:checked + label {\n        background-color: #4ea0da;\n    }\n\n    .filter-group input[type='checkbox']:checked + label:before {\n        content: '\u2714';\n        margin-right: 5px;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;nav id=\"filter-group\" class=\"filter-group\"&gt;&lt;/nav&gt;\n\n&lt;script&gt;\n    const places = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.038659, 38.931567]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.003168, 38.894651]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'bar'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.090372, 38.881189]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'bicycle'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.052477, 38.943951]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.031706, 38.914581]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.020945, 38.878241]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.007481, 38.876516]\n                }\n            }\n        ]\n    };\n\n    const filterGroup = document.getElementById('filter-group');\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        // Add a GeoJSON source containing place coordinates and information.\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': places\n        });\n\n        places.features.forEach((feature) =&gt; {\n            const symbol = feature.properties['icon'];\n            const layerID = `poi-${symbol}`;\n\n            // Add a layer for this symbol type if it hasn't been added already.\n            if (!map.getLayer(layerID)) {\n                map.addLayer({\n                    'id': layerID,\n                    'type': 'symbol',\n                    'source': 'places',\n                    'layout': {\n                        'icon-image': `${symbol}_15`,\n                        'icon-overlap': 'always'\n                    },\n                    'filter': ['==', 'icon', symbol]\n                });\n\n                // Add checkbox and label elements for the layer.\n                const input = document.createElement('input');\n                input.type = 'checkbox';\n                input.id = layerID;\n                input.checked = true;\n                filterGroup.appendChild(input);\n\n                const label = document.createElement('label');\n                label.setAttribute('for', layerID);\n                label.textContent = symbol;\n                filterGroup.appendChild(label);\n\n                // When the checkbox changes, update the visibility of the layer.\n                input.addEventListener('change', (e) =&gt; {\n                    map.setLayoutProperty(\n                        layerID,\n                        'visibility',\n                        e.target.checked ? 'visible' : 'none'\n                    );\n                });\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fitbounds/","title":"Fit a map to a bounding box","text":"<p>Fit the map to a specific area, regardless of the pixel size of the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Fit a map to a bounding box&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Fit the map to a specific area, regardless of the pixel size of the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #fit {\n        display: block;\n        position: relative;\n        margin: 0px auto;\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fit\"&gt;Fit to Kenya&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-74.5, 40],\n        zoom: 9\n    });\n\n    document.getElementById('fit').addEventListener('click', () =&gt; {\n        map.fitBounds([\n            [32.958984, -5.353521],\n            [43.50585, 5.615985]\n        ]);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/flyto-options/","title":"Slowly fly to a location","text":"<p>Use flyTo with flyOptions to slowly zoom to a location.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Slowly fly to a location&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use flyTo with flyOptions to slowly zoom to a location.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #fly {\n        display: block;\n        position: relative;\n        margin: 0px auto;\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fly\"&gt;Fly&lt;/button&gt;\n&lt;script&gt;\n    const start = [-74.5, 40];\n    const end = [74.5, 40];\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: start,\n        zoom: 9\n    });\n\n    let isAtStart = true;\n\n    document.getElementById('fly').addEventListener('click', () =&gt; {\n        // depending on whether we're currently at point a or b, aim for\n        // point a or b\n        const target = isAtStart ? end : start;\n\n        // and now we're at the opposite point\n        isAtStart = !isAtStart;\n\n        map.flyTo({\n            // These options control the ending camera position: centered at\n            // the target, at zoom level 9, and north up.\n            center: target,\n            zoom: 9,\n            bearing: 0,\n\n            // These options control the flight curve, making it move\n            // slowly and zoom out almost completely before starting\n            // to pan.\n            speed: 0.2, // make the flying slow\n            curve: 1, // change the speed at which it zooms out\n\n            // This can be any easing function: it takes a number between\n            // 0 and 1 and returns another number between 0 and 1.\n            easing (t) {\n                return t;\n            },\n\n            // this animation is considered essential with respect to prefers-reduced-motion\n            essential: true\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/flyto/","title":"Fly to a location","text":"<p>Use flyTo to smoothly interpolate between locations.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Fly to a location&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use flyTo to smoothly interpolate between locations.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #fly {\n        display: block;\n        position: relative;\n        margin: 0px auto;\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fly\"&gt;Fly&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-74.5, 40],\n        zoom: 9\n    });\n\n    document.getElementById('fly').addEventListener('click', () =&gt; {\n        // Fly to a random location by offsetting the point -74.50, 40\n        // by up to 5 degrees.\n        map.flyTo({\n            center: [\n                -74.5 + (Math.random() - 0.5) * 10,\n                40 + (Math.random() - 0.5) * 10\n            ],\n            essential: true // this animation is considered essential with respect to prefers-reduced-motion\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fullscreen/","title":"View a fullscreen map","text":"<p>Toggle between current view and fullscreen mode. Does not work on iPhones because a pseudo-fullscreen is used, and the code is embedded in an iframe, which prevents the map from scaling.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;View a fullscreen map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Toggle between current view and fullscreen mode. Does not work on iPhones because a pseudo-fullscreen is used, and the code is embedded in an iframe, which prevents the map from scaling.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', //stylesheet location\n        center: [11.255, 43.77], // starting position\n        zoom: 13 // starting zoom\n    });\n\n    map.addControl(new maplibregl.FullscreenControl());\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/game-controls/","title":"Navigate the map with game-like controls","text":"<p>Use the keyboard's arrow keys to move around the map with game-like controls.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Navigate the map with game-like controls&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the keyboard's arrow keys to move around the map with game-like controls.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-87.6298, 41.8781],\n        zoom: 17,\n        bearing: -12,\n        pitch: 60,\n        interactive: false\n    });\n\n    // pixels the map pans when the up or down arrow is clicked\n    const deltaDistance = 100;\n\n    // degrees the map rotates when the left or right arrow is clicked\n    const deltaDegrees = 25;\n\n    function easing(t) {\n        return t * (2 - t);\n    }\n\n    map.on('load', () =&gt; {\n        map.getCanvas().focus();\n\n        map.getCanvas().addEventListener(\n            'keydown',\n            (e) =&gt; {\n                e.preventDefault();\n                if (e.which === 38) {\n                    // up\n                    map.panBy([0, -deltaDistance], {\n                        easing\n                    });\n                } else if (e.which === 40) {\n                    // down\n                    map.panBy([0, deltaDistance], {\n                        easing\n                    });\n                } else if (e.which === 37) {\n                    // left\n                    map.easeTo({\n                        bearing: map.getBearing() - deltaDegrees,\n                        easing\n                    });\n                } else if (e.which === 39) {\n                    // right\n                    map.easeTo({\n                        bearing: map.getBearing() + deltaDegrees,\n                        easing\n                    });\n                }\n            },\n            true\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geocoder/","title":"Geocode with Nominatim","text":"<p>Geocode with Nominatim and the maplibre-gl-geocoder plugin.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Geocode with Nominatim&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Geocode with Nominatim and the maplibre-gl-geocoder plugin.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- Load the `maplibre-gl-geocoder` plugin. --&gt;\n&lt;script src=\"https://unpkg.com/@maplibre/maplibre-gl-geocoder@1.2.0/dist/maplibre-gl-geocoder.min.js\"&gt;&lt;/script&gt;\n&lt;link\n    rel=\"stylesheet\"\n    href=\"https://unpkg.com/@maplibre/maplibre-gl-geocoder@1.2.0/dist/maplibre-gl-geocoder.css\"\n    type=\"text/css\"\n/&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    /* eslint-disable camelcase */\n    const map = new maplibregl.Map({\n        container: 'map',\n        // Use a minimalist raster style\n        style: {\n            'version': 8,\n            'name': 'Blank',\n            'center': [0, 0],\n            'zoom': 0,\n            'sources': {\n                'raster-tiles': {\n                    'type': 'raster',\n                    'tiles': ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    'tileSize': 256,\n                    'minzoom': 0,\n                    'maxzoom': 19\n                }\n            },\n            'layers': [\n                {\n                    'id': 'background',\n                    'type': 'background',\n                    'paint': {\n                        'background-color': '#e0dfdf'\n                    }\n                },\n                {\n                    'id': 'simple-tiles',\n                    'type': 'raster',\n                    'source': 'raster-tiles'\n                }\n            ],\n            'id': 'blank'\n        },\n        center: [-87.61694, 41.86625],\n        zoom: 15.99,\n        pitch: 40,\n        bearing: 20,\n        antialias: true\n    });\n\n    const geocoderApi = {\n        forwardGeocode: async (config) =&gt; {\n            const features = [];\n            try {\n                const request =\n            `https://nominatim.openstreetmap.org/search?q=${\n                config.query\n            }&amp;format=geojson&amp;polygon_geojson=1&amp;addressdetails=1`;\n                const response = await fetch(request);\n                const geojson = await response.json();\n                for (const feature of geojson.features) {\n                    const center = [\n                        feature.bbox[0] +\n                    (feature.bbox[2] - feature.bbox[0]) / 2,\n                        feature.bbox[1] +\n                    (feature.bbox[3] - feature.bbox[1]) / 2\n                    ];\n                    const point = {\n                        type: 'Feature',\n                        geometry: {\n                            type: 'Point',\n                            coordinates: center\n                        },\n                        place_name: feature.properties.display_name,\n                        properties: feature.properties,\n                        text: feature.properties.display_name,\n                        place_type: ['place'],\n                        center\n                    };\n                    features.push(point);\n                }\n            } catch (e) {\n                console.error(`Failed to forwardGeocode with error: ${e}`);\n            }\n\n            return {\n                features\n            };\n        }\n    };\n    map.addControl(\n        new MaplibreGeocoder(geocoderApi, {\n            maplibregl\n        })\n    );\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geojson-layer-in-stack/","title":"Add a new layer below labels","text":"<p>Use the second argument of addLayer to add a layer below labels.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a new layer below labels&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the second argument of addLayer to add a layer below labels.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-88.13734351262877, 35.137451890638886],\n        zoom: 4\n    });\n\n    map.on('load', () =&gt; {\n        const layers = map.getStyle().layers;\n        // Find the index of the first symbol layer in the map style\n        let firstSymbolId;\n        for (let i = 0; i &lt; layers.length; i++) {\n            if (layers[i].type === 'symbol') {\n                firstSymbolId = layers[i].id;\n                break;\n            }\n        }\n        map.addSource('urban-areas', {\n            'type': 'geojson',\n            'data':\n                'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_urban_areas.geojson'\n        });\n        map.addLayer(\n            {\n                'id': 'urban-areas-fill',\n                'type': 'fill',\n                'source': 'urban-areas',\n                'layout': {},\n                'paint': {\n                    'fill-color': '#f08',\n                    'fill-opacity': 0.4\n                }\n                // This is the important part of this example: the addLayer\n                // method takes 2 arguments: the layer as an object, and a string\n                // representing another layer's name. if the other layer\n                // exists in the stylesheet already, the new layer will be positioned\n                // right before that layer in the stack, making it possible to put\n                // 'overlays' anywhere in the layer stack.\n                // Insert the layer beneath the first symbol layer.\n            },\n            firstSymbolId\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geojson-line/","title":"Add a GeoJSON line","text":"<p>Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a GeoJSON line&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-122.486052, 37.830348],\n        zoom: 15\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('route', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': [\n                        [-122.48369693756104, 37.83381888486939],\n                        [-122.48348236083984, 37.83317489144141],\n                        [-122.48339653015138, 37.83270036637107],\n                        [-122.48356819152832, 37.832056363179625],\n                        [-122.48404026031496, 37.83114119107971],\n                        [-122.48404026031496, 37.83049717427869],\n                        [-122.48348236083984, 37.829920943955045],\n                        [-122.48356819152832, 37.82954808664175],\n                        [-122.48507022857666, 37.82944639795659],\n                        [-122.48610019683838, 37.82880236636284],\n                        [-122.48695850372314, 37.82931081282506],\n                        [-122.48700141906738, 37.83080223556934],\n                        [-122.48751640319824, 37.83168351665737],\n                        [-122.48803138732912, 37.832158048267786],\n                        [-122.48888969421387, 37.83297152392784],\n                        [-122.48987674713133, 37.83263257682617],\n                        [-122.49043464660643, 37.832937629287755],\n                        [-122.49125003814696, 37.832429207817725],\n                        [-122.49163627624512, 37.832564787218985],\n                        [-122.49223709106445, 37.83337825839438],\n                        [-122.49378204345702, 37.83368330777276]\n                    ]\n                }\n            }\n        });\n        map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n            },\n            'paint': {\n                'line-color': '#888',\n                'line-width': 8\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geojson-markers/","title":"Draw GeoJSON points","text":"<p>Draw points from a GeoJSON collection to a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Draw GeoJSON points&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Draw points from a GeoJSON collection to a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/positron/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [0, 0],\n        zoom: 1\n    });\n\n    map.on('load', () =&gt; {\n        // Add an image to use as a custom marker\n        map.loadImage(\n            'https://maplibre.org/maplibre-gl-js/docs/assets/osgeo-logo.png',\n            (error, image) =&gt; {\n                if (error) throw error;\n                map.addImage('custom-marker', image);\n                // Add a GeoJSON source with 15 points\n                map.addSource('conferences', {\n                    'type': 'geojson',\n                    'data': {\n                        'type': 'FeatureCollection',\n                        'features': [\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [100.4933, 13.7551]\n                                },\n                                'properties': {'year': '2004'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [6.6523, 46.5535]\n                                },\n                                'properties': {'year': '2006'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-123.3596, 48.4268]\n                                },\n                                'properties': {'year': '2007'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [18.4264, -33.9224]\n                                },\n                                'properties': {'year': '2008'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [151.195, -33.8552]\n                                },\n                                'properties': {'year': '2009'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [2.1404, 41.3925]\n                                },\n                                'properties': {'year': '2010'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-104.8548, 39.7644]\n                                },\n                                'properties': {'year': '2011'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-1.1665, 52.9539]\n                                },\n                                'properties': {'year': '2013'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-122.6544, 45.5428]\n                                },\n                                'properties': {'year': '2014'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [126.974, 37.5651]\n                                },\n                                'properties': {'year': '2015'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [7.1112, 50.7255]\n                                },\n                                'properties': {'year': '2016'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-71.0314, 42.3539]\n                                },\n                                'properties': {'year': '2017'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [39.2794, -6.8173]\n                                },\n                                'properties': {'year': '2018'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [26.0961, 44.4379]\n                                },\n                                'properties': {'year': '2019'}\n                            },\n                            {\n                                'type': 'Feature',\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-114.0879, 51.0279]\n                                },\n                                'properties': {'year': '2020'}\n                            }\n                        ]\n                    }\n                });\n\n                // Add a symbol layer\n                map.addLayer({\n                    'id': 'conferences',\n                    'type': 'symbol',\n                    'source': 'conferences',\n                    'layout': {\n                        'icon-image': 'custom-marker',\n                        // get the year from the source's \"year\" property\n                        'text-field': ['get', 'year'],\n                        'text-font': [\n                            'Open Sans Semibold',\n                            'Arial Unicode MS Bold'\n                        ],\n                        'text-offset': [0, 1.25],\n                        'text-anchor': 'top'\n                    }\n                });\n            }\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geojson-polygon/","title":"Add a GeoJSON polygon","text":"<p>Style a polygon with the fill layer type.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a GeoJSON polygon&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Style a polygon with the fill layer type.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-68.13734351262877, 45.137451890638886],\n        zoom: 5\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('maine', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'Polygon',\n                    'coordinates': [\n                        [\n                            [-67.13734351262877, 45.137451890638886],\n                            [-66.96466, 44.8097],\n                            [-68.03252, 44.3252],\n                            [-69.06, 43.98],\n                            [-70.11617, 43.68405],\n                            [-70.64573401557249, 43.090083319667144],\n                            [-70.75102474636725, 43.08003225358635],\n                            [-70.79761105007827, 43.21973948828747],\n                            [-70.98176001655037, 43.36789581966826],\n                            [-70.94416541205806, 43.46633942318431],\n                            [-71.08482, 45.3052400000002],\n                            [-70.6600225491012, 45.46022288673396],\n                            [-70.30495378282376, 45.914794623389355],\n                            [-70.00014034695016, 46.69317088478567],\n                            [-69.23708614772835, 47.44777598732787],\n                            [-68.90478084987546, 47.184794623394396],\n                            [-68.23430497910454, 47.35462921812177],\n                            [-67.79035274928509, 47.066248887716995],\n                            [-67.79141211614706, 45.702585354182816],\n                            [-67.13734351262877, 45.137451890638886]\n                        ]\n                    ]\n                }\n            }\n        });\n        map.addLayer({\n            'id': 'maine',\n            'type': 'fill',\n            'source': 'maine',\n            'layout': {},\n            'paint': {\n                'fill-color': '#088',\n                'fill-opacity': 0.8\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/heatmap-layer/","title":"Create a heatmap layer","text":"<p>Visualize earthquake frequency by location using a heatmap layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a heatmap layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Visualize earthquake frequency by location using a heatmap layer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-120, 50],\n        zoom: 2\n    });\n\n    map.on('load', () =&gt; {\n        // Add a geojson point source.\n        // Heatmap layers also work with a vector tile source.\n        map.addSource('earthquakes', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson'\n        });\n\n        map.addLayer(\n            {\n                'id': 'earthquakes-heat',\n                'type': 'heatmap',\n                'source': 'earthquakes',\n                'maxzoom': 9,\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate',\n                        ['linear'],\n                        ['get', 'mag'],\n                        0,\n                        0,\n                        6,\n                        1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        0,\n                        1,\n                        9,\n                        3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparancy color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['heatmap-density'],\n                        0,\n                        'rgba(33,102,172,0)',\n                        0.2,\n                        'rgb(103,169,207)',\n                        0.4,\n                        'rgb(209,229,240)',\n                        0.6,\n                        'rgb(253,219,199)',\n                        0.8,\n                        'rgb(239,138,98)',\n                        1,\n                        'rgb(178,24,43)'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        0,\n                        2,\n                        9,\n                        20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        7,\n                        1,\n                        9,\n                        0\n                    ]\n                }\n            },\n            'waterway'\n        );\n\n        map.addLayer(\n            {\n                'id': 'earthquakes-point',\n                'type': 'circle',\n                'source': 'earthquakes',\n                'minzoom': 7,\n                'paint': {\n                    // Size circle radius by earthquake magnitude and zoom level\n                    'circle-radius': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        7,\n                        ['interpolate', ['linear'], ['get', 'mag'], 1, 1, 6, 4],\n                        16,\n                        ['interpolate', ['linear'], ['get', 'mag'], 1, 5, 6, 50]\n                    ],\n                    // Color circle by earthquake magnitude\n                    'circle-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['get', 'mag'],\n                        1,\n                        'rgba(33,102,172,0)',\n                        2,\n                        'rgb(103,169,207)',\n                        3,\n                        'rgb(209,229,240)',\n                        4,\n                        'rgb(253,219,199)',\n                        5,\n                        'rgb(239,138,98)',\n                        6,\n                        'rgb(178,24,43)'\n                    ],\n                    'circle-stroke-color': 'white',\n                    'circle-stroke-width': 1,\n                    // Transition from heatmap to circle layer by zoom level\n                    'circle-opacity': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        7,\n                        0,\n                        8,\n                        1\n                    ]\n                }\n            },\n            'waterway'\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/hover-styles/","title":"Create a hover effect","text":"<p>Use events and feature states to create a per feature hover effect.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a hover effect&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use events and feature states to create a per feature hover effect.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-100.486052, 37.830348],\n        zoom: 2\n    });\n    let hoveredStateId = null;\n\n    map.on('load', () =&gt; {\n        map.addSource('states', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/us_states.geojson'\n        });\n\n        // The feature-state dependent fill-opacity expression will render the hover effect\n        // when a feature's hover state is set to true.\n        map.addLayer({\n            'id': 'state-fills',\n            'type': 'fill',\n            'source': 'states',\n            'layout': {},\n            'paint': {\n                'fill-color': '#627BC1',\n                'fill-opacity': [\n                    'case',\n                    ['boolean', ['feature-state', 'hover'], false],\n                    1,\n                    0.5\n                ]\n            }\n        });\n\n        map.addLayer({\n            'id': 'state-borders',\n            'type': 'line',\n            'source': 'states',\n            'layout': {},\n            'paint': {\n                'line-color': '#627BC1',\n                'line-width': 2\n            }\n        });\n\n        // When the user moves their mouse over the state-fill layer, we'll update the\n        // feature state for the feature under the mouse.\n        map.on('mousemove', 'state-fills', (e) =&gt; {\n            if (e.features.length &gt; 0) {\n                if (hoveredStateId) {\n                    map.setFeatureState(\n                        {source: 'states', id: hoveredStateId},\n                        {hover: false}\n                    );\n                }\n                hoveredStateId = e.features[0].id;\n                map.setFeatureState(\n                    {source: 'states', id: hoveredStateId},\n                    {hover: true}\n                );\n            }\n        });\n\n        // When the mouse leaves the state-fill layer, update the feature state of the\n        // previously hovered feature.\n        map.on('mouseleave', 'state-fills', () =&gt; {\n            if (hoveredStateId) {\n                map.setFeatureState(\n                    {source: 'states', id: hoveredStateId},\n                    {hover: false}\n                );\n            }\n            hoveredStateId = null;\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/interactive-false/","title":"Display a non-interactive map","text":"<p>Disable interactivity to create a static map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a non-interactive map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Disable interactivity to create a static map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-74.5, 40],\n        zoom: 9,\n        // causes pan &amp; zoom handlers not to be applied, similar to\n        // .dragging.disable() and other handler .disable() funtions in Leaflet.\n        interactive: false\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/jump-to/","title":"Jump to a series of locations","text":"<p>Use the jumpTo function to showcase multiple locations.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Jump to a series of locations&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the jumpTo function to showcase multiple locations.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const cities = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [100.507, 13.745]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [98.993, 18.793]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [99.838, 19.924]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [102.812, 17.408]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [100.458, 7.001]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [100.905, 12.935]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [100.507, 13.745],\n        zoom: 9\n    });\n\n    map.on('load', () =&gt; {\n        cities.features.forEach((city, index) =&gt; {\n            setTimeout(() =&gt; {\n                map.jumpTo({center: city.geometry.coordinates});\n            }, 2000 * index);\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/language-switch/","title":"Change a map's language","text":"<p>Use setLayoutProperty to switch languages dynamically.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change a map's language&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use setLayoutProperty to switch languages dynamically.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #buttons {\n        width: 90%;\n        margin: 0 auto;\n    }\n    .button {\n        display: inline-block;\n        position: relative;\n        cursor: pointer;\n        width: 20%;\n        padding: 8px;\n        border-radius: 3px;\n        margin-top: 10px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n        font-family: sans-serif;\n        font-weight: bold;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;ul id=\"buttons\"&gt;\n    &lt;li id=\"button-fr\" class=\"button\"&gt;French&lt;/li&gt;\n    &lt;li id=\"button-ru\" class=\"button\"&gt;Russian&lt;/li&gt;\n    &lt;li id=\"button-de\" class=\"button\"&gt;German&lt;/li&gt;\n    &lt;li id=\"button-es\" class=\"button\"&gt;Spanish&lt;/li&gt;\n&lt;/ul&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/basic/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [16.05, 48],\n        zoom: 2.9\n    });\n\n    document\n        .getElementById('buttons')\n        .addEventListener('click', (event) =&gt; {\n            const language = event.target.id.substr('button-'.length);\n            // Use setLayoutProperty to set the value of a layout property in a style layer.\n            // The three arguments are the id of the layer, the name of the layout property,\n            // and the new property value.\n            map.setLayoutProperty('label_country', 'text-field', [\n                'get',\n                `name:${language}`\n            ]);\n        });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/line-across-180th-meridian/","title":"Display line that crosses 180th meridian","text":"<p>Draw a line across the 180th meridian using a GeoJSON source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display line that crosses 180th meridian&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Draw a line across the 180th meridian using a GeoJSON source.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-41.62667, 26.11598],\n        zoom: 0\n    });\n\n    map.on('load', () =&gt; {\n        map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': {\n                'type': 'geojson',\n                'data': {\n                    'type': 'Feature',\n                    'properties': {},\n                    'geometry': createGeometry(false)\n                }\n            },\n            'layout': {'line-cap': 'round'},\n            'paint': {\n                'line-color': '#007296',\n                'line-width': 4\n            }\n        });\n\n        map.addLayer({\n            'id': 'route-label',\n            'type': 'symbol',\n            'source': 'route',\n            'layout': {\n                'symbol-placement': 'line-center',\n                'text-field': 'Crosses the world'\n            }\n        });\n\n        map.addLayer({\n            'id': 'route-two',\n            'type': 'line',\n            'source': {\n                'type': 'geojson',\n                'data': {\n                    'type': 'Feature',\n                    'properties': {},\n                    'geometry': createGeometry(true)\n                }\n            },\n            'layout': {'line-cap': 'round'},\n            'paint': {\n                'line-color': '#F06317',\n                'line-width': 4\n            }\n        });\n\n        map.addLayer({\n            'id': 'route-two-label',\n            'type': 'symbol',\n            'source': 'route-two',\n            'layout': {\n                'symbol-placement': 'line-center',\n                'text-field': 'Crosses 180th meridian'\n            }\n        });\n\n        function createGeometry(doesCrossAntimeridian) {\n            const geometry = {\n                'type': 'LineString',\n                'coordinates': [\n                    [-72.42187, -16.59408],\n                    [140.27343, 35.67514]\n                ]\n            };\n\n            // To draw a line across the 180th meridian,\n            // if the longitude of the second point minus\n            // the longitude of original (or previous) point is &gt;= 180,\n            // subtract 360 from the longitude of the second point.\n            // If it is less than 180, add 360 to the second point.\n\n            if (doesCrossAntimeridian) {\n                const startLng = geometry.coordinates[0][0];\n                const endLng = geometry.coordinates[1][0];\n\n                if (endLng - startLng &gt;= 180) {\n                    geometry.coordinates[1][0] -= 360;\n                } else if (endLng - startLng &lt; 180) {\n                    geometry.coordinates[1][0] += 360;\n                }\n            }\n\n            return geometry;\n        }\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/line-gradient/","title":"Create a gradient line using an expression","text":"<p>Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a gradient line using an expression&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.035, 38.875],\n        zoom: 12\n    }));\n\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'coordinates': [\n                        [-77.044211, 38.852924],\n                        [-77.045659, 38.860158],\n                        [-77.044232, 38.862326],\n                        [-77.040879, 38.865454],\n                        [-77.039936, 38.867698],\n                        [-77.040338, 38.86943],\n                        [-77.04264, 38.872528],\n                        [-77.03696, 38.878424],\n                        [-77.032309, 38.87937],\n                        [-77.030056, 38.880945],\n                        [-77.027645, 38.881779],\n                        [-77.026946, 38.882645],\n                        [-77.026942, 38.885502],\n                        [-77.028054, 38.887449],\n                        [-77.02806, 38.892088],\n                        [-77.03364, 38.892108],\n                        [-77.033643, 38.899926]\n                    ],\n                    'type': 'LineString'\n                }\n            }\n        ]\n    };\n\n    map.on('load', () =&gt; {\n        // 'line-gradient' can only be used with GeoJSON sources\n        // and the source must have the 'lineMetrics' option set to true\n        map.addSource('line', {\n            type: 'geojson',\n            lineMetrics: true,\n            data: geojson\n        });\n\n        // the layer must be of type 'line'\n        map.addLayer({\n            type: 'line',\n            source: 'line',\n            id: 'line',\n            paint: {\n                'line-color': 'red',\n                'line-width': 14,\n                // 'line-gradient' must be specified using an expression\n                // with the special 'line-progress' property\n                'line-gradient': [\n                    'interpolate',\n                    ['linear'],\n                    ['line-progress'],\n                    0,\n                    'blue',\n                    0.1,\n                    'royalblue',\n                    0.3,\n                    'cyan',\n                    0.5,\n                    'lime',\n                    0.7,\n                    'yellow',\n                    1,\n                    'red'\n                ]\n            },\n            layout: {\n                'line-cap': 'round',\n                'line-join': 'round'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/live-geojson/","title":"Add live realtime data","text":"<p>Use realtime GeoJSON data streams to move a symbol on your map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add live realtime data&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use realtime GeoJSON data streams to move a symbol on your map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        zoom: 0\n    });\n\n    map.on('load', () =&gt; {\n        window.setInterval(() =&gt; {\n            // Make a GET request to get two random numbers\n            fetch('https://www.random.org/decimal-fractions/?num=2&amp;dec=10&amp;col=1&amp;format=plain&amp;rnd=new')\n                .then(r =&gt; r.text())\n                .then(text =&gt; {\n                    // Takes the two random numbers between 0 and 1 and converts them to degrees\n                    const coordinates = text.split('\\n').map(l =&gt; (Number(l) * 180) - 90);\n                    const json = {\n                        type: 'Feature',\n                        geometry: {\n                            type: 'Point',\n                            coordinates\n                        }\n                    };\n                    // Update the drone symbol's location on the map\n                    map.getSource('drone').setData(json);\n\n                    // Fly the map to the drone's current location\n                    map.flyTo({\n                        center: json.geometry.coordinates,\n                        speed: 0.5\n                    });\n                });\n        }, 2000);\n\n        // Set initial location at (0,0).\n        map.addSource('drone', {type: 'geojson', data: {\n            type: 'Feature',\n            geometry: {\n                type: 'Point',\n                coordinates: [0, 0]\n            }\n        }});\n        map.addLayer({\n            'id': 'drone',\n            'type': 'symbol',\n            'source': 'drone',\n            'layout': {\n                'icon-image': 'rocket_15'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/live-update-feature/","title":"Update a feature in realtime","text":"<p>Change an existing feature on your map in real-time by updating its data.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Update a feature in realtime&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Change an existing feature on your map in real-time by updating its data.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script src=\"https://d3js.org/d3.v3.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        zoom: 0\n    });\n\n    map.on('load', () =&gt; {\n        // We use D3 to fetch the JSON here so that we can parse and use it separately\n        // from GL JS's use in the added source. You can use any request method (library\n        // or otherwise) that you want.\n        d3.json(\n            'https://maplibre.org/maplibre-gl-js/docs/assets/hike.geojson',\n            (err, data) =&gt; {\n                if (err) throw err;\n\n                // save full coordinate list for later\n                const coordinates = data.features[0].geometry.coordinates;\n\n                // start by showing just the first coordinate\n                data.features[0].geometry.coordinates = [coordinates[0]];\n\n                // add it to the map\n                map.addSource('trace', {type: 'geojson', data});\n                map.addLayer({\n                    'id': 'trace',\n                    'type': 'line',\n                    'source': 'trace',\n                    'paint': {\n                        'line-color': 'yellow',\n                        'line-opacity': 0.75,\n                        'line-width': 5\n                    }\n                });\n\n                // setup the viewport\n                map.jumpTo({'center': coordinates[0], 'zoom': 14});\n                map.setPitch(30);\n\n                // on a regular basis, add more coordinates from the saved list and update the map\n                let i = 0;\n                const timer = window.setInterval(() =&gt; {\n                    if (i &lt; coordinates.length) {\n                        data.features[0].geometry.coordinates.push(\n                            coordinates[i]\n                        );\n                        map.getSource('trace').setData(data);\n                        map.panTo(coordinates[i]);\n                        i++;\n                    } else {\n                        window.clearInterval(timer);\n                    }\n                }, 10);\n            }\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/local-geojson-experimental/","title":"View local GeoJSON (experimental)","text":"<p>View local GeoJSON with experimental File System Access API.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;View local GeoJSON (experimental)&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"View local GeoJSON with experimental File System Access API.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #viewbutton {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"viewbutton\"&gt;View local GeoJSON file&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-8.3226655, 53.7654751],\n        zoom: 8\n    });\n\n    const viewbutton = document.getElementById('viewbutton');\n\n    async function buttonClickHandler() {\n        const [fileHandle] = await window.showOpenFilePicker({\n            // allow only single file\n            multiple: false,\n\n            // apply filter for GeoJSON files\n            types: [\n                {\n                    description: 'GeoJSON',\n                    accept: {'application/geo+json': ['.geojson']}\n                }\n            ],\n\n            // start in download directory\n            startIn: 'downloads'\n        });\n\n        // get file handle and read content\n        const file = await fileHandle.getFile();\n        const contents = await file.text();\n\n        // parse file as json and add as source to the map\n        map.addSource('uploaded-source', {\n            'type': 'geojson',\n            'data': JSON.parse(contents)\n        });\n\n        map.addLayer({\n            'id': 'uploaded-polygons',\n            'type': 'fill',\n            'source': 'uploaded-source',\n            'paint': {\n                'fill-color': '#888888',\n                'fill-outline-color': 'red',\n                'fill-opacity': 0.4\n            },\n            // filter for (multi)polygons; for also displaying linestrings\n            // or points add more layers with different filters\n            'filter': ['==', '$type', 'Polygon']\n        });\n    }\n\n    if ('showOpenFilePicker' in window) {\n        viewbutton.addEventListener('click', buttonClickHandler);\n    } else {\n        viewbutton.innerText =\n            'Your browser does not support File System Access API';\n        // If you want a fallback, try &lt;input type=\"file\"&gt;; but this uses classical file upload\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/local-geojson/","title":"View local GeoJSON","text":"<p>View local GeoJSON without server upload.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;View local GeoJSON&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"View local GeoJSON without server upload.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #file {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;input\n    type=\"file\"\n    id=\"file\"\n    name=\"file\"\n    accept=\"application/geo+json,application/vnd.geo+json,.geojson\"\n/&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-8.3226655, 53.7654751],\n        zoom: 8\n    });\n\n    function handleFileSelect(evt) {\n        const file = evt.target.files[0]; // Read first selected file\n\n        const reader = new FileReader();\n\n        reader.onload = function (theFile) {\n            // Parse as (geo)JSON\n            const geoJSONcontent = JSON.parse(theFile.target.result);\n\n            // Add as source to the map\n            map.addSource('uploaded-source', {\n                'type': 'geojson',\n                'data': geoJSONcontent\n            });\n\n            map.addLayer({\n                'id': 'uploaded-polygons',\n                'type': 'fill',\n                'source': 'uploaded-source',\n                'paint': {\n                    'fill-color': '#888888',\n                    'fill-outline-color': 'red',\n                    'fill-opacity': 0.4\n                },\n                // filter for (multi)polygons; for also displaying linestrings\n                // or points add more layers with different filters\n                'filter': ['==', '$type', 'Polygon']\n            });\n        };\n\n        // Read the GeoJSON as text\n        reader.readAsText(file, 'UTF-8');\n    }\n\n    document\n        .getElementById('file')\n        .addEventListener('change', handleFileSelect, false);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/local-ideographs/","title":"Use locally generated ideographs","text":"<p>Set localIdeographFontFamily to override the font used for displaying CJK (Chinese, Japanese and Korean) characters, ignoring the map style. This setting must be a CSS font rule specifying fallbacks of on-device fonts. Set localIdeographFontFamily to false to use server-provided fonts, which is much slower.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Use locally generated ideographs&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Set localIdeographFontFamily to override the font used for displaying CJK (Chinese, Japanese and Korean) characters, ignoring the map style. This setting must be a CSS font rule specifying fallbacks of on-device fonts. Set localIdeographFontFamily to false to use server-provided fonts, which is much slower.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [120.3049, 31.4751],\n        zoom: 12,\n        localIdeographFontFamily: '\"Apple LiSung\", serif'\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/locate-user/","title":"Locate the user","text":"<p>Geolocate the user and then track their current location on the map using the GeolocateControl.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Locate the user&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Geolocate the user and then track their current location on the map using the GeolocateControl.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-96, 37.8], // starting position\n        zoom: 3 // starting zoom\n    });\n\n    // Add geolocate control to the map.\n    map.addControl(\n        new maplibregl.GeolocateControl({\n            positionOptions: {\n                enableHighAccuracy: true\n            },\n            trackUserLocation: true\n        })\n    );\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/map-tiles/","title":"Add a raster tile source","text":"<p>Add a third-party raster source to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a raster tile source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a third-party raster source to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: {\n            'version': 8,\n            'sources': {\n                'raster-tiles': {\n                    'type': 'raster',\n                    'tiles': [\n                        // NOTE: Layers from Stadia Maps do not require an API key for localhost development or most production\n                        // web deployments. See https://docs.stadiamaps.com/authentication/ for details.\n                        'https://tiles.stadiamaps.com/tiles/stamen_watercolor/{z}/{x}/{y}.jpg'\n                    ],\n                    'tileSize': 256,\n                    'attribution':\n                        'Map tiles by &lt;a target=\"_blank\" href=\"http://stamen.com\"&gt;Stamen Design&lt;/a&gt;; Hosting by &lt;a href=\"https://stadiamaps.com/\" target=\"_blank\"&gt;Stadia Maps&lt;/a&gt;. Data &amp;copy; &lt;a href=\"https://www.openstreetmap.org/about\" target=\"_blank\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n                }\n            },\n            'layers': [\n                {\n                    'id': 'simple-tiles',\n                    'type': 'raster',\n                    'source': 'raster-tiles',\n                    'minzoom': 0,\n                    'maxzoom': 22\n                }\n            ]\n        },\n        center: [-74.5, 40], // starting position\n        zoom: 2 // starting zoom\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/mapbox-gl-draw/","title":"Show drawn polygon area","text":"<p>Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Show drawn polygon area&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .calculation-box {\n        height: 75px;\n        width: 150px;\n        position: absolute;\n        bottom: 40px;\n        left: 10px;\n        background-color: rgba(255, 255, 255, 0.9);\n        padding: 15px;\n        text-align: center;\n    }\n\n    p {\n        font-family: 'Open Sans';\n        margin: 0;\n        font-size: 13px;\n    }\n&lt;/style&gt;\n\n&lt;script src=\"https://api.tiles.mapbox.com/mapbox.js/plugins/turf/v3.0.11/turf.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.2/mapbox-gl-draw.js\"&gt;&lt;/script&gt;\n&lt;link\n    rel=\"stylesheet\"\n    href=\"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.2.0/mapbox-gl-draw.css\"\n    type=\"text/css\"\n/&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"calculation-box\"&gt;\n    &lt;p&gt;Draw a polygon using the draw tools.&lt;/p&gt;\n    &lt;div id=\"calculated-area\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    MapboxDraw.constants.classes.CONTROL_BASE  = 'maplibregl-ctrl';\n    MapboxDraw.constants.classes.CONTROL_PREFIX = 'maplibregl-ctrl-';\n    MapboxDraw.constants.classes.CONTROL_GROUP = 'maplibregl-ctrl-group';\n\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', //hosted style id\n        center: [-91.874, 42.76], // starting position\n        zoom: 12 // starting zoom\n    });\n\n    const draw = new MapboxDraw({\n        displayControlsDefault: false,\n        controls: {\n            polygon: true,\n            trash: true\n        }\n    });\n    map.addControl(draw);\n\n    map.on('draw.create', updateArea);\n    map.on('draw.delete', updateArea);\n    map.on('draw.update', updateArea);\n\n    function updateArea(e) {\n        const data = draw.getAll();\n        const answer = document.getElementById('calculated-area');\n        if (data.features.length &gt; 0) {\n            const area = turf.area(data);\n            // restrict to area to 2 decimal points\n            const roundedArea = Math.round(area * 100) / 100;\n            answer.innerHTML =\n                `&lt;p&gt;&lt;strong&gt;${\n                    roundedArea\n                }&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;square meters&lt;/p&gt;`;\n        } else {\n            answer.innerHTML = '';\n            if (e.type !== 'draw.delete')\n                alert('Use the draw tools to draw a polygon!');\n        }\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/mapbox-gl-rtl-text/","title":"Add support for right-to-left scripts","text":"<p>Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add support for right-to-left scripts&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    maplibregl.setRTLTextPlugin(\n        'https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js',\n        null,\n        true // Lazy load the plugin\n    );\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [44.3763, 33.2788],\n        zoom: 11\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/measure/","title":"Measure distances","text":"<p>Click points on a map to create lines that measure distanced using turf.length.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Measure distances&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Click points on a map to create lines that measure distanced using turf.length.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .distance-container {\n        position: absolute;\n        top: 10px;\n        left: 10px;\n        z-index: 1;\n    }\n\n    .distance-container &gt; * {\n        background-color: rgba(0, 0, 0, 0.5);\n        color: #fff;\n        font-size: 11px;\n        line-height: 18px;\n        display: block;\n        margin: 0;\n        padding: 5px 10px;\n        border-radius: 3px;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"distance\" class=\"distance-container\"&gt;&lt;/div&gt;\n\n&lt;script src=\"https://npmcdn.com/@turf/turf@5.1.6/turf.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [2.3399, 48.8555],\n        zoom: 12\n    });\n\n    const distanceContainer = document.getElementById('distance');\n\n    // GeoJSON object to hold our measurement features\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': []\n    };\n\n    // Used to draw a line between points\n    const linestring = {\n        'type': 'Feature',\n        'geometry': {\n            'type': 'LineString',\n            'coordinates': []\n        }\n    };\n\n    map.on('load', () =&gt; {\n        map.addSource('geojson', {\n            'type': 'geojson',\n            'data': geojson\n        });\n\n        // Add styles to the map\n        map.addLayer({\n            id: 'measure-points',\n            type: 'circle',\n            source: 'geojson',\n            paint: {\n                'circle-radius': 5,\n                'circle-color': '#000'\n            },\n            filter: ['in', '$type', 'Point']\n        });\n        map.addLayer({\n            id: 'measure-lines',\n            type: 'line',\n            source: 'geojson',\n            layout: {\n                'line-cap': 'round',\n                'line-join': 'round'\n            },\n            paint: {\n                'line-color': '#000',\n                'line-width': 2.5\n            },\n            filter: ['in', '$type', 'LineString']\n        });\n\n        map.on('click', (e) =&gt; {\n            const features = map.queryRenderedFeatures(e.point, {\n                layers: ['measure-points']\n            });\n\n            // Remove the linestring from the group\n            // So we can redraw it based on the points collection\n            if (geojson.features.length &gt; 1) geojson.features.pop();\n\n            // Clear the Distance container to populate it with a new value\n            distanceContainer.innerHTML = '';\n\n            // If a feature was clicked, remove it from the map\n            if (features.length) {\n                const id = features[0].properties.id;\n                geojson.features = geojson.features.filter((point) =&gt; {\n                    return point.properties.id !== id;\n                });\n            } else {\n                const point = {\n                    'type': 'Feature',\n                    'geometry': {\n                        'type': 'Point',\n                        'coordinates': [e.lngLat.lng, e.lngLat.lat]\n                    },\n                    'properties': {\n                        'id': String(new Date().getTime())\n                    }\n                };\n\n                geojson.features.push(point);\n            }\n\n            if (geojson.features.length &gt; 1) {\n                linestring.geometry.coordinates = geojson.features.map(\n                    (point) =&gt; {\n                        return point.geometry.coordinates;\n                    }\n                );\n\n                geojson.features.push(linestring);\n\n                // Populate the distanceContainer with total distance\n                const value = document.createElement('pre');\n                value.textContent =\n                    `Total distance: ${\n                        turf.length(linestring).toLocaleString()\n                    }km`;\n                distanceContainer.appendChild(value);\n            }\n\n            map.getSource('geojson').setData(geojson);\n        });\n    });\n\n    map.on('mousemove', (e) =&gt; {\n        const features = map.queryRenderedFeatures(e.point, {\n            layers: ['measure-points']\n        });\n        // UI indicator for clicking/hovering a point on the map\n        map.getCanvas().style.cursor = features.length ?\n            'pointer' :\n            'crosshair';\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/mouse-position/","title":"Get coordinates of the mouse pointer","text":"<p>Show mouse position on hover with pixel and latitude and longitude coordinates.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Get coordinates of the mouse pointer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Show mouse position on hover with pixel and latitude and longitude coordinates.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style type=\"text/css\"&gt;\n    #info {\n        display: block;\n        position: relative;\n        margin: 0px auto;\n        width: 50%;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #222;\n        background: #fff;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"info\"&gt;&lt;/pre&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-74.5, 40], // starting position\n        zoom: 9 // starting zoom\n    });\n\n    map.on('mousemove', (e) =&gt; {\n        document.getElementById('info').innerHTML =\n            // e.point is the x, y coordinates of the mousemove event relative\n            // to the top-left corner of the map\n            `${JSON.stringify(e.point)\n            }&lt;br /&gt;${\n                // e.lngLat is the longitude, latitude geographical position of the event\n                JSON.stringify(e.lngLat.wrap())}`;\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/multiple-geometries/","title":"Add multiple geometries from one GeoJSON source","text":"<p>Add a polygon and circle layer from the same GeoJSON source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add multiple geometries from one GeoJSON source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a polygon and circle layer from the same GeoJSON source.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-121.403732, 40.492392],\n        zoom: 10\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('national-park', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Polygon',\n                            'coordinates': [\n                                [\n                                    [-121.353637, 40.584978],\n                                    [-121.284551, 40.584758],\n                                    [-121.275349, 40.541646],\n                                    [-121.246768, 40.541017],\n                                    [-121.251343, 40.423383],\n                                    [-121.32687, 40.423768],\n                                    [-121.360619, 40.43479],\n                                    [-121.363694, 40.409124],\n                                    [-121.439713, 40.409197],\n                                    [-121.439711, 40.423791],\n                                    [-121.572133, 40.423548],\n                                    [-121.577415, 40.550766],\n                                    [-121.539486, 40.558107],\n                                    [-121.520284, 40.572459],\n                                    [-121.487219, 40.550822],\n                                    [-121.446951, 40.56319],\n                                    [-121.370644, 40.563267],\n                                    [-121.353637, 40.584978]\n                                ]\n                            ]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-121.415061, 40.506229]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-121.505184, 40.488084]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-121.354465, 40.488737]\n                        }\n                    }\n                ]\n            }\n        });\n\n        map.addLayer({\n            'id': 'park-boundary',\n            'type': 'fill',\n            'source': 'national-park',\n            'paint': {\n                'fill-color': '#888888',\n                'fill-opacity': 0.4\n            },\n            'filter': ['==', '$type', 'Polygon']\n        });\n\n        map.addLayer({\n            'id': 'park-volcanoes',\n            'type': 'circle',\n            'source': 'national-park',\n            'paint': {\n                'circle-radius': 6,\n                'circle-color': '#B42222'\n            },\n            'filter': ['==', '$type', 'Point']\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/navigation/","title":"Display map navigation controls","text":"<p>Add zoom and rotation controls to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display map navigation controls&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add zoom and rotation controls to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-74.5, 40], // starting position\n        zoom: 9 // starting zoom\n    });\n\n    // Add zoom and rotation controls to the map.\n    map.addControl(new maplibregl.NavigationControl());\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/offset-vanishing-point-with-padding/","title":"Offset the vanishing point using padding","text":"<p>Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Offset the vanishing point using padding&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .rounded-rect {\n        background: white;\n        border-radius: 10px;\n        box-shadow: 0 0 50px -25px black;\n    }\n\n    .flex-center {\n        position: absolute;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .flex-center.left {\n        left: 0px;\n    }\n\n    .flex-center.right {\n        right: 0px;\n    }\n\n    .sidebar-content {\n        position: absolute;\n        width: 95%;\n        height: 95%;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 32px;\n        color: gray;\n    }\n\n    .sidebar-toggle {\n        position: absolute;\n        width: 1.3em;\n        height: 1.3em;\n        overflow: visible;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .sidebar-toggle.left {\n        right: -1.5em;\n    }\n\n    .sidebar-toggle.right {\n        left: -1.5em;\n    }\n\n    .sidebar-toggle:hover {\n        color: #0aa1cf;\n        cursor: pointer;\n    }\n\n    .sidebar {\n        transition: transform 1s;\n        z-index: 1;\n        width: 300px;\n        height: 100%;\n    }\n\n    /*\n  The sidebar styling has them \"expanded\" by default, we use CSS transforms to push them offscreen\n  The toggleSidebar() function removes this class from the element in order to expand it.\n*/\n    .left.collapsed {\n        transform: translateX(-295px);\n    }\n\n    .right.collapsed {\n        transform: translateX(295px);\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;\n    &lt;div id=\"left\" class=\"sidebar flex-center left collapsed\"&gt;\n        &lt;div class=\"sidebar-content rounded-rect flex-center\"&gt;\n            Left Sidebar\n            &lt;div\n                class=\"sidebar-toggle rounded-rect left\"\n                onclick=\"toggleSidebar('left')\"\n            &gt;\n                &amp;rarr;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"right\" class=\"sidebar flex-center right collapsed\"&gt;\n        &lt;div class=\"sidebar-content rounded-rect flex-center\"&gt;\n            Right Sidebar\n            &lt;div\n                class=\"sidebar-toggle rounded-rect right\"\n                onclick=\"toggleSidebar('right')\"\n            &gt;\n                &amp;larr;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const center = [-77.01866, 38.888];\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 12.5,\n        center,\n        pitch: 60,\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n    });\n\n    new maplibregl.Marker().setLngLat(center).addTo(map);\n\n    function toggleSidebar(id) {\n        const elem = document.getElementById(id);\n        const classes = elem.className.split(' ');\n        const collapsed = classes.indexOf('collapsed') !== -1;\n\n        const padding = {};\n\n        if (collapsed) {\n            // Remove the 'collapsed' class from the class list of the element, this sets it back to the expanded state.\n            classes.splice(classes.indexOf('collapsed'), 1);\n\n            padding[id] = 300; // In px, matches the width of the sidebars set in .sidebar CSS class\n            map.easeTo({\n                padding,\n                duration: 1000 // In ms, CSS transition duration property for the sidebar matches this value\n            });\n        } else {\n            padding[id] = 0;\n            // Add the 'collapsed' class to the class list of the element\n            classes.push('collapsed');\n\n            map.easeTo({\n                padding,\n                duration: 1000\n            });\n        }\n\n        // Update the class list on the element\n        elem.className = classes.join(' ');\n    }\n\n    map.on('load', () =&gt; {\n        toggleSidebar('left');\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/polygon-popup-on-click/","title":"Show polygon information on click","text":"<p>When a user clicks a polygon, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Show polygon information on click&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"When a user clicks a polygon, show a popup containing more information.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .maplibregl-popup {\n        max-width: 400px;\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-100.04, 38.907],\n        zoom: 3\n    });\n\n    map.on('load', () =&gt; {\n        // Add a source for the state polygons.\n        map.addSource('states', {\n            'type': 'geojson',\n            'data': 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_admin_1_states_provinces_shp.geojson'\n        });\n\n        // Add a layer showing the state polygons.\n        map.addLayer({\n            'id': 'states-layer',\n            'type': 'fill',\n            'source': 'states',\n            'paint': {\n                'fill-color': 'rgba(200, 100, 240, 0.4)',\n                'fill-outline-color': 'rgba(200, 100, 240, 1)'\n            }\n        });\n\n        // When a click event occurs on a feature in the states layer, open a popup at the\n        // location of the click, with description HTML from its properties.\n        map.on('click', 'states-layer', (e) =&gt; {\n            new maplibregl.Popup()\n                .setLngLat(e.lngLat)\n                .setHTML(e.features[0].properties.name)\n                .addTo(map);\n        });\n\n        // Change the cursor to a pointer when the mouse is over the states layer.\n        map.on('mouseenter', 'states-layer', () =&gt; {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n\n        // Change it back to a pointer when it leaves.\n        map.on('mouseleave', 'states-layer', () =&gt; {\n            map.getCanvas().style.cursor = '';\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/popup-on-click/","title":"Display a popup on click","text":"<p>When a user clicks a symbol, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a popup on click&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"When a user clicks a symbol, show a popup containing more information.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .maplibregl-popup {\n        max-width: 400px;\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Make it Mount Pleasant&lt;/strong&gt;&lt;p&gt;&lt;a href=\"http://www.mtpleasantdc.com/makeitmtpleasant\" target=\"_blank\" title=\"Opens in a new window\"&gt;Make it Mount Pleasant&lt;/a&gt; is a handmade and vintage market and afternoon of live entertainment and kids activities. 12:00-6:00 p.m.&lt;/p&gt;',\n                            'icon': 'theatre'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.038659, 38.931567]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Mad Men Season Five Finale Watch Party&lt;/strong&gt;&lt;p&gt;Head to Lounge 201 (201 Massachusetts Avenue NE) Sunday for a &lt;a href=\"http://madmens5finale.eventbrite.com/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Mad Men Season Five Finale Watch Party&lt;/a&gt;, complete with 60s costume contest, Mad Men trivia, and retro food and drink. 8:00-11:00 p.m. $10 general admission, $20 admission and two hour open bar.&lt;/p&gt;',\n                            'icon': 'theatre'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.003168, 38.894651]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Big Backyard Beach Bash and Wine Fest&lt;/strong&gt;&lt;p&gt;EatBar (2761 Washington Boulevard Arlington VA) is throwing a &lt;a href=\"http://tallulaeatbar.ticketleap.com/2012beachblanket/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Big Backyard Beach Bash and Wine Fest&lt;/a&gt; on Saturday, serving up conch fritters, fish tacos and crab sliders, and Red Apron hot dogs. 12:00-3:00 p.m. $25.grill hot dogs.&lt;/p&gt;',\n                            'icon': 'bar'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.090372, 38.881189]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Ballston Arts &amp; Crafts Market&lt;/strong&gt;&lt;p&gt;The &lt;a href=\"http://ballstonarts-craftsmarket.blogspot.com/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Ballston Arts &amp; Crafts Market&lt;/a&gt; sets up shop next to the Ballston metro this Saturday for the first of five dates this summer. Nearly 35 artists and crafters will be on hand selling their wares. 10:00-4:00 p.m.&lt;/p&gt;',\n                            'icon': 'art-gallery'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.111561, 38.882342]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Seersucker Bike Ride and Social&lt;/strong&gt;&lt;p&gt;Feeling dandy? Get fancy, grab your bike, and take part in this year\\'s &lt;a href=\"http://dandiesandquaintrelles.com/2012/04/the-seersucker-social-is-set-for-june-9th-save-the-date-and-start-planning-your-look/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Seersucker Social&lt;/a&gt; bike ride from Dandies and Quaintrelles. After the ride enjoy a lawn party at Hillwood with jazz, cocktails, paper hat-making, and more. 11:00-7:00 p.m.&lt;/p&gt;',\n                            'icon': 'bicycle'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.052477, 38.943951]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Capital Pride Parade&lt;/strong&gt;&lt;p&gt;The annual &lt;a href=\"http://www.capitalpride.org/parade\" target=\"_blank\" title=\"Opens in a new window\"&gt;Capital Pride Parade&lt;/a&gt; makes its way through Dupont this Saturday. 4:30 p.m. Free.&lt;/p&gt;',\n                            'icon': 'rocket'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.043444, 38.909664]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Muhsinah&lt;/strong&gt;&lt;p&gt;Jazz-influenced hip hop artist &lt;a href=\"http://www.muhsinah.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Muhsinah&lt;/a&gt; plays the &lt;a href=\"http://www.blackcatdc.com\"&gt;Black Cat&lt;/a&gt; (1811 14th Street NW) tonight with &lt;a href=\"http://www.exitclov.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Exit Clov&lt;/a&gt; and &lt;a href=\"http://godsilla.bandcamp.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Gods\u2019illa&lt;/a&gt;. 9:00 p.m. $12.&lt;/p&gt;',\n                            'icon': 'music'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.031706, 38.914581]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;A Little Night Music&lt;/strong&gt;&lt;p&gt;The Arlington Players\\' production of Stephen Sondheim\\'s  &lt;a href=\"http://www.thearlingtonplayers.org/drupal-6.20/node/4661/show\" target=\"_blank\" title=\"Opens in a new window\"&gt;&lt;em&gt;A Little Night Music&lt;/em&gt;&lt;/a&gt; comes to the Kogod Cradle at The Mead Center for American Theater (1101 6th Street SW) this weekend and next. 8:00 p.m.&lt;/p&gt;',\n                            'icon': 'music'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.020945, 38.878241]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Truckeroo&lt;/strong&gt;&lt;p&gt;&lt;a href=\"http://www.truckeroodc.com/www/\" target=\"_blank\"&gt;Truckeroo&lt;/a&gt; brings dozens of food trucks, live music, and games to half and M Street SE (across from Navy Yard Metro Station) today from 11:00 a.m. to 11:00 p.m.&lt;/p&gt;',\n                            'icon': 'music'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.007481, 38.876516]\n                        }\n                    }\n                ]\n            }\n        });\n        // Add a layer showing the places.\n        map.addLayer({\n            'id': 'places',\n            'type': 'symbol',\n            'source': 'places',\n            'layout': {\n                'icon-image': '{icon}_15',\n                'icon-overlap': 'always'\n            }\n        });\n\n        // When a click event occurs on a feature in the places layer, open a popup at the\n        // location of the feature, with description HTML from its properties.\n        map.on('click', 'places', (e) =&gt; {\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            const description = e.features[0].properties.description;\n\n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\n                coordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n            }\n\n            new maplibregl.Popup()\n                .setLngLat(coordinates)\n                .setHTML(description)\n                .addTo(map);\n        });\n\n        // Change the cursor to a pointer when the mouse is over the places layer.\n        map.on('mouseenter', 'places', () =&gt; {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n\n        // Change it back to a pointer when it leaves.\n        map.on('mouseleave', 'places', () =&gt; {\n            map.getCanvas().style.cursor = '';\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/popup-on-hover/","title":"Display a popup on hover","text":"<p>When a user hovers over a custom marker, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a popup on hover&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"When a user hovers over a custom marker, show a popup containing more information.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .maplibregl-popup {\n        max-width: 400px;\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        map.loadImage(\n            'https://maplibre.org/maplibre-gl-js/docs/assets/custom_marker.png',\n            // Add an image to use as a custom marker\n            (error, image) =&gt; {\n                if (error) throw error;\n                map.addImage('custom-marker', image);\n\n                map.addSource('places', {\n                    'type': 'geojson',\n                    'data': {\n                        'type': 'FeatureCollection',\n                        'features': [\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;Make it Mount Pleasant&lt;/strong&gt;&lt;p&gt;Make it Mount Pleasant is a handmade and vintage market and afternoon of live entertainment and kids activities. 12:00-6:00 p.m.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.038659, 38.931567]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;Mad Men Season Five Finale Watch Party&lt;/strong&gt;&lt;p&gt;Head to Lounge 201 (201 Massachusetts Avenue NE) Sunday for a Mad Men Season Five Finale Watch Party, complete with 60s costume contest, Mad Men trivia, and retro food and drink. 8:00-11:00 p.m. $10 general admission, $20 admission and two hour open bar.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.003168, 38.894651]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;Big Backyard Beach Bash and Wine Fest&lt;/strong&gt;&lt;p&gt;EatBar (2761 Washington Boulevard Arlington VA) is throwing a Big Backyard Beach Bash and Wine Fest on Saturday, serving up conch fritters, fish tacos and crab sliders, and Red Apron hot dogs. 12:00-3:00 p.m. $25.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.090372, 38.881189]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;Ballston Arts &amp; Crafts Market&lt;/strong&gt;&lt;p&gt;The Ballston Arts &amp; Crafts Market sets up shop next to the Ballston metro this Saturday for the first of five dates this summer. Nearly 35 artists and crafters will be on hand selling their wares. 10:00-4:00 p.m.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.111561, 38.882342]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;Seersucker Bike Ride and Social&lt;/strong&gt;&lt;p&gt;Feeling dandy? Get fancy, grab your bike, and take part in this year\\'s Seersucker Social bike ride from Dandies and Quaintrelles. After the ride enjoy a lawn party at Hillwood with jazz, cocktails, paper hat-making, and more. 11:00-7:00 p.m.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.052477, 38.943951]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;Capital Pride Parade&lt;/strong&gt;&lt;p&gt;The annual Capital Pride Parade makes its way through Dupont this Saturday. 4:30 p.m. Free.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.043444, 38.909664]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;Muhsinah&lt;/strong&gt;&lt;p&gt;Jazz-influenced hip hop artist Muhsinah plays the Black Cat (1811 14th Street NW) tonight with Exit Clov and Gods\u2019illa. 9:00 p.m. $12.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.031706, 38.914581]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;A Little Night Music&lt;/strong&gt;&lt;p&gt;The Arlington Players\\' production of Stephen Sondheim\\'s &lt;em&gt;A Little Night Music&lt;/em&gt; comes to the Kogod Cradle at The Mead Center for American Theater (1101 6th Street SW) this weekend and next. 8:00 p.m.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.020945, 38.878241]\n                                }\n                            },\n                            {\n                                'type': 'Feature',\n                                'properties': {\n                                    'description':\n                                        '&lt;strong&gt;Truckeroo&lt;/strong&gt;&lt;p&gt;Truckeroo brings dozens of food trucks, live music, and games to half and M Street SE (across from Navy Yard Metro Station) today from 11:00 a.m. to 11:00 p.m.&lt;/p&gt;'\n                                },\n                                'geometry': {\n                                    'type': 'Point',\n                                    'coordinates': [-77.007481, 38.876516]\n                                }\n                            }\n                        ]\n                    }\n                });\n\n                // Add a layer showing the places.\n                map.addLayer({\n                    'id': 'places',\n                    'type': 'symbol',\n                    'source': 'places',\n                    'layout': {\n                        'icon-image': 'custom-marker',\n                        'icon-overlap': 'always'\n                    }\n                });\n            }\n        );\n\n        // Create a popup, but don't add it to the map yet.\n        const popup = new maplibregl.Popup({\n            closeButton: false,\n            closeOnClick: false\n        });\n\n        map.on('mouseenter', 'places', (e) =&gt; {\n            // Change the cursor style as a UI indicator.\n            map.getCanvas().style.cursor = 'pointer';\n\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            const description = e.features[0].properties.description;\n\n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\n                coordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n            }\n\n            // Populate the popup and set its coordinates\n            // based on the feature found.\n            popup.setLngLat(coordinates).setHTML(description).addTo(map);\n        });\n\n        map.on('mouseleave', 'places', () =&gt; {\n            map.getCanvas().style.cursor = '';\n            popup.remove();\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/popup/","title":"Display a popup","text":"<p>Add a popup to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a popup&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a popup to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-96, 37.8],\n        zoom: 3\n    });\n\n    const popup = new maplibregl.Popup({closeOnClick: false})\n        .setLngLat([-96, 37.8])\n        .setHTML('&lt;h1&gt;Hello World!&lt;/h1&gt;')\n        .addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/queryrenderedfeatures/","title":"Get features under the mouse pointer","text":"<p>Use queryRenderedFeatures to show properties of hovered-over map elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Get features under the mouse pointer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use queryRenderedFeatures to show properties of hovered-over map elements.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #features {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        width: 50%;\n        overflow: auto;\n        background: rgba(255, 255, 255, 0.8);\n    }\n    #map canvas {\n        cursor: crosshair;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"features\"&gt;&lt;/pre&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-96, 37.8],\n        zoom: 3\n    });\n\n    map.on('mousemove', (e) =&gt; {\n        const features = map.queryRenderedFeatures(e.point);\n\n        // Limit the number of properties we're displaying for\n        // legibility and performance\n        const displayProperties = [\n            'type',\n            'properties',\n            'id',\n            'layer',\n            'source',\n            'sourceLayer',\n            'state'\n        ];\n\n        const displayFeatures = features.map((feat) =&gt; {\n            const displayFeat = {};\n            displayProperties.forEach((prop) =&gt; {\n                displayFeat[prop] = feat[prop];\n            });\n            return displayFeat;\n        });\n\n        document.getElementById('features').innerHTML = JSON.stringify(\n            displayFeatures,\n            null,\n            2\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/render-world-copies/","title":"Render world copies","text":"<p>Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Render world copies&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #menu {\n        position: absolute;\n        background: #fff;\n        padding: 10px;\n        font-family: 'Open Sans', sans-serif;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"menu\"&gt;\n    &lt;div&gt;Set &lt;code&gt;renderWorldCopies&lt;/code&gt; to:&lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"radio\" id=\"true\" name=\"rtoggle\" value=\"true\" checked /&gt;\n        &lt;label for=\"true\"&gt;true&lt;/label&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"radio\" id=\"false\" name=\"rtoggle\" value=\"false\" /&gt;\n        &lt;label for=\"false\"&gt;false&lt;/label&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // stylesheet location\n        center: [179, 0], // starting position [lng, lat]\n        zoom: 0.01 // starting zoom\n    });\n\n    const renderOptions = document.getElementById('menu');\n    const inputs = renderOptions.getElementsByTagName('input');\n\n    function switchRenderOption(option) {\n        const status = option.target.id;\n        map.setRenderWorldCopies(status === 'true');\n    }\n\n    for (let i = 0; i &lt; inputs.length; i++) {\n        inputs[i].onclick = switchRenderOption;\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/restrict-bounds/","title":"Restrict map panning to an area","text":"<p>Prevent a map from being panned to a different place by setting maxBounds.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Restrict map panning to an area&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Prevent a map from being panned to a different place by setting maxBounds.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    // Set bounds to New York, New York\n    const bounds = [\n        [-74.04728500751165, 40.68392799015035], // Southwest coordinates\n        [-73.91058699000139, 40.87764500765852] // Northeast coordinates\n    ];\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-73.9978, 40.7209],\n        zoom: 13,\n        maxBounds: bounds // Sets bounds as max\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/satellite-map/","title":"Display a satellite map","text":"<p>Display a satellite raster baselayer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a satellite map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Display a satellite raster baselayer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 9,\n        center: [137.9150899566626, 36.25956997955441],\n        style:\n            'https://api.maptiler.com/maps/hybrid/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/scroll-fly-to/","title":"Fly to a location based on scroll position","text":"<p>Scroll down through the story and the map will fly to the chapter's location.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Fly to a location based on scroll position&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Scroll down through the story and the map will fly to the chapter's location.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #map {\n        position: fixed;\n        width: 50%;\n    }\n    #features {\n        width: 50%;\n        margin-left: 50%;\n        font-family: sans-serif;\n        overflow-y: scroll;\n        background-color: #fafafa;\n    }\n    section {\n        padding: 25px 50px;\n        line-height: 25px;\n        border-bottom: 1px solid #ddd;\n        opacity: 0.25;\n        font-size: 13px;\n    }\n    section.active {\n        opacity: 1;\n    }\n    section:last-child {\n        border-bottom: none;\n        margin-bottom: 200px;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"features\"&gt;\n    &lt;section id=\"baker\" class=\"active\"&gt;\n        &lt;h3&gt;221b Baker St.&lt;/h3&gt;\n        &lt;p&gt;\n            November 1895. London is shrouded in fog and Sherlock Holmes and\n            Watson pass time restlessly awaiting a new case. \"The London\n            criminal is certainly a dull fellow,\" Sherlock bemoans. \"There have\n            been numerous petty thefts,\" Watson offers in response. Just then a\n            telegram arrives from Sherlock's brother Mycroft with a mysterious\n            case.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"aldgate\"&gt;\n        &lt;h3&gt;Aldgate Station&lt;/h3&gt;\n        &lt;p&gt;\n            Arthur Cadogan West was found dead, head crushed in on train tracks\n            at Aldgate Station at 6AM Tuesday morning. West worked at Woolwich\n            Arsenal on the Bruce-Partington submarine, a secret military\n            project. Plans for the submarine had been stolen and seven of the\n            ten missing papers were found in West's possession. Mycroft implores\n            Sherlock to take the case and recover the three missing papers.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"london-bridge\"&gt;\n        &lt;h3&gt;London Bridge&lt;/h3&gt;\n        &lt;p&gt;\n            Holmes and Watson's investigations take them across London. Sherlock\n            deduces that West was murdered elsewhere, then moved to Aldgate\n            Station to create the illusion that he was crushed on the tracks by\n            a train. On their way to Woolwich Sherlock dispatches a telegram to\n            Mycroft at London Bridge: \"Send list of all foreign spies known to\n            be in England, with full address.\"\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"woolwich\"&gt;\n        &lt;h3&gt;Woolwich Arsenal&lt;/h3&gt;\n        &lt;p&gt;\n            While investigating at Woolwich Arsenal Sherlock learns that West\n            did not have the three keys&amp;mdash;door, office, and\n            safe&amp;mdash;necessary to steal the papers. The train station clerk\n            mentions seeing an agitated West boarding the 8:15 train to London\n            Bridge. Sherlock suspects West of following someone who had access\n            to the Woolwich chief's keyring with all three keys.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"gloucester\"&gt;\n        &lt;h3&gt;Gloucester Road&lt;/h3&gt;\n        &lt;p&gt;\n            Mycroft responds to Sherlock's telegram and mentions several spies.\n            Hugo Oberstein of 13 Caulfield Gardens catches Sherlock's eye. He\n            heads to the nearby Gloucester Road station to investigate and\n            learns that the windows of Caulfield Gardens open over rail tracks\n            where trains stop frequently.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"caulfield-gardens\"&gt;\n        &lt;h3&gt;13 Caulfield Gardens&lt;/h3&gt;\n        &lt;p&gt;\n            Holmes deduces that the murderer placed West atop a stopped train at\n            Caulfield Gardens. The train traveled to Aldgate Station before\n            West's body finally toppled off. Backtracking to the criminal's\n            apartment, Holmes finds a series of classified ads from\n            &lt;em&gt;The Daily Telegraph&lt;/em&gt; stashed away. All are under the name\n            Pierrot: \"Monday night after nine. Two taps. Only ourselves. Do not\n            be so suspicious. Payment in hard cash when goods delivered.\"\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"telegraph\"&gt;\n        &lt;h3&gt;The Daily Telegraph&lt;/h3&gt;\n        &lt;p&gt;\n            Holmes and Watson head to The Daily Telegraph and place an ad to\n            draw out the criminal. It reads: \"To-night. Same hour. Same place.\n            Two taps. Most vitally important. Your own safety at stake.\n            Pierrot.\" The trap works and Holmes catches the criminal: Colonel\n            Valentine Walter, the brother of Woolwich Arsenal's chief. He\n            confesses to working for Hugo Oberstein to obtain the submarine\n            plans in order to pay off his debts.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"charing-cross\"&gt;\n        &lt;h3&gt;Charing Cross Hotel&lt;/h3&gt;\n        &lt;p&gt;\n            Walter writes to Oberstein and convinces him to meet in the smoking\n            room of the Charing Cross Hotel where he promises additional plans\n            for the submarine in exchange for money. The plan works and Holmes\n            and Watson catch both criminals.\n        &lt;/p&gt;\n        &lt;small id=\"citation\"&gt;\n            Adapted from\n            &lt;a href=\"http://www.gutenberg.org/files/2346/2346-h/2346-h.htm\"\n                &gt;Project Gutenberg&lt;/a\n            &gt;\n        &lt;/small&gt;\n    &lt;/section&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-0.15591514, 51.51830379],\n        zoom: 15.5,\n        bearing: 27,\n        pitch: 45\n    });\n\n    const chapters = {\n        'baker': {\n            bearing: 27,\n            center: [-0.15591514, 51.51830379],\n            zoom: 15.5,\n            pitch: 20\n        },\n        'aldgate': {\n            duration: 6000,\n            center: [-0.07571203, 51.51424049],\n            bearing: 150,\n            zoom: 15,\n            pitch: 0\n        },\n        'london-bridge': {\n            bearing: 90,\n            center: [-0.08533793, 51.50438536],\n            zoom: 13,\n            speed: 0.6,\n            pitch: 40\n        },\n        'woolwich': {\n            bearing: 90,\n            center: [0.05991101, 51.48752939],\n            zoom: 12.3\n        },\n        'gloucester': {\n            bearing: 45,\n            center: [-0.18335806, 51.49439521],\n            zoom: 15.3,\n            pitch: 20,\n            speed: 0.5\n        },\n        'caulfield-gardens': {\n            bearing: 180,\n            center: [-0.19684993, 51.5033856],\n            zoom: 12.3\n        },\n        'telegraph': {\n            bearing: 90,\n            center: [-0.10669358, 51.51433123],\n            zoom: 17.3,\n            pitch: 40\n        },\n        'charing-cross': {\n            bearing: 90,\n            center: [-0.12416858, 51.50779757],\n            zoom: 14.3,\n            pitch: 20\n        }\n    };\n\n    // On every scroll event, check which element is on screen\n    window.onscroll = function () {\n        const chapterNames = Object.keys(chapters);\n        for (let i = 0; i &lt; chapterNames.length; i++) {\n            const chapterName = chapterNames[i];\n            if (isElementOnScreen(chapterName)) {\n                setActiveChapter(chapterName);\n                break;\n            }\n        }\n    };\n\n    let activeChapterName = 'baker';\n    function setActiveChapter(chapterName) {\n        if (chapterName === activeChapterName) return;\n\n        map.flyTo(chapters[chapterName]);\n\n        document.getElementById(chapterName).setAttribute('class', 'active');\n        document.getElementById(activeChapterName).setAttribute('class', '');\n\n        activeChapterName = chapterName;\n    }\n\n    function isElementOnScreen(id) {\n        const element = document.getElementById(id);\n        const bounds = element.getBoundingClientRect();\n        return bounds.top &lt; window.innerHeight &amp;&amp; bounds.bottom &gt; 0;\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/set-perspective/","title":"Set pitch and bearing","text":"<p>Initialize a map with pitch and bearing camera options.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Set pitch and bearing&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Initialize a map with pitch and bearing camera options.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        // camera options properties\n        center: [-73.5804, 45.53483],\n        pitch: 60, // pitch in degrees\n        bearing: -60, // bearing in degrees\n        zoom: 10\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/set-popup/","title":"Attach a popup to a marker instance","text":"<p>Attach a popup to a marker and display it on click.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Attach a popup to a marker instance&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Attach a popup to a marker and display it on click.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #marker {\n        background-image: url('https://maplibre.org/maplibre-gl-js/docs/assets/washington-monument.jpg');\n        background-size: cover;\n        width: 50px;\n        height: 50px;\n        border-radius: 50%;\n        cursor: pointer;\n    }\n\n    .maplibregl-popup {\n        max-width: 200px;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const monument = [-77.0353, 38.8895];\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: monument,\n        zoom: 15\n    });\n\n    // create the popup\n    const popup = new maplibregl.Popup({offset: 25}).setText(\n        'Construction on the Washington Monument began in 1848.'\n    );\n\n    // create DOM element for the marker\n    const el = document.createElement('div');\n    el.id = 'marker';\n\n    // create the marker\n    new maplibregl.Marker({element: el})\n        .setLngLat(monument)\n        .setPopup(popup) // sets a popup on this marker\n        .addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/simple-map/","title":"Display a map","text":"<p>Initialize a map in an HTML element with MapLibre GL JS.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Initialize a map in an HTML element with MapLibre GL JS.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json', // style URL\n        center: [0, 0], // starting position [lng, lat]\n        zoom: 1 // starting zoom\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/timeline-animation/","title":"Create a time slider","text":"<p>Visualize earthquakes with a range slider.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a time slider&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Visualize earthquakes with a range slider.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .map-overlay {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        position: absolute;\n        width: 25%;\n        top: 0;\n        left: 0;\n        padding: 10px;\n    }\n\n    .map-overlay .map-overlay-inner {\n        background-color: #fff;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n        border-radius: 3px;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n\n    .map-overlay h2 {\n        line-height: 24px;\n        display: block;\n        margin: 0 0 10px;\n    }\n\n    .map-overlay .legend .bar {\n        height: 10px;\n        width: 100%;\n        background: linear-gradient(to right, #fca107, #7f3121);\n    }\n\n    .map-overlay input {\n        background-color: transparent;\n        display: inline-block;\n        width: 100%;\n        position: relative;\n        margin: 0;\n        cursor: ew-resize;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;div class=\"map-overlay top\"&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;h2&gt;Significant earthquakes in 2015&lt;/h2&gt;\n        &lt;label id=\"month\"&gt;&lt;/label&gt;\n        &lt;input id=\"slider\" type=\"range\" min=\"0\" max=\"11\" step=\"1\" value=\"0\" /&gt;\n    &lt;/div&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;div id=\"legend\" class=\"legend\"&gt;\n            &lt;div class=\"bar\"&gt;&lt;/div&gt;\n            &lt;div&gt;Magnitude (m)&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script src=\"https://d3js.org/d3.v3.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [31.4606, 20.7927],\n        zoom: 0.5\n    });\n\n    const months = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ];\n\n    function filterBy(month) {\n        const filters = ['==', 'month', month];\n        map.setFilter('earthquake-circles', filters);\n        map.setFilter('earthquake-labels', filters);\n\n        // Set the label to the month\n        document.getElementById('month').textContent = months[month];\n    }\n\n    map.on('load', () =&gt; {\n        // Data courtesy of http://earthquake.usgs.gov/\n        // Query for significant earthquakes in 2015 URL request looked like this:\n        // http://earthquake.usgs.gov/fdsnws/event/1/query\n        //    ?format=geojson\n        //    &amp;starttime=2015-01-01\n        //    &amp;endtime=2015-12-31\n        //    &amp;minmagnitude=6'\n        //\n        // Here we're using d3 to help us make the ajax request but you can use\n        // Any request method (library or otherwise) you wish.\n        d3.json(\n            'https://maplibre.org/maplibre-gl-js/docs/assets/significant-earthquakes-2015.geojson',\n            (err, data) =&gt; {\n                if (err) throw err;\n\n                // Create a month property value based on time\n                // used to filter against.\n                data.features = data.features.map((d) =&gt; {\n                    d.properties.month = new Date(d.properties.time).getMonth();\n                    return d;\n                });\n\n                map.addSource('earthquakes', {\n                    'type': 'geojson',\n                    data\n                });\n\n                map.addLayer({\n                    'id': 'earthquake-circles',\n                    'type': 'circle',\n                    'source': 'earthquakes',\n                    'paint': {\n                        'circle-color': [\n                            'interpolate',\n                            ['linear'],\n                            ['get', 'mag'],\n                            6,\n                            '#FCA107',\n                            8,\n                            '#7F3121'\n                        ],\n                        'circle-opacity': 0.75,\n                        'circle-radius': [\n                            'interpolate',\n                            ['linear'],\n                            ['get', 'mag'],\n                            6,\n                            20,\n                            8,\n                            40\n                        ]\n                    }\n                });\n\n                map.addLayer({\n                    'id': 'earthquake-labels',\n                    'type': 'symbol',\n                    'source': 'earthquakes',\n                    'layout': {\n                        'text-field': [\n                            'concat',\n                            ['to-string', ['get', 'mag']],\n                            'm'\n                        ],\n                        'text-font': [\n                            'Open Sans Bold',\n                            'Arial Unicode MS Bold'\n                        ],\n                        'text-size': 12\n                    },\n                    'paint': {\n                        'text-color': 'rgba(0,0,0,0.5)'\n                    }\n                });\n\n                // Set filter to first month of the year\n                // 0 = January\n                filterBy(0);\n\n                document\n                    .getElementById('slider')\n                    .addEventListener('input', (e) =&gt; {\n                        const month = parseInt(e.target.value, 10);\n                        filterBy(month);\n                    });\n            }\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/toggle-interaction-handlers/","title":"Toggle interactions","text":"<p>Enable or disable UI handlers on a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Toggle interactions&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Enable or disable UI handlers on a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .listing-group {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        font-weight: 600;\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        z-index: 1;\n        border-radius: 3px;\n        max-width: 20%;\n        color: #fff;\n    }\n\n    .listing-group input[type='checkbox']:first-child + label {\n        border-radius: 3px 3px 0 0;\n    }\n\n    .listing-group label:last-child {\n        border-radius: 0 0 3px 3px;\n        border: none;\n    }\n\n    .listing-group input[type='checkbox'] {\n        display: none;\n    }\n\n    .listing-group input[type='checkbox'] + label {\n        background-color: #3386c0;\n        display: block;\n        cursor: pointer;\n        padding: 10px;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n    }\n\n    .listing-group input[type='checkbox'] + label {\n        background-color: #3386c0;\n        text-transform: capitalize;\n    }\n\n    .listing-group input[type='checkbox'] + label:hover,\n    .listing-group input[type='checkbox']:checked + label {\n        background-color: #4ea0da;\n    }\n\n    .listing-group input[type='checkbox']:checked + label:before {\n        content: '\u2714';\n        margin-right: 5px;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;nav id=\"listing-group\" class=\"listing-group\"&gt;\n    &lt;input type=\"checkbox\" id=\"scrollZoom\" checked=\"checked\" /&gt;\n    &lt;label for=\"scrollZoom\"&gt;Scroll zoom&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"boxZoom\" checked=\"checked\" /&gt;\n    &lt;label for=\"boxZoom\"&gt;Box zoom&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"dragRotate\" checked=\"checked\" /&gt;\n    &lt;label for=\"dragRotate\"&gt;Drag rotate&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"dragPan\" checked=\"checked\" /&gt;\n    &lt;label for=\"dragPan\"&gt;Drag pan&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"keyboard\" checked=\"checked\" /&gt;\n    &lt;label for=\"keyboard\"&gt;Keyboard&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"doubleClickZoom\" checked=\"checked\" /&gt;\n    &lt;label for=\"doubleClickZoom\"&gt;Double click zoom&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"touchZoomRotate\" checked=\"checked\" /&gt;\n    &lt;label for=\"touchZoomRotate\"&gt;Touch zoom rotate&lt;/label&gt;\n&lt;/nav&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    document\n        .getElementById('listing-group')\n        .addEventListener('change', (e) =&gt; {\n            const handler = e.target.id;\n            if (e.target.checked) {\n                map[handler].enable();\n            } else {\n                map[handler].disable();\n            }\n        });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/variable-label-placement/","title":"Variable label placement","text":"<p>Use text-variable-anchor to allow high priority labels to shift position to stay on the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Variable label placement&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use text-variable-anchor to allow high priority labels to shift position to stay on the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const places = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Ford\\'s Theater',\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.038659, 38.931567]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'The Gaslight',\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.003168, 38.894651]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Horrible Harry\\'s',\n                    'icon': 'bar'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.090372, 38.881189]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Bike Party',\n                    'icon': 'bicycle'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.052477, 38.943951]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Rockabilly Rockstars',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.031706, 38.914581]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'District Drum Tribe',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.020945, 38.878241]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Motown Memories',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.007481, 38.876516]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        // Add a GeoJSON source containing place coordinates and information.\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': places\n        });\n\n        map.addLayer({\n            'id': 'poi-labels',\n            'type': 'symbol',\n            'source': 'places',\n            'layout': {\n                'text-field': ['get', 'description'],\n                'text-variable-anchor': ['top', 'bottom', 'left', 'right'],\n                'text-radial-offset': 0.5,\n                'text-justify': 'auto',\n                'icon-image': ['concat', ['get', 'icon'], '_15']\n            }\n        });\n\n        map.rotateTo(180, {duration: 10000});\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/variable-offset-label-placement/","title":"Variable label placement with offset","text":"<p>Use text-variable-anchor-offset to allow high priority labels to shift position to stay on the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Variable label placement with offset&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use text-variable-anchor-offset to allow high priority labels to shift position to stay on the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const places = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Ford\\'s Theater',\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.038659, 38.931567]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'The Gaslight',\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.003168, 38.894651]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Horrible Harry\\'s',\n                    'icon': 'bar'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.090372, 38.881189]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Bike Party',\n                    'icon': 'bicycle'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.052477, 38.943951]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Rockabilly Rockstars',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.031706, 38.914581]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'District Drum Tribe',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.020945, 38.878241]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Motown Memories',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.007481, 38.876516]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        // Add a GeoJSON source containing place coordinates and information.\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': places\n        });\n\n        map.addLayer({\n            'id': 'poi-labels',\n            'type': 'symbol',\n            'source': 'places',\n            'layout': {\n                'text-field': ['get', 'description'],\n                'text-variable-anchor-offset': ['top', [0, 1], 'bottom', [0, -2], 'left', [1, 0], 'right', [-2, 0]],\n                'text-justify': 'auto',\n                'icon-image': ['concat', ['get', 'icon'], '_15']\n            }\n        });\n\n        map.rotateTo(180, {duration: 10000});\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/vector-source/","title":"Add a vector tile source","text":"<p>Add a vector source to a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a vector tile source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a vector source to a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        zoom: 13,\n        center: [-122.447303, 37.753574]\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('contours', {\n            type: 'vector',\n            url:\n                'https://api.maptiler.com/tiles/contours/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n        });\n        map.addLayer({\n            'id': 'terrain-data',\n            'type': 'line',\n            'source': 'contours',\n            'source-layer': 'contour',\n            'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n            },\n            'paint': {\n                'line-color': '#ff69b4',\n                'line-width': 1\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/video-on-a-map/","title":"Add a video","text":"<p>Display a video on top of a satellite raster baselayer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a video&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Display a video on top of a satellite raster baselayer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const videoStyle = {\n        'version': 8,\n        'sources': {\n            'satellite': {\n                'type': 'raster',\n                'url':\n                'https://api.maptiler.com/tiles/satellite/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n                'tileSize': 256\n            },\n            'video': {\n                'type': 'video',\n                'urls': [\n                    'https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4',\n                    'https://static-assets.mapbox.com/mapbox-gl-js/drone.webm'\n                ],\n                'coordinates': [\n                    [-122.51596391201019, 37.56238816766053],\n                    [-122.51467645168304, 37.56410183312965],\n                    [-122.51309394836426, 37.563391708549425],\n                    [-122.51423120498657, 37.56161849366671]\n                ]\n            }\n        },\n        'layers': [\n            {\n                'id': 'background',\n                'type': 'background',\n                'paint': {\n                    'background-color': 'rgb(4,7,14)'\n                }\n            },\n            {\n                'id': 'satellite',\n                'type': 'raster',\n                'source': 'satellite'\n            },\n            {\n                'id': 'video',\n                'type': 'raster',\n                'source': 'video'\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        minZoom: 14,\n        zoom: 17,\n        center: [-122.514426, 37.562984],\n        bearing: -96,\n        style: videoStyle\n    });\n\n    let playingVideo = true;\n\n    map.on('click', () =&gt; {\n        playingVideo = !playingVideo;\n\n        if (playingVideo) map.getSource('video').play();\n        else map.getSource('video').pause();\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/visualize-population-density/","title":"Visualize population density","text":"<p>Use a variable binding expression to calculate and display population density.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Visualize population density&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a variable binding expression to calculate and display population density.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL', // stylesheet location\n        center: [30.0222, -1.9596], // starting position [lng, lat]\n        zoom: 7 // starting zoom\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('rwanda-provinces', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/rwanda-provinces.geojson'\n        });\n        map.addLayer({\n            'id': 'rwanda-provinces',\n            'type': 'fill',\n            'source': 'rwanda-provinces',\n            'layout': {},\n            'paint': {\n                'fill-color': [\n                    'let',\n                    'density',\n                    ['/', ['get', 'population'], ['get', 'sq-km']],\n                    [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        8,\n                        [\n                            'interpolate',\n                            ['linear'],\n                            ['var', 'density'],\n                            274,\n                            ['to-color', '#edf8e9'],\n                            1551,\n                            ['to-color', '#006d2c']\n                        ],\n                        10,\n                        [\n                            'interpolate',\n                            ['linear'],\n                            ['var', 'density'],\n                            274,\n                            ['to-color', '#eff3ff'],\n                            1551,\n                            ['to-color', '#08519c']\n                        ]\n                    ]\n                ],\n                'fill-opacity': 0.7\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/wms/","title":"Add a WMS source","text":"<p>Add an external Web Map Service raster layer to the map using addSource's tiles option.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a WMS source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an external Web Map Service raster layer to the map using addSource's tiles option.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        zoom: 8,\n        center: [-74.5447, 40.6892]\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('wms-test-source', {\n            'type': 'raster',\n            // use the tiles option to specify a WMS tile source URL\n            // https://maplibre.org/maplibre-style-spec/sources/\n            'tiles': [\n                'https://img.nj.gov/imagerywms/Natural2015?bbox={bbox-epsg-3857}&amp;format=image/png&amp;service=WMS&amp;version=1.1.1&amp;request=GetMap&amp;srs=EPSG:3857&amp;transparent=true&amp;width=256&amp;height=256&amp;layers=Natural2015'\n            ],\n            'tileSize': 256\n        });\n        map.addLayer(\n            {\n                'id': 'wms-test-layer',\n                'type': 'raster',\n                'source': 'wms-test-source',\n                'paint': {}\n            },\n            'aeroway_fill'\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/zoomto-linestring/","title":"Fit to the bounds of a LineString","text":"<p>Get the bounds of a LineString.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Fit to the bounds of a LineString&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Get the bounds of a LineString.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .btn-control {\n        font: bold 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        background-color: #3386c0;\n        color: #fff;\n        position: absolute;\n        top: 20px;\n        left: 50%;\n        z-index: 1;\n        border: none;\n        width: 200px;\n        margin-left: -100px;\n        display: block;\n        cursor: pointer;\n        padding: 10px 20px;\n        border-radius: 3px;\n    }\n\n    .btn-control:hover {\n        background-color: #4ea0da;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"zoomto\" class=\"btn-control\"&gt;Zoom to bounds&lt;/button&gt;\n\n&lt;script&gt;\n    // A GeoJSON object with a LineString route from the White House to Capitol Hill\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'LineString',\n                    'properties': {},\n                    'coordinates': [\n                        [-77.0366048812866, 38.89873175227713],\n                        [-77.03364372253417, 38.89876515143842],\n                        [-77.03364372253417, 38.89549195896866],\n                        [-77.02982425689697, 38.89549195896866],\n                        [-77.02400922775269, 38.89387200688839],\n                        [-77.01519012451172, 38.891416957534204],\n                        [-77.01521158218382, 38.892068305429156],\n                        [-77.00813055038452, 38.892051604275686],\n                        [-77.00832366943358, 38.89143365883688],\n                        [-77.00818419456482, 38.89082405874451],\n                        [-77.00815200805664, 38.88989712255097]\n                    ]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style:\n            'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n        center: [-77.0214, 38.897],\n        zoom: 12\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('LineString', {\n            'type': 'geojson',\n            'data': geojson\n        });\n        map.addLayer({\n            'id': 'LineString',\n            'type': 'line',\n            'source': 'LineString',\n            'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n            },\n            'paint': {\n                'line-color': '#BF93E4',\n                'line-width': 5\n            }\n        });\n\n        document\n            .getElementById('zoomto')\n            .addEventListener('click', () =&gt; {\n                // Geographic coordinates of the LineString\n                const coordinates = geojson.features[0].geometry.coordinates;\n\n                // Pass the first coordinates in the LineString to `lngLatBounds` &amp;\n                // wrap each coordinate pair in `extend` to include them in the bounds\n                // result. A variation of this technique could be applied to zooming\n                // to the bounds of multiple Points or Polygon geomteries - it just\n                // requires wrapping all the coordinates with the extend method.\n                const bounds = coordinates.reduce((bounds, coord) =&gt; {\n                    return bounds.extend(coord);\n                }, new maplibregl.LngLatBounds(coordinates[0], coordinates[0]));\n\n                map.fitBounds(bounds, {\n                    padding: 20\n                });\n            });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"guides/","title":"Guides","text":"<p>This section of the docs' site is dedicated to some more complex examples and totorials. If you have something you would like to share with the community that is not straight forward and might be beneficial to others, this is the place!</p> <p>Things that are short enough and/or with lower complexity are probably already in the Examples section, but if not, feel free to add there.</p> <p>The process of adding examples or guides is pretty straight forward, see our <code>docs</code> folder in the MpaLibre GL JS repo for more information.</p>"},{"location":"guides/large-data/","title":"Optimising MapLibre Performance: Tips for Large GeoJSON Datasets","text":"<p>Performance is a critical aspect of providing users with a smooth and responsive experience. This guide focuses on techniques for improving the performance of MapLibre, particularly when dealing with large datasets in GeoJSON format. We'll categorise our strategies into two key areas:</p> <ol> <li>Loading the data</li> <li>Visualizing the data</li> </ol>"},{"location":"guides/large-data/#loading-the-data","title":"Loading the Data","text":""},{"location":"guides/large-data/#making-the-file-smaller","title":"Making the File Smaller","text":"<p>When working with large GeoJSON datasets, one of the most effective ways to enhance loading performance is to reduce the data's size. You can implement the following approaches with packages such as Turf or web tools such as Reduce GeoJSON and Mapshaper.</p>"},{"location":"guides/large-data/#removing-unused-properties","title":"Removing unused properties","text":"<p>GeoJSON files often contain numerous properties that are not essential for your map's functionality. By eliminating any unused or redundant properties, you can significantly reduce the file size, leading to faster loading times.</p>"},{"location":"guides/large-data/#reduce-precision-of-coordinates","title":"Reduce precision of coordinates","text":"<p>GeoJSON coordinates typically default to extreme precision, often with 15-17 decimal places, which is on an atomic scale. For most practical applications, you can reduce the coordinate precision to around 6 decimals, roughly equivalent to a scale of around 1cm. This reduces the file size without compromising usability.</p>"},{"location":"guides/large-data/#simplify-geometry","title":"Simplify geometry","text":"<p>If your GeoJSON contains geometries (not just points), consider using various algorithms to simplify the geometry. Tools like Mapshaper provide user-friendly interfaces for this task.</p>"},{"location":"guides/large-data/#minify","title":"Minify","text":"<p>Minifying the GeoJSON data by removing unnecessary whitespace can further decrease the file size, aiding in quicker data transmission.</p>"},{"location":"guides/large-data/#data-compression","title":"Data Compression","text":"<p>Another approach is to compress the GeoJSON data and send the zipped file to the user's browser. While this introduces a minor tradeoff between processing and file size, it's generally acceptable, considering the efficiency of modern JavaScript.</p>"},{"location":"guides/large-data/#data-chunking","title":"Data Chunking","text":"<p>If your GeoJSON dataset is still quite large after reducing its size, consider splitting it into smaller, manageable chunks. Even 2 or 3 can be beneficial. These split datasets can be added to the map as normal with <code>addSource()</code> and <code>addLayer()</code>.</p> <p>This technique can be particularly useful when there are parts of the dataset that have different properties. For example, if the map starts zoomed into an geographic area, the data within this geography could be one chunk and the rest could be another chunk. Similarly, if one part of the dataset has live updates and the rest is largely static, it could make sense to place these two parts into separate chunks.</p> <p>Data chunking is more impactful on desktop browsers than mobile browsers.</p>"},{"location":"guides/large-data/#data-streaming","title":"Data Streaming","text":"<p>Implementing data streaming techniques can further enhance loading performance. Rather than loading the entire dataset at once, data streaming allows you to load smaller portions as the user interacts with the map. This approach minimises the initial loading time and provides a more responsive experience. A template for data streaming can be found in the Live Update Features example.</p>"},{"location":"guides/large-data/#store-geojson-at-url","title":"Store GeoJSON at URL","text":"<p>For improved performance in MapLibre, it's advisable to load your GeoJSON data from a data URL rather than embedding it directly in your JavaScript code. This practice helps reduce the memory overhead on the client-side.</p>"},{"location":"guides/large-data/#vector-tiling","title":"Vector Tiling","text":"<p>Consider converting your GeoJSON data into vector tiles, which are specifically designed for efficient rendering. An example is available on how to add a vector tile source.</p>"},{"location":"guides/large-data/#tiling-on-the-server","title":"Tiling on the server","text":"<p>For even larger datasets you can use a tool like Martin to turn a database into tiles on the server side. These tiles can then be shown directly to the user. A demo of Martin shows it comfortably handling a 13GB database. However, this approach will require more setup than the others.</p>"},{"location":"guides/large-data/#visualising-the-data","title":"Visualising the Data","text":"<p>Once the data is loaded, to ensure a smooth user experience, it's essential to optimise how you visualise the data on the map.</p>"},{"location":"guides/large-data/#cluster","title":"Cluster","text":"<p>One simple approach is to visualise fewer points. If we are using a GeoJSON source (i.e. not vector tiles), we can use 'clustering' to group nearby points together. This approach reduces the number of features displayed on the map, improving rendering performance and maintaining map readability.</p> <p>To do this, when we add the data, we can adjust the cluster options. For example:</p> <pre><code>map.addSource('earthquakes', {\n            type: 'geojson',\n            data: 'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson',\n            cluster: true,\n            clusterMaxZoom: 14, // Max zoom to cluster points on\n            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n        });\n</code></pre> <p>You can see a full example here: Create and style clusters.</p>"},{"location":"guides/large-data/#allow-overlap","title":"Allow Overlap","text":"<p>By default, Maplibre calculates if features such as points, texts or icons are overlapping. This can be computationally intensive, particularly when there are a lot of features. Changing the overlap mode so that all points are shown and no overlapping is checked can significantly reduce this.</p>"},{"location":"guides/large-data/#simplify-styling","title":"Simplify Styling","text":"<p>Complex and intricate map styles can slow down rendering, especially when working with large datasets. Simplify your map styles by reducing the number of layers, symbols, and complex features, and use simpler symbology where appropriate.</p>"},{"location":"guides/large-data/#zoom-levels","title":"Zoom Levels","text":"<p>Optimising your zoom levels ensures that the map loads efficiently and displays the right level of detail at different zoom levels, contributing to a smoother user experience.</p>"},{"location":"guides/large-data/#max-zoom-level","title":"Max Zoom Level","text":"<p>To improve map performance during panning and zooming, set the maxZoom option on your GeoJSON source to a value lower than the default 22. For most point sources, a maxZoom value of 12 strikes a good balance between precision and speed.</p>"},{"location":"guides/large-data/#min-zoom-level","title":"Min Zoom Level","text":"<p>Adjust the minZoom property on the layer that references the GeoJSON source to a value greater than 0. This setting prevents the map from attempting to load and render tiles at low zoom levels, which is often unnecessary because there aren't enough screen pixels to display every feature of a large dataset. By adjusting the minZoom property, you'll achieve a faster map load and improved rendering performance.</p> <p>You can implement them both as follows:</p> <pre><code>let map = new maplibregl.Map({\n  container: 'map',\n  maxZoom: 12,\n  minZoom: 5\n});\n</code></pre>"},{"location":"guides/mapbox-migration-guide/","title":"MapBox migration guide","text":"<p>This part of the docs is dedicated to the migration from <code>mapbox-gl</code> to <code>maplibre-gl</code>.</p> <p>This guide might not be accurate depending on the current version of <code>mapbox-gl</code> but should be failry straight forward.</p> <p>The libraries are very similar but diverge with newer features happening from v2 in both libraries where Mapbox turned proprietary.</p> <p>The overall migration happens by uninstalling <code>mapbox-gl</code> and installing <code>maplibre-gl</code> in your node packages (or see below for CDN links), and replacing <code>mapboxgl</code> with <code>maplibregl</code> throughout your TypeScript, JavaScript and HTML/CSS.</p> <pre><code>-    var map = new mapboxgl.Map({\n+    var map = new maplibregl.Map({\n\n-    &lt;button class=\"mapboxgl-ctrl\"&gt;\n+    &lt;button class=\"maplibregl-ctrl\"&gt;\n</code></pre>"},{"location":"guides/mapbox-migration-guide/#compatibility-branch","title":"Compatibility branch","text":"<p>MapLibre GL JS v1 is completely backward compatible with Mapbox GL JS v1. This compatibility branch (named 1.x) is tagged v1 on npm, and its current version is 1.15.3. </p>"},{"location":"guides/mapbox-migration-guide/#cdn-links","title":"CDN Links","text":"<p>MapLibre GL JS is distributed via unpkg.com.</p> <pre><code>-    &lt;script src=\"https://api.mapbox.com/mapbox-gl-js/v#.#.#/mapbox-gl.js\"&gt;&lt;/script&gt;\n-    &lt;link\n-      href=\"https://api.mapbox.com/mapbox-gl-js/v#.#.#/mapbox-gl.css\"\n-      rel=\"stylesheet\"\n-    /&gt;\n\n\n+    &lt;script src=\"https://unpkg.com/maplibre-gl@#.#.#/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n+    &lt;link\n+      href=\"https://unpkg.com/maplibre-gl@#.#.#/dist/maplibre-gl.css\"\n+      rel=\"stylesheet\"\n+    /&gt;\n</code></pre> <p>Don't forget to replace the version above <code>#.#.#</code> with the version you would like to use. In the upper right corner of this page you can find the number of the latest version.</p>"}]}